import {
  require_pluralize
} from "./chunk-ZFKR73HT.js";
import {
  chunk_default,
  debounce_default,
  differenceWith_default,
  fromPairs_default,
  get_default,
  isEqual_default,
  unionWith_default,
  uniqBy_default,
  zip_default
} from "./chunk-BT45J3G4.js";
import {
  O,
  T,
  d,
  p
} from "./chunk-SCGGGWO5.js";
import {
  require_react_dom
} from "./chunk-GYWC62UC.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React11 = require_react();
        var ReactSharedInternals = React11.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState5 = React11.useState, useEffect6 = React11.useEffect, useLayoutEffect = React11.useLayoutEffect, useDebugValue = React11.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React11.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState5({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect6(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$12(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$12 : useSyncExternalStore2;
        var useSyncExternalStore$2 = React11.useSyncExternalStore !== void 0 ? React11.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/stackframe/stackframe.js
var require_stackframe = __commonJS({
  "node_modules/stackframe/stackframe.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("stackframe", [], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.StackFrame = factory();
      }
    })(exports, function() {
      "use strict";
      function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }
      function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      }
      function _getter(p3) {
        return function() {
          return this[p3];
        };
      }
      var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
      var numericProps = ["columnNumber", "lineNumber"];
      var stringProps = ["fileName", "functionName", "source"];
      var arrayProps = ["args"];
      var objectProps = ["evalOrigin"];
      var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);
      function StackFrame(obj) {
        if (!obj)
          return;
        for (var i3 = 0; i3 < props.length; i3++) {
          if (obj[props[i3]] !== void 0) {
            this["set" + _capitalize(props[i3])](obj[props[i3]]);
          }
        }
      }
      StackFrame.prototype = {
        getArgs: function() {
          return this.args;
        },
        setArgs: function(v2) {
          if (Object.prototype.toString.call(v2) !== "[object Array]") {
            throw new TypeError("Args must be an Array");
          }
          this.args = v2;
        },
        getEvalOrigin: function() {
          return this.evalOrigin;
        },
        setEvalOrigin: function(v2) {
          if (v2 instanceof StackFrame) {
            this.evalOrigin = v2;
          } else if (v2 instanceof Object) {
            this.evalOrigin = new StackFrame(v2);
          } else {
            throw new TypeError("Eval Origin must be an Object or StackFrame");
          }
        },
        toString: function() {
          var fileName = this.getFileName() || "";
          var lineNumber = this.getLineNumber() || "";
          var columnNumber = this.getColumnNumber() || "";
          var functionName = this.getFunctionName() || "";
          if (this.getIsEval()) {
            if (fileName) {
              return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
            }
            return "[eval]:" + lineNumber + ":" + columnNumber;
          }
          if (functionName) {
            return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
          }
          return fileName + ":" + lineNumber + ":" + columnNumber;
        }
      };
      StackFrame.fromString = function StackFrame$$fromString(str) {
        var argsStartIndex = str.indexOf("(");
        var argsEndIndex = str.lastIndexOf(")");
        var functionName = str.substring(0, argsStartIndex);
        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
        var locationString = str.substring(argsEndIndex + 1);
        if (locationString.indexOf("@") === 0) {
          var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
          var fileName = parts[1];
          var lineNumber = parts[2];
          var columnNumber = parts[3];
        }
        return new StackFrame({
          functionName,
          args: args || void 0,
          fileName,
          lineNumber: lineNumber || void 0,
          columnNumber: columnNumber || void 0
        });
      };
      for (var i2 = 0; i2 < booleanProps.length; i2++) {
        StackFrame.prototype["get" + _capitalize(booleanProps[i2])] = _getter(booleanProps[i2]);
        StackFrame.prototype["set" + _capitalize(booleanProps[i2])] = function(p3) {
          return function(v2) {
            this[p3] = Boolean(v2);
          };
        }(booleanProps[i2]);
      }
      for (var j = 0; j < numericProps.length; j++) {
        StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]);
        StackFrame.prototype["set" + _capitalize(numericProps[j])] = function(p3) {
          return function(v2) {
            if (!_isNumber(v2)) {
              throw new TypeError(p3 + " must be a Number");
            }
            this[p3] = Number(v2);
          };
        }(numericProps[j]);
      }
      for (var k = 0; k < stringProps.length; k++) {
        StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]);
        StackFrame.prototype["set" + _capitalize(stringProps[k])] = function(p3) {
          return function(v2) {
            this[p3] = String(v2);
          };
        }(stringProps[k]);
      }
      return StackFrame;
    });
  }
});

// node_modules/error-stack-parser/error-stack-parser.js
var require_error_stack_parser = __commonJS({
  "node_modules/error-stack-parser/error-stack-parser.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("error-stack-parser", ["stackframe"], factory);
      } else if (typeof exports === "object") {
        module.exports = factory(require_stackframe());
      } else {
        root.ErrorStackParser = factory(root.StackFrame);
      }
    })(exports, function ErrorStackParser(StackFrame) {
      "use strict";
      var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
      var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
      var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
      return {
        /**
         * Given an Error object, extract the most information from it.
         *
         * @param {Error} error object
         * @return {Array} of StackFrames
         */
        parse: function ErrorStackParser$$parse(error) {
          if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
            return this.parseOpera(error);
          } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
            return this.parseV8OrIE(error);
          } else if (error.stack) {
            return this.parseFFOrSafari(error);
          } else {
            throw new Error("Cannot parse given Error object");
          }
        },
        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
          if (urlLike.indexOf(":") === -1) {
            return [urlLike];
          }
          var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
          var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
          return [parts[1], parts[2] || void 0, parts[3] || void 0];
        },
        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(CHROME_IE_STACK_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf("(eval ") > -1) {
              line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(,.*$)/g, "");
            }
            var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(").replace(/^.*?\s+/, "");
            var location = sanitizedLine.match(/ (\(.+\)$)/);
            sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
            var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);
            var functionName = location && sanitizedLine || void 0;
            var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
            return new StackFrame({
              functionName,
              fileName,
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        },
        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !line.match(SAFARI_NATIVE_CODE_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf(" > eval") > -1) {
              line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
            }
            if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
              return new StackFrame({
                functionName: line
              });
            } else {
              var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
              var matches = line.match(functionNameRegex);
              var functionName = matches && matches[1] ? matches[1] : void 0;
              var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
              return new StackFrame({
                functionName,
                fileName: locationParts[0],
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }
          }, this);
        },
        parseOpera: function ErrorStackParser$$parseOpera(e) {
          if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
            return this.parseOpera9(e);
          } else if (!e.stack) {
            return this.parseOpera10(e);
          } else {
            return this.parseOpera11(e);
          }
        },
        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
          var lines = e.message.split("\n");
          var result = [];
          for (var i2 = 2, len = lines.length; i2 < len; i2 += 2) {
            var match = lineRE.exec(lines[i2]);
            if (match) {
              result.push(new StackFrame({
                fileName: match[2],
                lineNumber: match[1],
                source: lines[i2]
              }));
            }
          }
          return result;
        },
        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
          var lines = e.stacktrace.split("\n");
          var result = [];
          for (var i2 = 0, len = lines.length; i2 < len; i2 += 2) {
            var match = lineRE.exec(lines[i2]);
            if (match) {
              result.push(
                new StackFrame({
                  functionName: match[3] || void 0,
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i2]
                })
              );
            }
          }
          return result;
        },
        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
          }, this);
          return filtered.map(function(line) {
            var tokens = line.split("@");
            var locationParts = this.extractLocation(tokens.pop());
            var functionCall = tokens.shift() || "";
            var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
            var argsRaw;
            if (functionCall.match(/\(([^)]*)\)/)) {
              argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
            }
            var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
            return new StackFrame({
              functionName,
              args,
              fileName: locationParts[0],
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        }
      };
    });
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports, module) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i2 = 0; i2 < a.length; i2 += 1) {
        arr[i2] = a[i2];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i2 = offset || 0, j = 0; i2 < arrLike.length; i2 += 1, j += 1) {
        arr[j] = arrLike[i2];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i2 = 0; i2 < arr.length; i2 += 1) {
        str += arr[i2];
        if (i2 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs[i2] = "$" + i2;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x2) {
      return x2.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
          return true;
        } catch (e) {
          return false;
        }
      }
      return false;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!hasPropertyDescriptors()) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module.exports = hasPropertyDescriptors;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports, module) {
    "use strict";
    var hasPropertyDescriptors = require_has_property_descriptors()();
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = hasPropertyDescriptors && GetIntrinsic("%Object.defineProperty%", true);
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    var $SyntaxError = GetIntrinsic("%SyntaxError%");
    var $TypeError = GetIntrinsic("%TypeError%");
    var gopd = require_gopd();
    module.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $floor = GetIntrinsic("%Math.floor%");
    module.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O2) {
      return O2.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i2 = 0; i2 < attrs.length; i2++) {
          s += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs2 = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs2)) {
          return "[" + indentedJoin(xs2, indent) + "]";
        }
        return "[ " + $join.call(xs2, ", ") + " ]";
      }
      if (isError2(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys2 = arrObjKeys(obj, inspect);
        var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys2.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys2, indent) + "}";
        }
        return tag + "{ " + $join.call(ys2, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError2(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f2) {
      if (f2.name) {
        return f2.name;
      }
      var m2 = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
      if (m2) {
        return m2[1];
      }
      return null;
    }
    function indexOf(xs2, x2) {
      if (xs2.indexOf) {
        return xs2.indexOf(x2);
      }
      for (var i2 = 0, l2 = xs2.length; i2 < l2; i2++) {
        if (xs2[i2] === x2) {
          return i2;
        }
      }
      return -1;
    }
    function isMap(x2) {
      if (!mapSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        mapSize.call(x2);
        try {
          setSize.call(x2);
        } catch (s) {
          return true;
        }
        return x2 instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x2) {
      if (!weakMapHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x2, weakMapHas);
        try {
          weakSetHas.call(x2, weakSetHas);
        } catch (s) {
          return true;
        }
        return x2 instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x2) {
      if (!weakRefDeref || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x2);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x2) {
      if (!setSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        setSize.call(x2);
        try {
          mapSize.call(x2);
        } catch (m2) {
          return true;
        }
        return x2 instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x2) {
      if (!weakSetHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x2, weakSetHas);
        try {
          weakMapHas.call(x2, weakMapHas);
        } catch (s) {
          return true;
        }
        return x2 instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x2) {
      if (!x2 || typeof x2 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x2 instanceof HTMLElement) {
        return true;
      }
      return typeof x2.nodeName === "string" && typeof x2.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x2 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x2) {
        return "\\" + x2;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs2) {
      for (var i2 = 0; i2 < xs2.length; i2++) {
        if (indexOf(xs2[i2], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs2, indent) {
      if (xs2.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs2, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs2 = [];
      if (isArr) {
        xs2.length = obj.length;
        for (var i2 = 0; i2 < obj.length; i2++) {
          xs2[i2] = has(obj, i2) ? inspect(obj[i2], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs2.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs2.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs2.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs2;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          // eslint-disable-line no-param-reassign
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o2;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o2) {
              return listGet($o2, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o2) {
              return listHas($o2, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o2) {
              $o2 = { key: {}, next: null };
            }
            listSet($o2, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i2 = 0; i2 < 256; ++i2) {
        array.push("%" + ((i2 < 16 ? "0" : "") + i2.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i2 = 0; i2 < source.length; ++i2) {
        if (typeof source[i2] !== "undefined") {
          obj[i2] = source[i2];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i2) {
          if (has.call(target, i2)) {
            var targetItem = target[i2];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i2] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i2] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i2 = 0; i2 < string.length; ++i2) {
        var c = string.charCodeAt(i2);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i2);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i2 += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i2) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i2 = 0; i2 < queue.length; ++i2) {
        var item = queue[i2];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i2 = 0; i2 < val.length; i2 += 1) {
          mapped.push(fn(val[i2]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v2) {
      return typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || typeof v2 === "symbol" || typeof v2 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i2 = 0; i2 < objKeys.length; ++i2) {
        var key = objKeys[i2];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i2;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i2 = 0; i2 < parts.length; ++i2) {
          if (parts[i2].indexOf("utf8=") === 0) {
            if (parts[i2] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i2] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i2;
            i2 = parts.length;
          }
        }
      }
      for (i2 = 0; i2 < parts.length; ++i2) {
        if (i2 === skipIndex) {
          continue;
        }
        var part = parts[i2];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i2 = chain.length - 1; i2 >= 0; --i2) {
        var obj;
        var root = chain[i2];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i2 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i2 < options.depth) {
        i2 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i2 = 0; i2 < keys.length; ++i2) {
        var key = keys[i2];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/warn-once/index.js
var require_warn_once = __commonJS({
  "node_modules/warn-once/index.js"(exports, module) {
    var DEV = true;
    var warnings = /* @__PURE__ */ new Set();
    function warnOnce(condition, ...rest) {
      if (DEV && condition) {
        const key = rest.join(" ");
        if (warnings.has(key)) {
          return;
        }
        warnings.add(key);
        console.warn(...rest);
      }
    }
    module.exports = warnOnce;
  }
});

// node_modules/export-to-csv-fix-source-map/build/export-to-csv.js
var require_export_to_csv = __commonJS({
  "node_modules/export-to-csv-fix-source-map/build/export-to-csv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CsvConfigConsts = function() {
      function CsvConfigConsts2() {
      }
      CsvConfigConsts2.EOL = "\r\n";
      CsvConfigConsts2.BOM = "\uFEFF";
      CsvConfigConsts2.DEFAULT_FIELD_SEPARATOR = ",";
      CsvConfigConsts2.DEFAULT_DECIMAL_SEPARATOR = ".";
      CsvConfigConsts2.DEFAULT_QUOTE = '"';
      CsvConfigConsts2.DEFAULT_SHOW_TITLE = false;
      CsvConfigConsts2.DEFAULT_TITLE = "My Generated Report";
      CsvConfigConsts2.DEFAULT_FILENAME = "generated";
      CsvConfigConsts2.DEFAULT_SHOW_LABELS = false;
      CsvConfigConsts2.DEFAULT_USE_TEXT_FILE = false;
      CsvConfigConsts2.DEFAULT_USE_BOM = true;
      CsvConfigConsts2.DEFAULT_HEADER = [];
      CsvConfigConsts2.DEFAULT_KEYS_AS_HEADERS = false;
      return CsvConfigConsts2;
    }();
    exports.CsvConfigConsts = CsvConfigConsts;
    exports.ConfigDefaults = {
      filename: CsvConfigConsts.DEFAULT_FILENAME,
      fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,
      quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,
      decimalSeparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,
      showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,
      showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,
      title: CsvConfigConsts.DEFAULT_TITLE,
      useTextFile: CsvConfigConsts.DEFAULT_USE_TEXT_FILE,
      useBom: CsvConfigConsts.DEFAULT_USE_BOM,
      headers: CsvConfigConsts.DEFAULT_HEADER,
      useKeysAsHeaders: CsvConfigConsts.DEFAULT_KEYS_AS_HEADERS
    };
    var ExportToCsv = function() {
      function ExportToCsv2(options) {
        this._csv = "";
        var config = options || {};
        this._options = objectAssign({}, exports.ConfigDefaults, config);
        if (this._options.useKeysAsHeaders && this._options.headers && this._options.headers.length > 0) {
          console.warn("Option to use object keys as headers was set, but headers were still passed!");
        }
      }
      Object.defineProperty(ExportToCsv2.prototype, "options", {
        get: function() {
          return this._options;
        },
        set: function(options) {
          this._options = objectAssign({}, exports.ConfigDefaults, options);
        },
        enumerable: true,
        configurable: true
      });
      ExportToCsv2.prototype.generateCsv = function(jsonData, shouldReturnCsv) {
        if (shouldReturnCsv === void 0) {
          shouldReturnCsv = false;
        }
        this._csv = "";
        this._parseData(jsonData);
        if (this._options.useBom) {
          this._csv += CsvConfigConsts.BOM;
        }
        if (this._options.showTitle) {
          this._csv += this._options.title + "\r\n\n";
        }
        this._getHeaders();
        this._getBody();
        if (this._csv == "") {
          console.log("Invalid data");
          return;
        }
        if (shouldReturnCsv) {
          return this._csv;
        }
        var FileType = this._options.useTextFile ? "plain" : "csv";
        var fileExtension = this._options.useTextFile ? ".txt" : ".csv";
        var blob = new Blob([this._csv], { "type": "text/" + FileType + ";charset=utf8;" });
        if (navigator.msSaveBlob) {
          var filename = this._options.filename.replace(/ /g, "_") + fileExtension;
          navigator.msSaveBlob(blob, filename);
        } else {
          var attachmentType = this._options.useTextFile ? "text" : "csv";
          var uri = "data:attachment/" + attachmentType + ";charset=utf-8," + encodeURI(this._csv);
          var link = document.createElement("a");
          link.href = URL.createObjectURL(blob);
          link.setAttribute("visibility", "hidden");
          link.download = this._options.filename.replace(/ /g, "_") + fileExtension;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
      };
      ExportToCsv2.prototype._getHeaders = function() {
        if (!this._options.showLabels && !this._options.useKeysAsHeaders) {
          return;
        }
        var useKeysAsHeaders = this._options.useKeysAsHeaders;
        var headers = useKeysAsHeaders ? Object.keys(this._data[0]) : this._options.headers;
        if (headers.length > 0) {
          var row = "";
          for (var keyPos = 0; keyPos < headers.length; keyPos++) {
            row += headers[keyPos] + this._options.fieldSeparator;
          }
          row = row.slice(0, -1);
          this._csv += row + CsvConfigConsts.EOL;
        }
      };
      ExportToCsv2.prototype._getBody = function() {
        var keys = Object.keys(this._data[0]);
        for (var i2 = 0; i2 < this._data.length; i2++) {
          var row = "";
          for (var keyPos = 0; keyPos < keys.length; keyPos++) {
            var key = keys[keyPos];
            row += this._formatData(this._data[i2][key]) + this._options.fieldSeparator;
          }
          row = row.slice(0, -1);
          this._csv += row + CsvConfigConsts.EOL;
        }
      };
      ExportToCsv2.prototype._formatData = function(data) {
        if (this._options.decimalSeparator === "locale" && this._isFloat(data)) {
          return data.toLocaleString();
        }
        if (this._options.decimalSeparator !== "." && this._isFloat(data)) {
          return data.toString().replace(".", this._options.decimalSeparator);
        }
        if (typeof data === "string") {
          data = data.replace(/"/g, '""');
          if (this._options.quoteStrings || data.indexOf(",") > -1 || data.indexOf("\n") > -1 || data.indexOf("\r") > -1) {
            data = this._options.quoteStrings + data + this._options.quoteStrings;
          }
          return data;
        }
        if (typeof data === "boolean") {
          return data ? "TRUE" : "FALSE";
        }
        return data;
      };
      ExportToCsv2.prototype._isFloat = function(input) {
        return +input === input && (!isFinite(input) || Boolean(input % 1));
      };
      ExportToCsv2.prototype._parseData = function(jsonData) {
        this._data = typeof jsonData != "object" ? JSON.parse(jsonData) : jsonData;
        return this._data;
      };
      return ExportToCsv2;
    }();
    exports.ExportToCsv = ExportToCsv;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function objectAssign(target) {
      var source = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        source[_i2 - 1] = arguments[_i2];
      }
      var from;
      var to2 = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to2[key] = from[key];
          }
        }
        if (Object.getOwnPropertySymbols) {
          symbols = Object.getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to2[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to2;
    }
  }
});

// node_modules/export-to-csv-fix-source-map/build/index.js
var require_build = __commonJS({
  "node_modules/export-to-csv-fix-source-map/build/index.js"(exports) {
    "use strict";
    function __export(m2) {
      for (var p3 in m2)
        if (!exports.hasOwnProperty(p3))
          exports[p3] = m2[p3];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(require_export_to_csv());
  }
});

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports, module) {
    !function(e, t) {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module && "undefined" != typeof exports ? module.exports = t() : e.Papa = t();
    }(exports, function s() {
      "use strict";
      var f2 = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f2 ? f2 : {};
      var n = !f2.document && !!f2.postMessage, o2 = f2.IS_PAPA_WORKER || false, a = {}, u = 0, b = { parse: function(e, t) {
        var r2 = (t = t || {}).dynamicTyping || false;
        J2(r2) && (t.dynamicTypingFunction = r2, r2 = {});
        if (t.dynamicTyping = r2, t.transform = !!J2(t.transform) && t.transform, t.worker && b.WORKERS_SUPPORTED) {
          var i2 = function() {
            if (!b.WORKERS_SUPPORTED)
              return false;
            var e2 = (r3 = f2.URL || f2.webkitURL || null, i3 = s.toString(), b.BLOB_URL || (b.BLOB_URL = r3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", i3, ")();"], { type: "text/javascript" })))), t2 = new f2.Worker(e2);
            var r3, i3;
            return t2.onmessage = _2, t2.id = u++, a[t2.id] = t2;
          }();
          return i2.userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = J2(t.step), t.chunk = J2(t.chunk), t.complete = J2(t.complete), t.error = J2(t.error), delete t.worker, void i2.postMessage({ input: e, config: t, workerId: i2.id });
        }
        var n2 = null;
        b.NODE_STREAM_INPUT, "string" == typeof e ? (e = function(e2) {
          if (65279 === e2.charCodeAt(0))
            return e2.slice(1);
          return e2;
        }(e), n2 = t.download ? new l2(t) : new p3(t)) : true === e.readable && J2(e.read) && J2(e.on) ? n2 = new g2(t) : (f2.File && e instanceof File || e instanceof Object) && (n2 = new c(t));
        return n2.stream(e);
      }, unparse: function(e, t) {
        var n2 = false, _3 = true, m3 = ",", y3 = "\r\n", s2 = '"', a2 = s2 + s2, r2 = false, i2 = null, o3 = false;
        !function() {
          if ("object" != typeof t)
            return;
          "string" != typeof t.delimiter || b.BAD_DELIMITERS.filter(function(e2) {
            return -1 !== t.delimiter.indexOf(e2);
          }).length || (m3 = t.delimiter);
          ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n2 = t.quotes);
          "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (r2 = t.skipEmptyLines);
          "string" == typeof t.newline && (y3 = t.newline);
          "string" == typeof t.quoteChar && (s2 = t.quoteChar);
          "boolean" == typeof t.header && (_3 = t.header);
          if (Array.isArray(t.columns)) {
            if (0 === t.columns.length)
              throw new Error("Option columns is empty");
            i2 = t.columns;
          }
          void 0 !== t.escapeChar && (a2 = t.escapeChar + s2);
          ("boolean" == typeof t.escapeFormulae || t.escapeFormulae instanceof RegExp) && (o3 = t.escapeFormulae instanceof RegExp ? t.escapeFormulae : /^[=+\-@\t\r].*$/);
        }();
        var u2 = new RegExp(Q(s2), "g");
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0]))
            return h2(null, e, r2);
          if ("object" == typeof e[0])
            return h2(i2 || Object.keys(e[0]), e, r2);
        } else if ("object" == typeof e)
          return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || i2), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), h2(e.fields || [], e.data || [], r2);
        throw new Error("Unable to serialize unrecognized input");
        function h2(e2, t2, r3) {
          var i3 = "";
          "string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2));
          var n3 = Array.isArray(e2) && 0 < e2.length, s3 = !Array.isArray(t2[0]);
          if (n3 && _3) {
            for (var a3 = 0; a3 < e2.length; a3++)
              0 < a3 && (i3 += m3), i3 += v3(e2[a3], a3);
            0 < t2.length && (i3 += y3);
          }
          for (var o4 = 0; o4 < t2.length; o4++) {
            var u3 = n3 ? e2.length : t2[o4].length, h3 = false, f3 = n3 ? 0 === Object.keys(t2[o4]).length : 0 === t2[o4].length;
            if (r3 && !n3 && (h3 = "greedy" === r3 ? "" === t2[o4].join("").trim() : 1 === t2[o4].length && 0 === t2[o4][0].length), "greedy" === r3 && n3) {
              for (var d4 = [], l3 = 0; l3 < u3; l3++) {
                var c2 = s3 ? e2[l3] : l3;
                d4.push(t2[o4][c2]);
              }
              h3 = "" === d4.join("").trim();
            }
            if (!h3) {
              for (var p4 = 0; p4 < u3; p4++) {
                0 < p4 && !f3 && (i3 += m3);
                var g3 = n3 && s3 ? e2[p4] : p4;
                i3 += v3(t2[o4][g3], p4);
              }
              o4 < t2.length - 1 && (!r3 || 0 < u3 && !f3) && (i3 += y3);
            }
          }
          return i3;
        }
        function v3(e2, t2) {
          if (null == e2)
            return "";
          if (e2.constructor === Date)
            return JSON.stringify(e2).slice(1, 25);
          var r3 = false;
          o3 && "string" == typeof e2 && o3.test(e2) && (e2 = "'" + e2, r3 = true);
          var i3 = e2.toString().replace(u2, a2);
          return (r3 = r3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || function(e3, t3) {
            for (var r4 = 0; r4 < t3.length; r4++)
              if (-1 < e3.indexOf(t3[r4]))
                return true;
            return false;
          }(i3, b.BAD_DELIMITERS) || -1 < i3.indexOf(m3) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s2 + i3 + s2 : i3;
        }
      } };
      if (b.RECORD_SEP = String.fromCharCode(30), b.UNIT_SEP = String.fromCharCode(31), b.BYTE_ORDER_MARK = "\uFEFF", b.BAD_DELIMITERS = ["\r", "\n", '"', b.BYTE_ORDER_MARK], b.WORKERS_SUPPORTED = !n && !!f2.Worker, b.NODE_STREAM_INPUT = 1, b.LocalChunkSize = 10485760, b.RemoteChunkSize = 5242880, b.DefaultDelimiter = ",", b.Parser = E2, b.ParserHandle = r, b.NetworkStreamer = l2, b.FileStreamer = c, b.StringStreamer = p3, b.ReadableStreamStreamer = g2, f2.jQuery) {
        var d3 = f2.jQuery;
        d3.fn.parse = function(o3) {
          var r2 = o3.config || {}, u2 = [];
          return this.each(function(e2) {
            if (!("INPUT" === d3(this).prop("tagName").toUpperCase() && "file" === d3(this).attr("type").toLowerCase() && f2.FileReader) || !this.files || 0 === this.files.length)
              return true;
            for (var t = 0; t < this.files.length; t++)
              u2.push({ file: this.files[t], inputElem: this, instanceConfig: d3.extend({}, r2) });
          }), e(), this;
          function e() {
            if (0 !== u2.length) {
              var e2, t, r3, i2, n2 = u2[0];
              if (J2(o3.before)) {
                var s2 = o3.before(n2.file, n2.inputElem);
                if ("object" == typeof s2) {
                  if ("abort" === s2.action)
                    return e2 = "AbortError", t = n2.file, r3 = n2.inputElem, i2 = s2.reason, void (J2(o3.error) && o3.error({ name: e2 }, t, r3, i2));
                  if ("skip" === s2.action)
                    return void h2();
                  "object" == typeof s2.config && (n2.instanceConfig = d3.extend(n2.instanceConfig, s2.config));
                } else if ("skip" === s2)
                  return void h2();
              }
              var a2 = n2.instanceConfig.complete;
              n2.instanceConfig.complete = function(e3) {
                J2(a2) && a2(e3, n2.file, n2.inputElem), h2();
              }, b.parse(n2.file, n2.instanceConfig);
            } else
              J2(o3.complete) && o3.complete();
          }
          function h2() {
            u2.splice(0, 1), e();
          }
        };
      }
      function h(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, (function(e2) {
          var t = w(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new r(t), (this._handle.streamer = this)._config = t;
        }).call(this, e), this.parseChunk = function(e2, t) {
          if (this.isFirstChunk && J2(this._config.beforeFirstChunk)) {
            var r2 = this._config.beforeFirstChunk(e2);
            void 0 !== r2 && (e2 = r2);
          }
          this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + e2;
          this._partialLine = "";
          var n2 = this._handle.parse(i2, this._baseIndex, !this._finished);
          if (!this._handle.paused() && !this._handle.aborted()) {
            var s2 = n2.meta.cursor;
            this._finished || (this._partialLine = i2.substring(s2 - this._baseIndex), this._baseIndex = s2), n2 && n2.data && (this._rowCount += n2.data.length);
            var a2 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
            if (o2)
              f2.postMessage({ results: n2, workerId: b.WORKER_ID, finished: a2 });
            else if (J2(this._config.chunk) && !t) {
              if (this._config.chunk(n2, this._handle), this._handle.paused() || this._handle.aborted())
                return void (this._halted = true);
              n2 = void 0, this._completeResults = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n2.data), this._completeResults.errors = this._completeResults.errors.concat(n2.errors), this._completeResults.meta = n2.meta), this._completed || !a2 || !J2(this._config.complete) || n2 && n2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), a2 || n2 && n2.meta.paused || this._nextChunk(), n2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          J2(this._config.error) ? this._config.error(e2) : o2 && this._config.error && f2.postMessage({ workerId: b.WORKER_ID, error: e2, finished: false });
        };
      }
      function l2(e) {
        var i2;
        (e = e || {}).chunkSize || (e.chunkSize = b.RemoteChunkSize), h.call(this, e), this._nextChunk = n ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished)
            this._chunkLoaded();
          else {
            if (i2 = new XMLHttpRequest(), this._config.withCredentials && (i2.withCredentials = this._config.withCredentials), n || (i2.onload = v2(this._chunkLoaded, this), i2.onerror = v2(this._chunkError, this)), i2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
              var e2 = this._config.downloadRequestHeaders;
              for (var t in e2)
                i2.setRequestHeader(t, e2[t]);
            }
            if (this._config.chunkSize) {
              var r2 = this._start + this._config.chunkSize - 1;
              i2.setRequestHeader("Range", "bytes=" + this._start + "-" + r2);
            }
            try {
              i2.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            n && 0 === i2.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === i2.readyState && (i2.status < 200 || 400 <= i2.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : i2.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e2) {
            var t = e2.getResponseHeader("Content-Range");
            if (null === t)
              return -1;
            return parseInt(t.substring(t.lastIndexOf("/") + 1));
          }(i2), this.parseChunk(i2.responseText)));
        }, this._chunkError = function(e2) {
          var t = i2.statusText || e2;
          this._sendError(new Error(t));
        };
      }
      function c(e) {
        var i2, n2;
        (e = e || {}).chunkSize || (e.chunkSize = b.LocalChunkSize), h.call(this, e);
        var s2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, n2 = e2.slice || e2.webkitSlice || e2.mozSlice, s2 ? ((i2 = new FileReader()).onload = v2(this._chunkLoaded, this), i2.onerror = v2(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input;
          if (this._config.chunkSize) {
            var t = Math.min(this._start + this._config.chunkSize, this._input.size);
            e2 = n2.call(e2, this._start, t);
          }
          var r2 = i2.readAsText(e2, this._config.encoding);
          s2 || this._chunkLoaded({ target: { result: r2 } });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      function p3(e) {
        var r2;
        h.call(this, e = e || {}), this.stream = function(e2) {
          return r2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          if (!this._finished) {
            var e2, t = this._config.chunkSize;
            return t ? (e2 = r2.substring(0, t), r2 = r2.substring(t)) : (e2 = r2, r2 = ""), this._finished = !r2, this.parseChunk(e2);
          }
        };
      }
      function g2(e) {
        h.call(this, e = e || {});
        var t = [], r2 = true, i2 = false;
        this.pause = function() {
          h.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          h.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          i2 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : r2 = true;
        }, this._streamData = v2(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), r2 && (r2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = v2(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = v2(function() {
          this._streamCleanUp(), i2 = true, this._streamData("");
        }, this), this._streamCleanUp = v2(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function r(m3) {
        var a2, o3, u2, i2 = Math.pow(2, 53), n2 = -i2, s2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, h2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, t = this, r2 = 0, f3 = 0, d4 = false, e = false, l3 = [], c2 = { data: [], errors: [], meta: {} };
        if (J2(m3.step)) {
          var p4 = m3.step;
          m3.step = function(e2) {
            if (c2 = e2, _3())
              g3();
            else {
              if (g3(), 0 === c2.data.length)
                return;
              r2 += e2.data.length, m3.preview && r2 > m3.preview ? o3.abort() : (c2.data = c2.data[0], p4(c2, t));
            }
          };
        }
        function y3(e2) {
          return "greedy" === m3.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        function g3() {
          return c2 && u2 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b.DefaultDelimiter + "'"), u2 = false), m3.skipEmptyLines && (c2.data = c2.data.filter(function(e2) {
            return !y3(e2);
          })), _3() && function() {
            if (!c2)
              return;
            function e2(e3, t3) {
              J2(m3.transformHeader) && (e3 = m3.transformHeader(e3, t3)), l3.push(e3);
            }
            if (Array.isArray(c2.data[0])) {
              for (var t2 = 0; _3() && t2 < c2.data.length; t2++)
                c2.data[t2].forEach(e2);
              c2.data.splice(0, 1);
            } else
              c2.data.forEach(e2);
          }(), function() {
            if (!c2 || !m3.header && !m3.dynamicTyping && !m3.transform)
              return c2;
            function e2(e3, t3) {
              var r3, i3 = m3.header ? {} : [];
              for (r3 = 0; r3 < e3.length; r3++) {
                var n3 = r3, s3 = e3[r3];
                m3.header && (n3 = r3 >= l3.length ? "__parsed_extra" : l3[r3]), m3.transform && (s3 = m3.transform(s3, n3)), s3 = v3(n3, s3), "__parsed_extra" === n3 ? (i3[n3] = i3[n3] || [], i3[n3].push(s3)) : i3[n3] = s3;
              }
              return m3.header && (r3 > l3.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + l3.length + " fields but parsed " + r3, f3 + t3) : r3 < l3.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + l3.length + " fields but parsed " + r3, f3 + t3)), i3;
            }
            var t2 = 1;
            !c2.data.length || Array.isArray(c2.data[0]) ? (c2.data = c2.data.map(e2), t2 = c2.data.length) : c2.data = e2(c2.data, 0);
            m3.header && c2.meta && (c2.meta.fields = l3);
            return f3 += t2, c2;
          }();
        }
        function _3() {
          return m3.header && 0 === l3.length;
        }
        function v3(e2, t2) {
          return r3 = e2, m3.dynamicTypingFunction && void 0 === m3.dynamicTyping[r3] && (m3.dynamicTyping[r3] = m3.dynamicTypingFunction(r3)), true === (m3.dynamicTyping[r3] || m3.dynamicTyping) ? "true" === t2 || "TRUE" === t2 || "false" !== t2 && "FALSE" !== t2 && (function(e3) {
            if (s2.test(e3)) {
              var t3 = parseFloat(e3);
              if (n2 < t3 && t3 < i2)
                return true;
            }
            return false;
          }(t2) ? parseFloat(t2) : h2.test(t2) ? new Date(t2) : "" === t2 ? null : t2) : t2;
          var r3;
        }
        function k(e2, t2, r3, i3) {
          var n3 = { type: e2, code: t2, message: r3 };
          void 0 !== i3 && (n3.row = i3), c2.errors.push(n3);
        }
        this.parse = function(e2, t2, r3) {
          var i3 = m3.quoteChar || '"';
          if (m3.newline || (m3.newline = function(e3, t3) {
            e3 = e3.substring(0, 1048576);
            var r4 = new RegExp(Q(t3) + "([^]*?)" + Q(t3), "gm"), i4 = (e3 = e3.replace(r4, "")).split("\r"), n4 = e3.split("\n"), s4 = 1 < n4.length && n4[0].length < i4[0].length;
            if (1 === i4.length || s4)
              return "\n";
            for (var a3 = 0, o4 = 0; o4 < i4.length; o4++)
              "\n" === i4[o4][0] && a3++;
            return a3 >= i4.length / 2 ? "\r\n" : "\r";
          }(e2, i3)), u2 = false, m3.delimiter)
            J2(m3.delimiter) && (m3.delimiter = m3.delimiter(e2), c2.meta.delimiter = m3.delimiter);
          else {
            var n3 = function(e3, t3, r4, i4, n4) {
              var s4, a3, o4, u3;
              n4 = n4 || [",", "	", "|", ";", b.RECORD_SEP, b.UNIT_SEP];
              for (var h3 = 0; h3 < n4.length; h3++) {
                var f4 = n4[h3], d5 = 0, l4 = 0, c3 = 0;
                o4 = void 0;
                for (var p5 = new E2({ comments: i4, delimiter: f4, newline: t3, preview: 10 }).parse(e3), g4 = 0; g4 < p5.data.length; g4++)
                  if (r4 && y3(p5.data[g4]))
                    c3++;
                  else {
                    var _4 = p5.data[g4].length;
                    l4 += _4, void 0 !== o4 ? 0 < _4 && (d5 += Math.abs(_4 - o4), o4 = _4) : o4 = _4;
                  }
                0 < p5.data.length && (l4 /= p5.data.length - c3), (void 0 === a3 || d5 <= a3) && (void 0 === u3 || u3 < l4) && 1.99 < l4 && (a3 = d5, s4 = f4, u3 = l4);
              }
              return { successful: !!(m3.delimiter = s4), bestDelimiter: s4 };
            }(e2, m3.newline, m3.skipEmptyLines, m3.comments, m3.delimitersToGuess);
            n3.successful ? m3.delimiter = n3.bestDelimiter : (u2 = true, m3.delimiter = b.DefaultDelimiter), c2.meta.delimiter = m3.delimiter;
          }
          var s3 = w(m3);
          return m3.preview && m3.header && s3.preview++, a2 = e2, o3 = new E2(s3), c2 = o3.parse(a2, t2, r3), g3(), d4 ? { meta: { paused: true } } : c2 || { meta: { paused: false } };
        }, this.paused = function() {
          return d4;
        }, this.pause = function() {
          d4 = true, o3.abort(), a2 = J2(m3.chunk) ? "" : a2.substring(o3.getCharIndex());
        }, this.resume = function() {
          t.streamer._halted ? (d4 = false, t.streamer.parseChunk(a2, true)) : setTimeout(t.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, o3.abort(), c2.meta.aborted = true, J2(m3.complete) && m3.complete(c2), a2 = "";
        };
      }
      function Q(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E2(j) {
        var z2, M = (j = j || {}).delimiter, P2 = j.newline, U = j.comments, q2 = j.step, N = j.preview, B = j.fastMode, K = z2 = void 0 === j.quoteChar || null === j.quoteChar ? '"' : j.quoteChar;
        if (void 0 !== j.escapeChar && (K = j.escapeChar), ("string" != typeof M || -1 < b.BAD_DELIMITERS.indexOf(M)) && (M = ","), U === M)
          throw new Error("Comment character same as delimiter");
        true === U ? U = "#" : ("string" != typeof U || -1 < b.BAD_DELIMITERS.indexOf(U)) && (U = false), "\n" !== P2 && "\r" !== P2 && "\r\n" !== P2 && (P2 = "\n");
        var W2 = 0, H = false;
        this.parse = function(i2, t, r2) {
          if ("string" != typeof i2)
            throw new Error("Input must be a string");
          var n2 = i2.length, e = M.length, s2 = P2.length, a2 = U.length, o3 = J2(q2), u2 = [], h2 = [], f3 = [], d4 = W2 = 0;
          if (!i2)
            return L();
          if (j.header && !t) {
            var l3 = i2.split(P2)[0].split(M), c2 = [], p4 = {}, g3 = false;
            for (var _3 in l3) {
              var m3 = l3[_3];
              J2(j.transformHeader) && (m3 = j.transformHeader(m3, _3));
              var y3 = m3, v3 = p4[m3] || 0;
              for (0 < v3 && (g3 = true, y3 = m3 + "_" + v3), p4[m3] = v3 + 1; c2.includes(y3); )
                y3 = y3 + "_" + v3;
              c2.push(y3);
            }
            if (g3) {
              var k = i2.split(P2);
              k[0] = c2.join(M), i2 = k.join(P2);
            }
          }
          if (B || false !== B && -1 === i2.indexOf(z2)) {
            for (var b2 = i2.split(P2), E3 = 0; E3 < b2.length; E3++) {
              if (f3 = b2[E3], W2 += f3.length, E3 !== b2.length - 1)
                W2 += P2.length;
              else if (r2)
                return L();
              if (!U || f3.substring(0, a2) !== U) {
                if (o3) {
                  if (u2 = [], I2(f3.split(M)), F(), H)
                    return L();
                } else
                  I2(f3.split(M));
                if (N && N <= E3)
                  return u2 = u2.slice(0, N), L(true);
              }
            }
            return L();
          }
          for (var w2 = i2.indexOf(M, W2), R2 = i2.indexOf(P2, W2), C2 = new RegExp(Q(K) + Q(z2), "g"), S2 = i2.indexOf(z2, W2); ; )
            if (i2[W2] !== z2)
              if (U && 0 === f3.length && i2.substring(W2, W2 + a2) === U) {
                if (-1 === R2)
                  return L();
                W2 = R2 + s2, R2 = i2.indexOf(P2, W2), w2 = i2.indexOf(M, W2);
              } else if (-1 !== w2 && (w2 < R2 || -1 === R2))
                f3.push(i2.substring(W2, w2)), W2 = w2 + e, w2 = i2.indexOf(M, W2);
              else {
                if (-1 === R2)
                  break;
                if (f3.push(i2.substring(W2, R2)), D(R2 + s2), o3 && (F(), H))
                  return L();
                if (N && u2.length >= N)
                  return L(true);
              }
            else
              for (S2 = W2, W2++; ; ) {
                if (-1 === (S2 = i2.indexOf(z2, S2 + 1)))
                  return r2 || h2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: u2.length, index: W2 }), T2();
                if (S2 === n2 - 1)
                  return T2(i2.substring(W2, S2).replace(C2, z2));
                if (z2 !== K || i2[S2 + 1] !== K) {
                  if (z2 === K || 0 === S2 || i2[S2 - 1] !== K) {
                    -1 !== w2 && w2 < S2 + 1 && (w2 = i2.indexOf(M, S2 + 1)), -1 !== R2 && R2 < S2 + 1 && (R2 = i2.indexOf(P2, S2 + 1));
                    var O2 = A(-1 === R2 ? w2 : Math.min(w2, R2));
                    if (i2.substr(S2 + 1 + O2, e) === M) {
                      f3.push(i2.substring(W2, S2).replace(C2, z2)), i2[W2 = S2 + 1 + O2 + e] !== z2 && (S2 = i2.indexOf(z2, W2)), w2 = i2.indexOf(M, W2), R2 = i2.indexOf(P2, W2);
                      break;
                    }
                    var x2 = A(R2);
                    if (i2.substring(S2 + 1 + x2, S2 + 1 + x2 + s2) === P2) {
                      if (f3.push(i2.substring(W2, S2).replace(C2, z2)), D(S2 + 1 + x2 + s2), w2 = i2.indexOf(M, W2), S2 = i2.indexOf(z2, W2), o3 && (F(), H))
                        return L();
                      if (N && u2.length >= N)
                        return L(true);
                      break;
                    }
                    h2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: u2.length, index: W2 }), S2++;
                  }
                } else
                  S2++;
              }
          return T2();
          function I2(e2) {
            u2.push(e2), d4 = W2;
          }
          function A(e2) {
            var t2 = 0;
            if (-1 !== e2) {
              var r3 = i2.substring(S2 + 1, e2);
              r3 && "" === r3.trim() && (t2 = r3.length);
            }
            return t2;
          }
          function T2(e2) {
            return r2 || (void 0 === e2 && (e2 = i2.substring(W2)), f3.push(e2), W2 = n2, I2(f3), o3 && F()), L();
          }
          function D(e2) {
            W2 = e2, I2(f3), f3 = [], R2 = i2.indexOf(P2, W2);
          }
          function L(e2) {
            return { data: u2, errors: h2, meta: { delimiter: M, linebreak: P2, aborted: H, truncated: !!e2, cursor: d4 + (t || 0) } };
          }
          function F() {
            q2(L()), u2 = [], h2 = [];
          }
        }, this.abort = function() {
          H = true;
        }, this.getCharIndex = function() {
          return W2;
        };
      }
      function _2(e) {
        var t = e.data, r2 = a[t.workerId], i2 = false;
        if (t.error)
          r2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: function() {
            i2 = true, m2(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, pause: y2, resume: y2 };
          if (J2(r2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (r2.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !i2); s2++)
              ;
            delete t.results;
          } else
            J2(r2.userChunk) && (r2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !i2 && m2(t.workerId, t.results);
      }
      function m2(e, t) {
        var r2 = a[e];
        J2(r2.userComplete) && r2.userComplete(t), r2.terminate(), delete a[e];
      }
      function y2() {
        throw new Error("Not implemented.");
      }
      function w(e) {
        if ("object" != typeof e || null === e)
          return e;
        var t = Array.isArray(e) ? [] : {};
        for (var r2 in e)
          t[r2] = w(e[r2]);
        return t;
      }
      function v2(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function J2(e) {
        return "function" == typeof e;
      }
      return o2 && (f2.onmessage = function(e) {
        var t = e.data;
        void 0 === b.WORKER_ID && t && (b.WORKER_ID = t.workerId);
        if ("string" == typeof t.input)
          f2.postMessage({ workerId: b.WORKER_ID, results: b.parse(t.input, t.config), finished: true });
        else if (f2.File && t.input instanceof File || t.input instanceof Object) {
          var r2 = b.parse(t.input, t.config);
          r2 && f2.postMessage({ workerId: b.WORKER_ID, results: r2, finished: true });
        }
      }), (l2.prototype = Object.create(h.prototype)).constructor = l2, (c.prototype = Object.create(h.prototype)).constructor = c, (p3.prototype = Object.create(p3.prototype)).constructor = p3, (g2.prototype = Object.create(h.prototype)).constructor = g2, b;
    });
  }
});

// node_modules/@refinedev/core/dist/esm/index.js
var import_react2 = __toESM(require_react());

// node_modules/@tanstack/query-core/build/lib/subscribable.mjs
var Subscribable = class {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set();
    this.subscribe = this.subscribe.bind(this);
  }
  subscribe(listener) {
    const identity = {
      listener
    };
    this.listeners.add(identity);
    this.onSubscribe();
    return () => {
      this.listeners.delete(identity);
      this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
};

// node_modules/@tanstack/query-core/build/lib/utils.mjs
var isServer = typeof window === "undefined" || "Deno" in window;
function noop() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function parseQueryArgs(arg1, arg2, arg3) {
  if (!isQueryKey(arg1)) {
    return arg1;
  }
  if (typeof arg2 === "function") {
    return {
      ...arg3,
      queryKey: arg1,
      queryFn: arg2
    };
  }
  return {
    ...arg2,
    queryKey: arg1
  };
}
function parseMutationArgs(arg1, arg2, arg3) {
  if (isQueryKey(arg1)) {
    if (typeof arg2 === "function") {
      return {
        ...arg3,
        mutationKey: arg1,
        mutationFn: arg2
      };
    }
    return {
      ...arg2,
      mutationKey: arg1
    };
  }
  if (typeof arg1 === "function") {
    return {
      ...arg2,
      mutationFn: arg1
    };
  }
  return {
    ...arg1
  };
}
function parseFilterArgs(arg1, arg2, arg3) {
  return isQueryKey(arg1) ? [{
    ...arg2,
    queryKey: arg1
  }, arg3] : [arg1 || {}, arg2];
}
function matchQuery(filters, query) {
  const {
    type = "all",
    exact,
    fetchStatus,
    predicate,
    queryKey,
    stale
  } = filters;
  if (isQueryKey(queryKey)) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  if (type !== "all") {
    const isActive = query.isActive();
    if (type === "active" && !isActive) {
      return false;
    }
    if (type === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (typeof fetchStatus !== "undefined" && fetchStatus !== query.state.fetchStatus) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  const {
    exact,
    fetching,
    predicate,
    mutationKey
  } = filters;
  if (isQueryKey(mutationKey)) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
  return hashFn(queryKey);
}
function hashQueryKey(queryKey) {
  return JSON.stringify(queryKey, (_2, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {
    result[key] = val[key];
    return result;
  }, {}) : val);
}
function partialMatchKey(a, b) {
  return partialDeepEqual(a, b);
}
function partialDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]));
  }
  return false;
}
function replaceEqualDeep(a, b) {
  if (a === b) {
    return a;
  }
  const array = isPlainArray(a) && isPlainArray(b);
  if (array || isPlainObject(a) && isPlainObject(b)) {
    const aSize = array ? a.length : Object.keys(a).length;
    const bItems = array ? b : Object.keys(b);
    const bSize = bItems.length;
    const copy = array ? [] : {};
    let equalItems = 0;
    for (let i2 = 0; i2 < bSize; i2++) {
      const key = array ? i2 : bItems[i2];
      copy[key] = replaceEqualDeep(a[key], b[key]);
      if (copy[key] === a[key]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a : copy;
  }
  return b;
}
function shallowEqualObjects(a, b) {
  if (a && !b || b && !a) {
    return false;
  }
  for (const key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}
function isPlainArray(value) {
  return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject(o2) {
  if (!hasObjectPrototype(o2)) {
    return false;
  }
  const ctor = o2.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  const prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isQueryKey(value) {
  return Array.isArray(value);
}
function sleep(timeout) {
  return new Promise((resolve) => {
    setTimeout(resolve, timeout);
  });
}
function scheduleMicrotask(callback) {
  sleep(0).then(callback);
}
function getAbortController() {
  if (typeof AbortController === "function") {
    return new AbortController();
  }
  return;
}
function replaceData(prevData, data, options) {
  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {
    return prevData;
  } else if (typeof options.structuralSharing === "function") {
    return options.structuralSharing(prevData, data);
  } else if (options.structuralSharing !== false) {
    return replaceEqualDeep(prevData, data);
  }
  return data;
}

// node_modules/@tanstack/query-core/build/lib/focusManager.mjs
var FocusManager = class extends Subscribable {
  constructor() {
    super();
    this.setup = (onFocus) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onFocus();
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return () => {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((focused) => {
      if (typeof focused === "boolean") {
        this.setFocused(focused);
      } else {
        this.onFocus();
      }
    });
  }
  setFocused(focused) {
    const changed = this.focused !== focused;
    if (changed) {
      this.focused = focused;
      this.onFocus();
    }
  }
  onFocus() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  }
};
var focusManager = new FocusManager();

// node_modules/@tanstack/query-core/build/lib/onlineManager.mjs
var onlineEvents = ["online", "offline"];
var OnlineManager = class extends Subscribable {
  constructor() {
    super();
    this.setup = (onOnline) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        onlineEvents.forEach((event) => {
          window.addEventListener(event, listener, false);
        });
        return () => {
          onlineEvents.forEach((event) => {
            window.removeEventListener(event, listener);
          });
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((online) => {
      if (typeof online === "boolean") {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    const changed = this.online !== online;
    if (changed) {
      this.online = online;
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  }
};
var onlineManager = new OnlineManager();

// node_modules/@tanstack/query-core/build/lib/retryer.mjs
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * 2 ** failureCount, 3e4);
}
function canFetch(networkMode) {
  return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
}
var CancelledError = class {
  constructor(options) {
    this.revert = options == null ? void 0 : options.revert;
    this.silent = options == null ? void 0 : options.silent;
  }
};
function isCancelledError(value) {
  return value instanceof CancelledError;
}
function createRetryer(config) {
  let isRetryCancelled = false;
  let failureCount = 0;
  let isResolved = false;
  let continueFn;
  let promiseResolve;
  let promiseReject;
  const promise = new Promise((outerResolve, outerReject) => {
    promiseResolve = outerResolve;
    promiseReject = outerReject;
  });
  const cancel = (cancelOptions) => {
    if (!isResolved) {
      reject(new CancelledError(cancelOptions));
      config.abort == null ? void 0 : config.abort();
    }
  };
  const cancelRetry = () => {
    isRetryCancelled = true;
  };
  const continueRetry = () => {
    isRetryCancelled = false;
  };
  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== "always" && !onlineManager.isOnline();
  const resolve = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onSuccess == null ? void 0 : config.onSuccess(value);
      continueFn == null ? void 0 : continueFn();
      promiseResolve(value);
    }
  };
  const reject = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onError == null ? void 0 : config.onError(value);
      continueFn == null ? void 0 : continueFn();
      promiseReject(value);
    }
  };
  const pause = () => {
    return new Promise((continueResolve) => {
      continueFn = (value) => {
        const canContinue = isResolved || !shouldPause();
        if (canContinue) {
          continueResolve(value);
        }
        return canContinue;
      };
      config.onPause == null ? void 0 : config.onPause();
    }).then(() => {
      continueFn = void 0;
      if (!isResolved) {
        config.onContinue == null ? void 0 : config.onContinue();
      }
    });
  };
  const run = () => {
    if (isResolved) {
      return;
    }
    let promiseOrValue;
    try {
      promiseOrValue = config.fn();
    } catch (error) {
      promiseOrValue = Promise.reject(error);
    }
    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
      var _config$retry, _config$retryDelay;
      if (isResolved) {
        return;
      }
      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;
      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
      const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
      const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
      if (isRetryCancelled || !shouldRetry) {
        reject(error);
        return;
      }
      failureCount++;
      config.onFail == null ? void 0 : config.onFail(failureCount, error);
      sleep(delay).then(() => {
        if (shouldPause()) {
          return pause();
        }
        return;
      }).then(() => {
        if (isRetryCancelled) {
          reject(error);
        } else {
          run();
        }
      });
    });
  };
  if (canFetch(config.networkMode)) {
    run();
  } else {
    pause().then(run);
  }
  return {
    promise,
    cancel,
    continue: () => {
      const didContinue = continueFn == null ? void 0 : continueFn();
      return didContinue ? promise : Promise.resolve();
    },
    cancelRetry,
    continueRetry
  };
}

// node_modules/@tanstack/query-core/build/lib/logger.mjs
var defaultLogger = console;

// node_modules/@tanstack/query-core/build/lib/notifyManager.mjs
function createNotifyManager() {
  let queue = [];
  let transactions = 0;
  let notifyFn = (callback) => {
    callback();
  };
  let batchNotifyFn = (callback) => {
    callback();
  };
  const batch = (callback) => {
    let result;
    transactions++;
    try {
      result = callback();
    } finally {
      transactions--;
      if (!transactions) {
        flush();
      }
    }
    return result;
  };
  const schedule = (callback) => {
    if (transactions) {
      queue.push(callback);
    } else {
      scheduleMicrotask(() => {
        notifyFn(callback);
      });
    }
  };
  const batchCalls = (callback) => {
    return (...args) => {
      schedule(() => {
        callback(...args);
      });
    };
  };
  const flush = () => {
    const originalQueue = queue;
    queue = [];
    if (originalQueue.length) {
      scheduleMicrotask(() => {
        batchNotifyFn(() => {
          originalQueue.forEach((callback) => {
            notifyFn(callback);
          });
        });
      });
    }
  };
  const setNotifyFunction = (fn) => {
    notifyFn = fn;
  };
  const setBatchNotifyFunction = (fn) => {
    batchNotifyFn = fn;
  };
  return {
    batch,
    batchCalls,
    schedule,
    setNotifyFunction,
    setBatchNotifyFunction
  };
}
var notifyManager = createNotifyManager();

// node_modules/@tanstack/query-core/build/lib/removable.mjs
var Removable = class {
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout();
    if (isValidTimeout(this.cacheTime)) {
      this.gcTimeout = setTimeout(() => {
        this.optionalRemove();
      }, this.cacheTime);
    }
  }
  updateCacheTime(newCacheTime) {
    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1e3);
  }
  clearGcTimeout() {
    if (this.gcTimeout) {
      clearTimeout(this.gcTimeout);
      this.gcTimeout = void 0;
    }
  }
};

// node_modules/@tanstack/query-core/build/lib/query.mjs
var Query = class extends Removable {
  constructor(config) {
    super();
    this.abortSignalConsumed = false;
    this.defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.cache = config.cache;
    this.logger = config.logger || defaultLogger;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.initialState = config.state || getDefaultState(this.options);
    this.state = this.initialState;
    this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  optionalRemove() {
    if (!this.observers.length && this.state.fetchStatus === "idle") {
      this.cache.remove(this);
    }
  }
  setData(newData, options) {
    const data = replaceData(this.state.data, newData, this.options);
    this.dispatch({
      data,
      type: "success",
      dataUpdatedAt: options == null ? void 0 : options.updatedAt,
      manual: options == null ? void 0 : options.manual
    });
    return data;
  }
  setState(state, setStateOptions) {
    this.dispatch({
      type: "setState",
      state,
      setStateOptions
    });
  }
  cancel(options) {
    var _this$retryer;
    const promise = this.promise;
    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
    return promise ? promise.then(noop).catch(noop) : Promise.resolve();
  }
  destroy() {
    super.destroy();
    this.cancel({
      silent: true
    });
  }
  reset() {
    this.destroy();
    this.setState(this.initialState);
  }
  isActive() {
    return this.observers.some((observer) => observer.options.enabled !== false);
  }
  isDisabled() {
    return this.getObserversCount() > 0 && !this.isActive();
  }
  isStale() {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer) => observer.getCurrentResult().isStale);
  }
  isStaleByTime(staleTime = 0) {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  }
  onFocus() {
    var _this$retryer2;
    const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
  }
  onOnline() {
    var _this$retryer3;
    const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.cache.notify({
        type: "observerAdded",
        query: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    if (this.observers.includes(observer)) {
      this.observers = this.observers.filter((x2) => x2 !== observer);
      if (!this.observers.length) {
        if (this.retryer) {
          if (this.abortSignalConsumed) {
            this.retryer.cancel({
              revert: true
            });
          } else {
            this.retryer.cancelRetry();
          }
        }
        this.scheduleGc();
      }
      this.cache.notify({
        type: "observerRemoved",
        query: this,
        observer
      });
    }
  }
  getObserversCount() {
    return this.observers.length;
  }
  invalidate() {
    if (!this.state.isInvalidated) {
      this.dispatch({
        type: "invalidate"
      });
    }
  }
  fetch(options, fetchOptions) {
    var _this$options$behavio, _context$fetchOptions;
    if (this.state.fetchStatus !== "idle") {
      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {
        this.cancel({
          silent: true
        });
      } else if (this.promise) {
        var _this$retryer4;
        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
        return this.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      const observer = this.observers.find((x2) => x2.options.queryFn);
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    if (true) {
      if (!Array.isArray(this.options.queryKey)) {
        this.logger.error("As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']");
      }
    }
    const abortController = getAbortController();
    const queryFnContext = {
      queryKey: this.queryKey,
      pageParam: void 0,
      meta: this.meta
    };
    const addSignalProperty = (object) => {
      Object.defineProperty(object, "signal", {
        enumerable: true,
        get: () => {
          if (abortController) {
            this.abortSignalConsumed = true;
            return abortController.signal;
          }
          return void 0;
        }
      });
    };
    addSignalProperty(queryFnContext);
    const fetchFn = () => {
      if (!this.options.queryFn) {
        return Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'");
      }
      this.abortSignalConsumed = false;
      return this.options.queryFn(queryFnContext);
    };
    const context = {
      fetchOptions,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn
    };
    addSignalProperty(context);
    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context);
    this.revertState = this.state;
    if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
      var _context$fetchOptions2;
      this.dispatch({
        type: "fetch",
        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
      });
    }
    const onError = (error) => {
      if (!(isCancelledError(error) && error.silent)) {
        this.dispatch({
          type: "error",
          error
        });
      }
      if (!isCancelledError(error)) {
        var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;
        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);
        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);
        if (true) {
          this.logger.error(error);
        }
      }
      if (!this.isFetchingOptimistic) {
        this.scheduleGc();
      }
      this.isFetchingOptimistic = false;
    };
    this.retryer = createRetryer({
      fn: context.fetchFn,
      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),
      onSuccess: (data) => {
        var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;
        if (typeof data === "undefined") {
          if (true) {
            this.logger.error("Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: " + this.queryHash);
          }
          onError(new Error(this.queryHash + " data is undefined"));
          return;
        }
        this.setData(data);
        (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);
        (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      },
      onError,
      onFail: (failureCount, error) => {
        this.dispatch({
          type: "failed",
          failureCount,
          error
        });
      },
      onPause: () => {
        this.dispatch({
          type: "pause"
        });
      },
      onContinue: () => {
        this.dispatch({
          type: "continue"
        });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay,
      networkMode: context.options.networkMode
    });
    this.promise = this.retryer.promise;
    return this.promise;
  }
  dispatch(action) {
    const reducer = (state) => {
      var _action$meta, _action$dataUpdatedAt;
      switch (action.type) {
        case "failed":
          return {
            ...state,
            fetchFailureCount: action.failureCount,
            fetchFailureReason: action.error
          };
        case "pause":
          return {
            ...state,
            fetchStatus: "paused"
          };
        case "continue":
          return {
            ...state,
            fetchStatus: "fetching"
          };
        case "fetch":
          return {
            ...state,
            fetchFailureCount: 0,
            fetchFailureReason: null,
            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
            fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
            ...!state.dataUpdatedAt && {
              error: null,
              status: "loading"
            }
          };
        case "success":
          return {
            ...state,
            data: action.data,
            dataUpdateCount: state.dataUpdateCount + 1,
            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
            error: null,
            isInvalidated: false,
            status: "success",
            ...!action.manual && {
              fetchStatus: "idle",
              fetchFailureCount: 0,
              fetchFailureReason: null
            }
          };
        case "error":
          const error = action.error;
          if (isCancelledError(error) && error.revert && this.revertState) {
            return {
              ...this.revertState,
              fetchStatus: "idle"
            };
          }
          return {
            ...state,
            error,
            errorUpdateCount: state.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state.fetchFailureCount + 1,
            fetchFailureReason: error,
            fetchStatus: "idle",
            status: "error"
          };
        case "invalidate":
          return {
            ...state,
            isInvalidated: true
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onQueryUpdate(action);
      });
      this.cache.notify({
        query: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState(options) {
  const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
  const hasData = typeof data !== "undefined";
  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
  return {
    data,
    dataUpdateCount: 0,
    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: false,
    status: hasData ? "success" : "loading",
    fetchStatus: "idle"
  };
}

// node_modules/@tanstack/query-core/build/lib/queryCache.mjs
var QueryCache = class extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.queries = [];
    this.queriesMap = {};
  }
  build(client, options, state) {
    var _options$queryHash;
    const queryKey = options.queryKey;
    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
    let query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        logger: client.getLogger(),
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey)
      });
      this.add(query);
    }
    return query;
  }
  add(query) {
    if (!this.queriesMap[query.queryHash]) {
      this.queriesMap[query.queryHash] = query;
      this.queries.push(query);
      this.notify({
        type: "added",
        query
      });
    }
  }
  remove(query) {
    const queryInMap = this.queriesMap[query.queryHash];
    if (queryInMap) {
      query.destroy();
      this.queries = this.queries.filter((x2) => x2 !== query);
      if (queryInMap === query) {
        delete this.queriesMap[query.queryHash];
      }
      this.notify({
        type: "removed",
        query
      });
    }
  }
  clear() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        this.remove(query);
      });
    });
  }
  get(queryHash) {
    return this.queriesMap[queryHash];
  }
  getAll() {
    return this.queries;
  }
  find(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.queries.find((query) => matchQuery(filters, query));
  }
  findAll(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    return Object.keys(filters).length > 0 ? this.queries.filter((query) => matchQuery(filters, query)) : this.queries;
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  onFocus() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onFocus();
      });
    });
  }
  onOnline() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onOnline();
      });
    });
  }
};

// node_modules/@tanstack/query-core/build/lib/mutation.mjs
var Mutation = class extends Removable {
  constructor(config) {
    super();
    this.defaultOptions = config.defaultOptions;
    this.mutationId = config.mutationId;
    this.mutationCache = config.mutationCache;
    this.logger = config.logger || defaultLogger;
    this.observers = [];
    this.state = config.state || getDefaultState2();
    this.setOptions(config.options);
    this.scheduleGc();
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  get meta() {
    return this.options.meta;
  }
  setState(state) {
    this.dispatch({
      type: "setState",
      state
    });
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.mutationCache.notify({
        type: "observerAdded",
        mutation: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    this.observers = this.observers.filter((x2) => x2 !== observer);
    this.scheduleGc();
    this.mutationCache.notify({
      type: "observerRemoved",
      mutation: this,
      observer
    });
  }
  optionalRemove() {
    if (!this.observers.length) {
      if (this.state.status === "loading") {
        this.scheduleGc();
      } else {
        this.mutationCache.remove(this);
      }
    }
  }
  continue() {
    var _this$retryer$continu, _this$retryer;
    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();
  }
  async execute() {
    const executeMutation = () => {
      var _this$options$retry;
      this.retryer = createRetryer({
        fn: () => {
          if (!this.options.mutationFn) {
            return Promise.reject("No mutationFn found");
          }
          return this.options.mutationFn(this.state.variables);
        },
        onFail: (failureCount, error) => {
          this.dispatch({
            type: "failed",
            failureCount,
            error
          });
        },
        onPause: () => {
          this.dispatch({
            type: "pause"
          });
        },
        onContinue: () => {
          this.dispatch({
            type: "continue"
          });
        },
        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
        retryDelay: this.options.retryDelay,
        networkMode: this.options.networkMode
      });
      return this.retryer.promise;
    };
    const restored = this.state.status === "loading";
    try {
      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;
      if (!restored) {
        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;
        this.dispatch({
          type: "loading",
          variables: this.options.variables
        });
        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));
        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));
        if (context !== this.state.context) {
          this.dispatch({
            type: "loading",
            context,
            variables: this.state.variables
          });
        }
      }
      const data = await executeMutation();
      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));
      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));
      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));
      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));
      this.dispatch({
        type: "success",
        data
      });
      return data;
    } catch (error) {
      try {
        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;
        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));
        if (true) {
          this.logger.error(error);
        }
        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));
        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, void 0, error, this.state.variables, this.state.context, this));
        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, this.state.variables, this.state.context));
        throw error;
      } finally {
        this.dispatch({
          type: "error",
          error
        });
      }
    }
  }
  dispatch(action) {
    const reducer = (state) => {
      switch (action.type) {
        case "failed":
          return {
            ...state,
            failureCount: action.failureCount,
            failureReason: action.error
          };
        case "pause":
          return {
            ...state,
            isPaused: true
          };
        case "continue":
          return {
            ...state,
            isPaused: false
          };
        case "loading":
          return {
            ...state,
            context: action.context,
            data: void 0,
            failureCount: 0,
            failureReason: null,
            error: null,
            isPaused: !canFetch(this.options.networkMode),
            status: "loading",
            variables: action.variables
          };
        case "success":
          return {
            ...state,
            data: action.data,
            failureCount: 0,
            failureReason: null,
            error: null,
            status: "success",
            isPaused: false
          };
        case "error":
          return {
            ...state,
            data: void 0,
            error: action.error,
            failureCount: state.failureCount + 1,
            failureReason: action.error,
            isPaused: false,
            status: "error"
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onMutationUpdate(action);
      });
      this.mutationCache.notify({
        mutation: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState2() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: false,
    status: "idle",
    variables: void 0
  };
}

// node_modules/@tanstack/query-core/build/lib/mutationCache.mjs
var MutationCache = class extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.mutations = [];
    this.mutationId = 0;
  }
  build(client, options, state) {
    const mutation = new Mutation({
      mutationCache: this,
      logger: client.getLogger(),
      mutationId: ++this.mutationId,
      options: client.defaultMutationOptions(options),
      state,
      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0
    });
    this.add(mutation);
    return mutation;
  }
  add(mutation) {
    this.mutations.push(mutation);
    this.notify({
      type: "added",
      mutation
    });
  }
  remove(mutation) {
    this.mutations = this.mutations.filter((x2) => x2 !== mutation);
    this.notify({
      type: "removed",
      mutation
    });
  }
  clear() {
    notifyManager.batch(() => {
      this.mutations.forEach((mutation) => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return this.mutations;
  }
  find(filters) {
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.mutations.find((mutation) => matchMutation(filters, mutation));
  }
  findAll(filters) {
    return this.mutations.filter((mutation) => matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    var _this$resuming;
    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {
      const pausedMutations = this.mutations.filter((x2) => x2.state.isPaused);
      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));
    }).then(() => {
      this.resuming = void 0;
    });
    return this.resuming;
  }
};

// node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs
function infiniteQueryBehavior() {
  return {
    onFetch: (context) => {
      context.fetchFn = () => {
        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
        let newPageParams = oldPageParams;
        let cancelled = false;
        const addSignalProperty = (object) => {
          Object.defineProperty(object, "signal", {
            enumerable: true,
            get: () => {
              var _context$signal;
              if ((_context$signal = context.signal) != null && _context$signal.aborted) {
                cancelled = true;
              } else {
                var _context$signal2;
                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener("abort", () => {
                  cancelled = true;
                });
              }
              return context.signal;
            }
          });
        };
        const queryFn = context.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + context.options.queryHash + "'"));
        const buildNewPages = (pages, param, page, previous) => {
          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];
          return previous ? [page, ...pages] : [...pages, page];
        };
        const fetchPage = (pages, manual, param, previous) => {
          if (cancelled) {
            return Promise.reject("Cancelled");
          }
          if (typeof param === "undefined" && !manual && pages.length) {
            return Promise.resolve(pages);
          }
          const queryFnContext = {
            queryKey: context.queryKey,
            pageParam: param,
            meta: context.options.meta
          };
          addSignalProperty(queryFnContext);
          const queryFnResult = queryFn(queryFnContext);
          const promise2 = Promise.resolve(queryFnResult).then((page) => buildNewPages(pages, param, page, previous));
          return promise2;
        };
        let promise;
        if (!oldPages.length) {
          promise = fetchPage([]);
        } else if (isFetchingNextPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param);
        } else if (isFetchingPreviousPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param, true);
        } else {
          newPageParams = [];
          const manual = typeof context.options.getNextPageParam === "undefined";
          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
          for (let i2 = 1; i2 < oldPages.length; i2++) {
            promise = promise.then((pages) => {
              const shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
              if (shouldFetchNextPage) {
                const param = manual ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                return fetchPage(pages, manual, param);
              }
              return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
            });
          }
        }
        const finalPromise = promise.then((pages) => ({
          pages,
          pageParams: newPageParams
        }));
        return finalPromise;
      };
    }
  };
}
function getNextPageParam(options, pages) {
  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
}
function getPreviousPageParam(options, pages) {
  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
}
function hasNextPage(options, pages) {
  if (options.getNextPageParam && Array.isArray(pages)) {
    const nextPageParam = getNextPageParam(options, pages);
    return typeof nextPageParam !== "undefined" && nextPageParam !== null && nextPageParam !== false;
  }
  return;
}
function hasPreviousPage(options, pages) {
  if (options.getPreviousPageParam && Array.isArray(pages)) {
    const previousPageParam = getPreviousPageParam(options, pages);
    return typeof previousPageParam !== "undefined" && previousPageParam !== null && previousPageParam !== false;
  }
  return;
}

// node_modules/@tanstack/query-core/build/lib/queryClient.mjs
var QueryClient = class {
  constructor(config = {}) {
    this.queryCache = config.queryCache || new QueryCache();
    this.mutationCache = config.mutationCache || new MutationCache();
    this.logger = config.logger || defaultLogger;
    this.defaultOptions = config.defaultOptions || {};
    this.queryDefaults = [];
    this.mutationDefaults = [];
    this.mountCount = 0;
    if (config.logger) {
      this.logger.error("Passing a custom logger has been deprecated and will be removed in the next major version.");
    }
  }
  mount() {
    this.mountCount++;
    if (this.mountCount !== 1)
      return;
    this.unsubscribeFocus = focusManager.subscribe(() => {
      if (focusManager.isFocused()) {
        this.resumePausedMutations();
        this.queryCache.onFocus();
      }
    });
    this.unsubscribeOnline = onlineManager.subscribe(() => {
      if (onlineManager.isOnline()) {
        this.resumePausedMutations();
        this.queryCache.onOnline();
      }
    });
  }
  unmount() {
    var _this$unsubscribeFocu, _this$unsubscribeOnli;
    this.mountCount--;
    if (this.mountCount !== 0)
      return;
    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
    this.unsubscribeFocus = void 0;
    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
    this.unsubscribeOnline = void 0;
  }
  isFetching(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    filters.fetchStatus = "fetching";
    return this.queryCache.findAll(filters).length;
  }
  isMutating(filters) {
    return this.mutationCache.findAll({
      ...filters,
      fetching: true
    }).length;
  }
  getQueryData(queryKey, filters) {
    var _this$queryCache$find;
    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
  }
  ensureQueryData(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const cachedData = this.getQueryData(parsedOptions.queryKey);
    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);
  }
  getQueriesData(queryKeyOrFilters) {
    return this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey,
      state
    }) => {
      const data = state.data;
      return [queryKey, data];
    });
  }
  setQueryData(queryKey, updater, options) {
    const query = this.queryCache.find(queryKey);
    const prevData = query == null ? void 0 : query.state.data;
    const data = functionalUpdate(updater, prevData);
    if (typeof data === "undefined") {
      return void 0;
    }
    const parsedOptions = parseQueryArgs(queryKey);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    return this.queryCache.build(this, defaultedOptions).setData(data, {
      ...options,
      manual: true
    });
  }
  setQueriesData(queryKeyOrFilters, updater, options) {
    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey
    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));
  }
  getQueryState(queryKey, filters) {
    var _this$queryCache$find2;
    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
  }
  removeQueries(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    const queryCache = this.queryCache;
    notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        queryCache.remove(query);
      });
    });
  }
  resetQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const queryCache = this.queryCache;
    const refetchFilters = {
      type: "active",
      ...filters
    };
    return notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        query.reset();
      });
      return this.refetchQueries(refetchFilters, options);
    });
  }
  cancelQueries(arg1, arg2, arg3) {
    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);
    if (typeof cancelOptions.revert === "undefined") {
      cancelOptions.revert = true;
    }
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map((query) => query.cancel(cancelOptions)));
    return Promise.all(promises).then(noop).catch(noop);
  }
  invalidateQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    return notifyManager.batch(() => {
      var _ref, _filters$refetchType;
      this.queryCache.findAll(filters).forEach((query) => {
        query.invalidate();
      });
      if (filters.refetchType === "none") {
        return Promise.resolve();
      }
      const refetchFilters = {
        ...filters,
        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : "active"
      };
      return this.refetchQueries(refetchFilters, options);
    });
  }
  refetchQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
      var _options$cancelRefetc;
      return query.fetch(void 0, {
        ...options,
        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
        meta: {
          refetchPage: filters.refetchPage
        }
      });
    }));
    let promise = Promise.all(promises).then(noop);
    if (!(options != null && options.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }
  fetchQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    if (typeof defaultedOptions.retry === "undefined") {
      defaultedOptions.retry = false;
    }
    const query = this.queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  }
  prefetchQuery(arg1, arg2, arg3) {
    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);
  }
  fetchInfiniteQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    parsedOptions.behavior = infiniteQueryBehavior();
    return this.fetchQuery(parsedOptions);
  }
  prefetchInfiniteQuery(arg1, arg2, arg3) {
    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);
  }
  resumePausedMutations() {
    return this.mutationCache.resumePausedMutations();
  }
  getQueryCache() {
    return this.queryCache;
  }
  getMutationCache() {
    return this.mutationCache;
  }
  getLogger() {
    return this.logger;
  }
  getDefaultOptions() {
    return this.defaultOptions;
  }
  setDefaultOptions(options) {
    this.defaultOptions = options;
  }
  setQueryDefaults(queryKey, options) {
    const result = this.queryDefaults.find((x2) => hashQueryKey(queryKey) === hashQueryKey(x2.queryKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.queryDefaults.push({
        queryKey,
        defaultOptions: options
      });
    }
  }
  getQueryDefaults(queryKey) {
    if (!queryKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.queryDefaults.find((x2) => partialMatchKey(queryKey, x2.queryKey));
    if (true) {
      const matchingDefaults = this.queryDefaults.filter((x2) => partialMatchKey(queryKey, x2.queryKey));
      if (matchingDefaults.length > 1) {
        this.logger.error("[QueryClient] Several query defaults match with key '" + JSON.stringify(queryKey) + "'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.");
      }
    }
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  setMutationDefaults(mutationKey, options) {
    const result = this.mutationDefaults.find((x2) => hashQueryKey(mutationKey) === hashQueryKey(x2.mutationKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.mutationDefaults.push({
        mutationKey,
        defaultOptions: options
      });
    }
  }
  getMutationDefaults(mutationKey) {
    if (!mutationKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.mutationDefaults.find((x2) => partialMatchKey(mutationKey, x2.mutationKey));
    if (true) {
      const matchingDefaults = this.mutationDefaults.filter((x2) => partialMatchKey(mutationKey, x2.mutationKey));
      if (matchingDefaults.length > 1) {
        this.logger.error("[QueryClient] Several mutation defaults match with key '" + JSON.stringify(mutationKey) + "'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.");
      }
    }
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  defaultQueryOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    const defaultedOptions = {
      ...this.defaultOptions.queries,
      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),
      ...options,
      _defaulted: true
    };
    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
    }
    if (typeof defaultedOptions.refetchOnReconnect === "undefined") {
      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
    }
    if (typeof defaultedOptions.useErrorBoundary === "undefined") {
      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;
    }
    return defaultedOptions;
  }
  defaultMutationOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    return {
      ...this.defaultOptions.mutations,
      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),
      ...options,
      _defaulted: true
    };
  }
  clear() {
    this.queryCache.clear();
    this.mutationCache.clear();
  }
};

// node_modules/@tanstack/query-core/build/lib/queryObserver.mjs
var QueryObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.client = client;
    this.options = options;
    this.trackedProps = /* @__PURE__ */ new Set();
    this.selectError = null;
    this.bindMethods();
    this.setOptions(options);
  }
  bindMethods() {
    this.remove = this.remove.bind(this);
    this.refetch = this.refetch.bind(this);
  }
  onSubscribe() {
    if (this.listeners.size === 1) {
      this.currentQuery.addObserver(this);
      if (shouldFetchOnMount(this.currentQuery, this.options)) {
        this.executeFetch();
      }
      this.updateTimers();
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.destroy();
    }
  }
  shouldFetchOnReconnect() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);
  }
  shouldFetchOnWindowFocus() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);
  }
  destroy() {
    this.listeners = /* @__PURE__ */ new Set();
    this.clearStaleTimeout();
    this.clearRefetchInterval();
    this.currentQuery.removeObserver(this);
  }
  setOptions(options, notifyOptions) {
    const prevOptions = this.options;
    const prevQuery = this.currentQuery;
    this.options = this.client.defaultQueryOptions(options);
    if (typeof (options == null ? void 0 : options.isDataEqual) !== "undefined") {
      this.client.getLogger().error("The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option");
    }
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getQueryCache().notify({
        type: "observerOptionsUpdated",
        query: this.currentQuery,
        observer: this
      });
    }
    if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
      throw new Error("Expected enabled to be a boolean");
    }
    if (!this.options.queryKey) {
      this.options.queryKey = prevOptions.queryKey;
    }
    this.updateQuery();
    const mounted = this.hasListeners();
    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
      this.executeFetch();
    }
    this.updateResult(notifyOptions);
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
      this.updateStaleTimeout();
    }
    const nextRefetchInterval = this.computeRefetchInterval();
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {
      this.updateRefetchInterval(nextRefetchInterval);
    }
  }
  getOptimisticResult(options) {
    const query = this.client.getQueryCache().build(this.client, options);
    const result = this.createResult(query, options);
    if (shouldAssignObserverCurrentProperties(this, result, options)) {
      this.currentResult = result;
      this.currentResultOptions = this.options;
      this.currentResultState = this.currentQuery.state;
    }
    return result;
  }
  getCurrentResult() {
    return this.currentResult;
  }
  trackResult(result) {
    const trackedResult = {};
    Object.keys(result).forEach((key) => {
      Object.defineProperty(trackedResult, key, {
        configurable: false,
        enumerable: true,
        get: () => {
          this.trackedProps.add(key);
          return result[key];
        }
      });
    });
    return trackedResult;
  }
  getCurrentQuery() {
    return this.currentQuery;
  }
  remove() {
    this.client.getQueryCache().remove(this.currentQuery);
  }
  refetch({
    refetchPage,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        refetchPage
      }
    });
  }
  fetchOptimistic(options) {
    const defaultedOptions = this.client.defaultQueryOptions(options);
    const query = this.client.getQueryCache().build(this.client, defaultedOptions);
    query.isFetchingOptimistic = true;
    return query.fetch().then(() => this.createResult(query, defaultedOptions));
  }
  fetch(fetchOptions) {
    var _fetchOptions$cancelR;
    return this.executeFetch({
      ...fetchOptions,
      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true
    }).then(() => {
      this.updateResult();
      return this.currentResult;
    });
  }
  executeFetch(fetchOptions) {
    this.updateQuery();
    let promise = this.currentQuery.fetch(this.options, fetchOptions);
    if (!(fetchOptions != null && fetchOptions.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }
  updateStaleTimeout() {
    this.clearStaleTimeout();
    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
      return;
    }
    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
    const timeout = time + 1;
    this.staleTimeoutId = setTimeout(() => {
      if (!this.currentResult.isStale) {
        this.updateResult();
      }
    }, timeout);
  }
  computeRefetchInterval() {
    var _this$options$refetch;
    return typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;
  }
  updateRefetchInterval(nextInterval) {
    this.clearRefetchInterval();
    this.currentRefetchInterval = nextInterval;
    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {
      return;
    }
    this.refetchIntervalId = setInterval(() => {
      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
        this.executeFetch();
      }
    }, this.currentRefetchInterval);
  }
  updateTimers() {
    this.updateStaleTimeout();
    this.updateRefetchInterval(this.computeRefetchInterval());
  }
  clearStaleTimeout() {
    if (this.staleTimeoutId) {
      clearTimeout(this.staleTimeoutId);
      this.staleTimeoutId = void 0;
    }
  }
  clearRefetchInterval() {
    if (this.refetchIntervalId) {
      clearInterval(this.refetchIntervalId);
      this.refetchIntervalId = void 0;
    }
  }
  createResult(query, options) {
    const prevQuery = this.currentQuery;
    const prevOptions = this.options;
    const prevResult = this.currentResult;
    const prevResultState = this.currentResultState;
    const prevResultOptions = this.currentResultOptions;
    const queryChange = query !== prevQuery;
    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
    const {
      state
    } = query;
    let {
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      fetchStatus,
      status
    } = state;
    let isPreviousData = false;
    let isPlaceholderData = false;
    let data;
    if (options._optimisticResults) {
      const mounted = this.hasListeners();
      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
      if (fetchOnMount || fetchOptionally) {
        fetchStatus = canFetch(query.options.networkMode) ? "fetching" : "paused";
        if (!dataUpdatedAt) {
          status = "loading";
        }
      }
      if (options._optimisticResults === "isRestoring") {
        fetchStatus = "idle";
      }
    }
    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== "error") {
      data = prevQueryResult.data;
      dataUpdatedAt = prevQueryResult.dataUpdatedAt;
      status = prevQueryResult.status;
      isPreviousData = true;
    } else if (options.select && typeof state.data !== "undefined") {
      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {
        data = this.selectResult;
      } else {
        try {
          this.selectFn = options.select;
          data = options.select(state.data);
          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);
          this.selectResult = data;
          this.selectError = null;
        } catch (selectError) {
          if (true) {
            this.client.getLogger().error(selectError);
          }
          this.selectError = selectError;
        }
      }
    } else {
      data = state.data;
    }
    if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && status === "loading") {
      let placeholderData;
      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
        placeholderData = prevResult.data;
      } else {
        placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
        if (options.select && typeof placeholderData !== "undefined") {
          try {
            placeholderData = options.select(placeholderData);
            this.selectError = null;
          } catch (selectError) {
            if (true) {
              this.client.getLogger().error(selectError);
            }
            this.selectError = selectError;
          }
        }
      }
      if (typeof placeholderData !== "undefined") {
        status = "success";
        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);
        isPlaceholderData = true;
      }
    }
    if (this.selectError) {
      error = this.selectError;
      data = this.selectResult;
      errorUpdatedAt = Date.now();
      status = "error";
    }
    const isFetching = fetchStatus === "fetching";
    const isLoading = status === "loading";
    const isError2 = status === "error";
    const result = {
      status,
      fetchStatus,
      isLoading,
      isSuccess: status === "success",
      isError: isError2,
      isInitialLoading: isLoading && isFetching,
      data,
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      failureCount: state.fetchFailureCount,
      failureReason: state.fetchFailureReason,
      errorUpdateCount: state.errorUpdateCount,
      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
      isFetching,
      isRefetching: isFetching && !isLoading,
      isLoadingError: isError2 && state.dataUpdatedAt === 0,
      isPaused: fetchStatus === "paused",
      isPlaceholderData,
      isPreviousData,
      isRefetchError: isError2 && state.dataUpdatedAt !== 0,
      isStale: isStale(query, options),
      refetch: this.refetch,
      remove: this.remove
    };
    return result;
  }
  updateResult(notifyOptions) {
    const prevResult = this.currentResult;
    const nextResult = this.createResult(this.currentQuery, this.options);
    this.currentResultState = this.currentQuery.state;
    this.currentResultOptions = this.options;
    if (shallowEqualObjects(nextResult, prevResult)) {
      return;
    }
    this.currentResult = nextResult;
    const defaultNotifyOptions = {
      cache: true
    };
    const shouldNotifyListeners = () => {
      if (!prevResult) {
        return true;
      }
      const {
        notifyOnChangeProps
      } = this.options;
      const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
      if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !this.trackedProps.size) {
        return true;
      }
      const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);
      if (this.options.useErrorBoundary) {
        includedProps.add("error");
      }
      return Object.keys(this.currentResult).some((key) => {
        const typedKey = key;
        const changed = this.currentResult[typedKey] !== prevResult[typedKey];
        return changed && includedProps.has(typedKey);
      });
    };
    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {
      defaultNotifyOptions.listeners = true;
    }
    this.notify({
      ...defaultNotifyOptions,
      ...notifyOptions
    });
  }
  updateQuery() {
    const query = this.client.getQueryCache().build(this.client, this.options);
    if (query === this.currentQuery) {
      return;
    }
    const prevQuery = this.currentQuery;
    this.currentQuery = query;
    this.currentQueryInitialState = query.state;
    this.previousQueryResult = this.currentResult;
    if (this.hasListeners()) {
      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
      query.addObserver(this);
    }
  }
  onQueryUpdate(action) {
    const notifyOptions = {};
    if (action.type === "success") {
      notifyOptions.onSuccess = !action.manual;
    } else if (action.type === "error" && !isCancelledError(action.error)) {
      notifyOptions.onError = true;
    }
    this.updateResult(notifyOptions);
    if (this.hasListeners()) {
      this.updateTimers();
    }
  }
  notify(notifyOptions) {
    notifyManager.batch(() => {
      if (notifyOptions.onSuccess) {
        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;
        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);
        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);
      } else if (notifyOptions.onError) {
        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;
        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);
        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, void 0, this.currentResult.error);
      }
      if (notifyOptions.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
      if (notifyOptions.cache) {
        this.client.getQueryCache().notify({
          query: this.currentQuery,
          type: "observerResultsUpdated"
        });
      }
    });
  }
};
function shouldLoadOnMount(query, options) {
  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
  if (options.enabled !== false) {
    const value = typeof field === "function" ? field(query) : field;
    return value === "always" || value !== false && isStale(query, options);
  }
  return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
}
function isStale(query, options) {
  return query.isStaleByTime(options.staleTime);
}
function shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {
  if (options.keepPreviousData) {
    return false;
  }
  if (options.placeholderData !== void 0) {
    return optimisticResult.isPlaceholderData;
  }
  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
    return true;
  }
  return false;
}

// node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs
var InfiniteQueryObserver = class extends QueryObserver {
  // Type override
  // Type override
  // Type override
  // eslint-disable-next-line @typescript-eslint/no-useless-constructor
  constructor(client, options) {
    super(client, options);
  }
  bindMethods() {
    super.bindMethods();
    this.fetchNextPage = this.fetchNextPage.bind(this);
    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);
  }
  setOptions(options, notifyOptions) {
    super.setOptions({
      ...options,
      behavior: infiniteQueryBehavior()
    }, notifyOptions);
  }
  getOptimisticResult(options) {
    options.behavior = infiniteQueryBehavior();
    return super.getOptimisticResult(options);
  }
  fetchNextPage({
    pageParam,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        fetchMore: {
          direction: "forward",
          pageParam
        }
      }
    });
  }
  fetchPreviousPage({
    pageParam,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        fetchMore: {
          direction: "backward",
          pageParam
        }
      }
    });
  }
  createResult(query, options) {
    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;
    const {
      state
    } = query;
    const result = super.createResult(query, options);
    const {
      isFetching,
      isRefetching
    } = result;
    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === "forward";
    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === "backward";
    return {
      ...result,
      fetchNextPage: this.fetchNextPage,
      fetchPreviousPage: this.fetchPreviousPage,
      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),
      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),
      isFetchingNextPage,
      isFetchingPreviousPage,
      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage
    };
  }
};

// node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs
var MutationObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.client = client;
    this.setOptions(options);
    this.bindMethods();
    this.updateResult();
  }
  bindMethods() {
    this.mutate = this.mutate.bind(this);
    this.reset = this.reset.bind(this);
  }
  setOptions(options) {
    var _this$currentMutation;
    const prevOptions = this.options;
    this.options = this.client.defaultMutationOptions(options);
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getMutationCache().notify({
        type: "observerOptionsUpdated",
        mutation: this.currentMutation,
        observer: this
      });
    }
    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$currentMutation2;
      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);
    }
  }
  onMutationUpdate(action) {
    this.updateResult();
    const notifyOptions = {
      listeners: true
    };
    if (action.type === "success") {
      notifyOptions.onSuccess = true;
    } else if (action.type === "error") {
      notifyOptions.onError = true;
    }
    this.notify(notifyOptions);
  }
  getCurrentResult() {
    return this.currentResult;
  }
  reset() {
    this.currentMutation = void 0;
    this.updateResult();
    this.notify({
      listeners: true
    });
  }
  mutate(variables, options) {
    this.mutateOptions = options;
    if (this.currentMutation) {
      this.currentMutation.removeObserver(this);
    }
    this.currentMutation = this.client.getMutationCache().build(this.client, {
      ...this.options,
      variables: typeof variables !== "undefined" ? variables : this.options.variables
    });
    this.currentMutation.addObserver(this);
    return this.currentMutation.execute();
  }
  updateResult() {
    const state = this.currentMutation ? this.currentMutation.state : getDefaultState2();
    const result = {
      ...state,
      isLoading: state.status === "loading",
      isSuccess: state.status === "success",
      isError: state.status === "error",
      isIdle: state.status === "idle",
      mutate: this.mutate,
      reset: this.reset
    };
    this.currentResult = result;
  }
  notify(options) {
    notifyManager.batch(() => {
      if (this.mutateOptions && this.hasListeners()) {
        if (options.onSuccess) {
          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;
          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);
          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);
        } else if (options.onError) {
          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;
          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);
          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, void 0, this.currentResult.error, this.currentResult.variables, this.currentResult.context);
        }
      }
      if (options.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
    });
  }
};

// node_modules/@tanstack/react-query/build/lib/reactBatchedUpdates.mjs
var ReactDOM = __toESM(require_react_dom(), 1);
var unstable_batchedUpdates2 = ReactDOM.unstable_batchedUpdates;

// node_modules/@tanstack/react-query/build/lib/setBatchUpdatesFn.mjs
notifyManager.setBatchNotifyFunction(unstable_batchedUpdates2);

// node_modules/@tanstack/react-query/build/lib/useQueries.mjs
var React5 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs
var import_shim = __toESM(require_shim(), 1);
var useSyncExternalStore = import_shim.useSyncExternalStore;

// node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs
var React = __toESM(require_react(), 1);
var defaultContext = React.createContext(void 0);
var QueryClientSharingContext = React.createContext(false);
function getQueryClientContext(context, contextSharing) {
  if (context) {
    return context;
  }
  if (contextSharing && typeof window !== "undefined") {
    if (!window.ReactQueryClientContext) {
      window.ReactQueryClientContext = defaultContext;
    }
    return window.ReactQueryClientContext;
  }
  return defaultContext;
}
var useQueryClient = ({
  context
} = {}) => {
  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));
  if (!queryClient) {
    throw new Error("No QueryClient set, use QueryClientProvider to set one");
  }
  return queryClient;
};
var QueryClientProvider = ({
  client,
  children,
  context,
  contextSharing = false
}) => {
  React.useEffect(() => {
    client.mount();
    return () => {
      client.unmount();
    };
  }, [client]);
  if (contextSharing) {
    client.getLogger().error("The contextSharing option has been deprecated and will be removed in the next major version");
  }
  const Context = getQueryClientContext(context, contextSharing);
  return React.createElement(QueryClientSharingContext.Provider, {
    value: !context && contextSharing
  }, React.createElement(Context.Provider, {
    value: client
  }, children));
};

// node_modules/@tanstack/react-query/build/lib/isRestoring.mjs
var React2 = __toESM(require_react(), 1);
var IsRestoringContext = React2.createContext(false);
var useIsRestoring = () => React2.useContext(IsRestoringContext);
var IsRestoringProvider = IsRestoringContext.Provider;

// node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs
var React3 = __toESM(require_react(), 1);
function createValue() {
  let isReset = false;
  return {
    clearReset: () => {
      isReset = false;
    },
    reset: () => {
      isReset = true;
    },
    isReset: () => {
      return isReset;
    }
  };
}
var QueryErrorResetBoundaryContext = React3.createContext(createValue());
var useQueryErrorResetBoundary = () => React3.useContext(QueryErrorResetBoundaryContext);

// node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs
var React4 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/utils.mjs
function shouldThrowError(_useErrorBoundary, params) {
  if (typeof _useErrorBoundary === "function") {
    return _useErrorBoundary(...params);
  }
  return !!_useErrorBoundary;
}

// node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs
var ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {
  if (options.suspense || options.useErrorBoundary) {
    if (!errorResetBoundary.isReset()) {
      options.retryOnMount = false;
    }
  }
};
var useClearResetErrorBoundary = (errorResetBoundary) => {
  React4.useEffect(() => {
    errorResetBoundary.clearReset();
  }, [errorResetBoundary]);
};
var getHasError = ({
  result,
  errorResetBoundary,
  useErrorBoundary,
  query
}) => {
  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);
};

// node_modules/@tanstack/react-query/build/lib/suspense.mjs
var ensureStaleTime = (defaultedOptions) => {
  if (defaultedOptions.suspense) {
    if (typeof defaultedOptions.staleTime !== "number") {
      defaultedOptions.staleTime = 1e3;
    }
  }
};
var willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;
var shouldSuspend = (defaultedOptions, result, isRestoring) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);
var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).then(({
  data
}) => {
  defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
}).catch((error) => {
  errorResetBoundary.clearReset();
  defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);
  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(void 0, error);
});

// node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs
var React6 = __toESM(require_react(), 1);
function useBaseQuery(options, Observer) {
  const queryClient = useQueryClient({
    context: options.context
  });
  const isRestoring = useIsRestoring();
  const errorResetBoundary = useQueryErrorResetBoundary();
  const defaultedOptions = queryClient.defaultQueryOptions(options);
  defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
  if (defaultedOptions.onError) {
    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
  }
  if (defaultedOptions.onSuccess) {
    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
  }
  if (defaultedOptions.onSettled) {
    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
  }
  ensureStaleTime(defaultedOptions);
  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
  useClearResetErrorBoundary(errorResetBoundary);
  const [observer] = React6.useState(() => new Observer(queryClient, defaultedOptions));
  const result = observer.getOptimisticResult(defaultedOptions);
  useSyncExternalStore(React6.useCallback((onStoreChange) => {
    const unsubscribe = isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange));
    observer.updateResult();
    return unsubscribe;
  }, [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  React6.useEffect(() => {
    observer.setOptions(defaultedOptions, {
      listeners: false
    });
  }, [defaultedOptions, observer]);
  if (shouldSuspend(defaultedOptions, result, isRestoring)) {
    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
  }
  if (getHasError({
    result,
    errorResetBoundary,
    useErrorBoundary: defaultedOptions.useErrorBoundary,
    query: observer.getCurrentQuery()
  })) {
    throw result.error;
  }
  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
}

// node_modules/@tanstack/react-query/build/lib/useQuery.mjs
function useQuery(arg1, arg2, arg3) {
  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(parsedOptions, QueryObserver);
}

// node_modules/@tanstack/react-query/build/lib/Hydrate.mjs
var React7 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useIsFetching.mjs
var React8 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useIsMutating.mjs
var React9 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useMutation.mjs
var React10 = __toESM(require_react(), 1);
function useMutation(arg1, arg2, arg3) {
  const options = parseMutationArgs(arg1, arg2, arg3);
  const queryClient = useQueryClient({
    context: options.context
  });
  const [observer] = React10.useState(() => new MutationObserver(queryClient, options));
  React10.useEffect(() => {
    observer.setOptions(options);
  }, [observer, options]);
  const result = useSyncExternalStore(React10.useCallback((onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  const mutate = React10.useCallback((variables, mutateOptions) => {
    observer.mutate(variables, mutateOptions).catch(noop2);
  }, [observer]);
  if (result.error && shouldThrowError(observer.options.useErrorBoundary, [result.error])) {
    throw result.error;
  }
  return {
    ...result,
    mutate,
    mutateAsync: result.mutate
  };
}
function noop2() {
}

// node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs
function useInfiniteQuery(arg1, arg2, arg3) {
  const options = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(options, InfiniteQueryObserver);
}

// node_modules/@refinedev/devtools-internal/dist/esm/index.js
var import_error_stack_parser = __toESM(require_error_stack_parser());
var import_react = __toESM(require_react());
var v = "renderWithHooks";
var m = (r) => {
  let e = r.findIndex((s) => s.functionName === v);
  return e !== -1 ? r.slice(0, e) : r;
};
var i = false ? /node_modules\/refinedev\/(?<name>.*?)\// : /\/refine\/packages\/(?<name>.*?)\//;
var y = (r) => r ? !!r.match(i) : false;
var d2 = (r) => {
  var n;
  if (!r)
    return;
  let e = r.match(i), s = (n = e == null ? void 0 : e.groups) == null ? void 0 : n.name;
  if (s)
    return `@refinedev/${s}`;
};
function p2() {
  if (false)
    return [];
  try {
    let r = new Error(), e = import_error_stack_parser.default.parse(r);
    return m(e).map((t) => ({ file: t.fileName, line: t.lineNumber, column: t.columnNumber, function: t.functionName, isRefine: y(t.fileName), packageName: d2(t.fileName) })).filter((t) => t.function).slice(1);
  } catch {
    return [];
  }
}
var E = (r, e) => {
  if (p[r] === "auth")
    return null;
  if (r === "useCan")
    return e ? "key[1].resource" : "key[1]";
  if (p[r] === "audit-log")
    return r === "useLog" ? "variables.resource" : "key[1]";
  if (p[r] === "data") {
    if (r === "useCustom" || r === "useCustomMutation")
      return null;
    switch (r) {
      case "useList":
      case "useInfiniteList":
      case "useOne":
      case "useMany":
        return e ? "key[1]" : "key[2]";
      case "useCreate":
      case "useCreateMany":
      case "useDelete":
      case "useDeleteMany":
      case "useUpdate":
      case "useUpdateMany":
        return "variables.resource";
    }
  }
  return null;
};
function P(r, e) {
  if (false)
    return { hookName: "", trace: [], resourcePath: null, legacyKey: false };
  {
    let s = p2().slice(1), n = E(r, e);
    return { hookName: r, trace: s, resourcePath: n, legacyKey: e };
  }
}
var l = (r, e) => {
  let s = e == null ? void 0 : e.map((t) => `${t.file}:${t.line}:${t.column}#${t.function}-${t.packageName}-${t.isRefine ? 1 : 0}`);
  return JSON.stringify([...r ?? [], ...s ?? []]);
};
var R = (r) => (e) => {
  var n;
  if (!((n = e == null ? void 0 : e.meta) != null && n.trace))
    return;
  let s = e == null ? void 0 : e.meta;
  new Promise((t) => {
    var a, o2;
    d(r, T.ACTIVITY, { type: "mutation", identifier: l(e == null ? void 0 : e.options.mutationKey, (a = e == null ? void 0 : e.meta) == null ? void 0 : a.trace), key: e == null ? void 0 : e.options.mutationKey, status: e == null ? void 0 : e.state.status, state: e == null ? void 0 : e.state, variables: (o2 = e == null ? void 0 : e.state) == null ? void 0 : o2.variables, ...s }), t();
  });
};
var g = (r) => (e) => {
  var n;
  if (!((n = e == null ? void 0 : e.meta) != null && n.trace))
    return;
  let s = e == null ? void 0 : e.meta;
  new Promise((t) => {
    var a;
    d(r, T.ACTIVITY, { type: "query", identifier: l(e.queryKey, (a = e.meta) == null ? void 0 : a.trace), key: e.queryKey, status: e.state.status, state: e.state, ...s }), t();
  });
};
var C = false ? () => ({}) : (r) => {
  let { ws: e } = (0, import_react.useContext)(O), s = import_react.default.useRef(), n = import_react.default.useRef();
  return import_react.default.useEffect(() => {
    if (!e)
      return () => 0;
    let t = r.getQueryCache(), a = g(e);
    return t.getAll().forEach(a), s.current = t.subscribe(({ query: o2, type: c }) => (c === "added" || c === "updated") && a(o2)), () => {
      var o2;
      (o2 = s.current) == null || o2.call(s);
    };
  }, [e, r]), import_react.default.useEffect(() => {
    if (!e)
      return () => 0;
    let t = r.getMutationCache(), a = R(e);
    return t.getAll().forEach(a), n.current = t.subscribe(({ mutation: o2, type: c }) => (c === "added" || c === "updated") && a(o2)), () => {
      var o2;
      (o2 = n.current) == null || o2.call(n);
    };
  }, [e, r]), {};
};

// node_modules/@refinedev/core/dist/esm/index.js
var import_qs = __toESM(require_lib());
var import_warn_once = __toESM(require_warn_once());
var import_pluralize = __toESM(require_pluralize());
var import_react3 = __toESM(require_react());
var import_pluralize2 = __toESM(require_pluralize());
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var import_react8 = __toESM(require_react());
var import_react9 = __toESM(require_react());
var import_react10 = __toESM(require_react());
var import_react11 = __toESM(require_react());
var import_react12 = __toESM(require_react());
var import_react13 = __toESM(require_react());
var import_qs2 = __toESM(require_lib());
var import_react14 = __toESM(require_react());
var import_qs3 = __toESM(require_lib());
var import_react15 = __toESM(require_react());
var import_react16 = __toESM(require_react());
var import_react17 = __toESM(require_react());
var import_react18 = __toESM(require_react());
var import_react19 = __toESM(require_react());
var import_react20 = __toESM(require_react());
var import_react21 = __toESM(require_react());
var import_react22 = __toESM(require_react());
var import_react23 = __toESM(require_react());
var import_react24 = __toESM(require_react());
var import_react25 = __toESM(require_react());
var import_react26 = __toESM(require_react());
var import_react27 = __toESM(require_react());
var import_react28 = __toESM(require_react());
var import_react29 = __toESM(require_react());
var import_react30 = __toESM(require_react());
var import_react31 = __toESM(require_react());
var import_react32 = __toESM(require_react());
var import_react33 = __toESM(require_react());
var import_react34 = __toESM(require_react());
var import_react35 = __toESM(require_react());
var import_react36 = __toESM(require_react());
var import_react37 = __toESM(require_react());
var import_react38 = __toESM(require_react());
var import_react39 = __toESM(require_react());
var import_react40 = __toESM(require_react());
var import_react41 = __toESM(require_react());
var import_react42 = __toESM(require_react());
var import_export_to_csv_fix_source_map = __toESM(require_build());
var import_react43 = __toESM(require_react());
var import_warn_once2 = __toESM(require_warn_once());
var import_react44 = __toESM(require_react());
var import_react45 = __toESM(require_react());
var import_react46 = __toESM(require_react());
var import_react47 = __toESM(require_react());
var import_react48 = __toESM(require_react());
var import_warn_once3 = __toESM(require_warn_once());
var import_react49 = __toESM(require_react());
var import_papaparse = __toESM(require_papaparse_min());
var import_react50 = __toESM(require_react());
var import_react51 = __toESM(require_react());
var import_react52 = __toESM(require_react());
var import_react53 = __toESM(require_react());
var import_react54 = __toESM(require_react());
var import_react55 = __toESM(require_react());
var import_react56 = __toESM(require_react());
var import_react57 = __toESM(require_react());
var import_react58 = __toESM(require_react());
var import_qs4 = __toESM(require_lib());
var import_warn_once4 = __toESM(require_warn_once());
var import_react59 = __toESM(require_react());
var import_react60 = __toESM(require_react());
var import_react61 = __toESM(require_react());
var import_react62 = __toESM(require_react());
var import_warn_once5 = __toESM(require_warn_once());
var import_react63 = __toESM(require_react());
var import_react64 = __toESM(require_react());
var import_react65 = __toESM(require_react());
var import_react66 = __toESM(require_react());
var import_react67 = __toESM(require_react());
var import_react68 = __toESM(require_react());
var import_react69 = __toESM(require_react());
var import_react70 = __toESM(require_react());
var import_react71 = __toESM(require_react());
var import_react72 = __toESM(require_react());
var import_react73 = __toESM(require_react());
var import_react74 = __toESM(require_react());
var import_react75 = __toESM(require_react());
var import_react76 = __toESM(require_react());
var import_react77 = __toESM(require_react());
var import_react78 = __toESM(require_react());
var import_react79 = __toESM(require_react());
var import_react80 = __toESM(require_react());
var import_react81 = __toESM(require_react());
var import_react82 = __toESM(require_react());
var Rn = Object.defineProperty;
var o = (e, t) => Rn(e, "name", { value: t, configurable: true });
var Vt = o((e) => e / 1e3, "userFriendlySecond");
var er = o((e, t = (r) => r) => {
  let [r, ...s] = e;
  return s.map((n) => fromPairs_default(zip_default(r, n))).map((n, i2, a) => t.call(void 0, n, i2, a));
}, "importCSVMapper");
var tr = o((e = "", t) => {
  let r = Bt(e);
  return t === "singular" ? import_pluralize.default.singular(r) : import_pluralize.default.plural(r);
}, "userFriendlyResourceName");
var bo = o((e = {}) => e != null && e.id ? { ...e, id: decodeURIComponent(e.id) } : e, "handleUseParams");
var S = o((...e) => e.find((t) => typeof t < "u"), "pickNotDeprecated");
function Ye(e, t) {
  return e.findIndex((r, s) => s <= e.length - t.length && t.every((n, i2) => e[s + i2] === n));
}
o(Ye, "arrayFindIndex");
function hn(e) {
  if (e[0] === "data") {
    let t = e.slice(1);
    if (t[2] === "many")
      t[2] = "getMany";
    else if (t[2] === "infinite")
      t[2] = "list";
    else if (t[2] === "one")
      t[2] = "detail";
    else if (t[1] === "custom") {
      let r = { ...t[2] };
      return delete r.method, delete r.url, [t[0], t[1], t[2].method, t[2].url, r];
    }
    return t;
  }
  if (e[0] === "audit" && e[2] === "list")
    return ["logList", e[1], e[3]];
  if (e[0] === "access" && e.length === 4)
    return ["useCan", { resource: e[1], action: e[2], ...e[3] }];
  if (e[0] === "auth") {
    if (Ye(e, ["auth", "login"]) !== -1)
      return ["useLogin"];
    if (Ye(e, ["auth", "logout"]) !== -1)
      return ["useLogout"];
    if (Ye(e, ["auth", "identity"]) !== -1)
      return ["getUserIdentity"];
    if (Ye(e, ["auth", "register"]) !== -1)
      return ["useRegister"];
    if (Ye(e, ["auth", "forgotPassword"]) !== -1)
      return ["useForgotPassword"];
    if (Ye(e, ["auth", "check"]) !== -1)
      return ["useAuthenticated", e[2]];
    if (Ye(e, ["auth", "onError"]) !== -1)
      return ["useCheckError"];
    if (Ye(e, ["auth", "permissions"]) !== -1)
      return ["usePermissions"];
    if (Ye(e, ["auth", "updatePassword"]) !== -1)
      return ["useUpdatePassword"];
  }
  return e;
}
o(hn, "convertToLegacy");
var Le = class {
  constructor(t = []) {
    this.segments = [];
    this.segments = t;
  }
  key() {
    return this.segments;
  }
  legacy() {
    return hn(this.segments);
  }
  get(t) {
    return t ? this.legacy() : this.segments;
  }
};
o(Le, "BaseKeyBuilder");
var $e = class extends Le {
  constructor(t) {
    super(t);
  }
  params(t) {
    return new Le([...this.segments, t]);
  }
};
o($e, "ParamsKeyBuilder");
var rr = class extends Le {
  constructor(t) {
    super(t);
  }
  id(t) {
    return new $e([...this.segments, t ? String(t) : void 0]);
  }
};
o(rr, "DataIdRequiringKeyBuilder");
var or = class extends Le {
  constructor(t) {
    super(t);
  }
  ids(...t) {
    return new $e([...this.segments, ...t.length ? [t.map((r) => String(r))] : []]);
  }
};
o(or, "DataIdsRequiringKeyBuilder");
var sr = class extends Le {
  constructor(t) {
    super(t);
  }
  action(t) {
    if (t === "one")
      return new rr([...this.segments, t]);
    if (t === "many")
      return new or([...this.segments, t]);
    if (["list", "infinite"].includes(t))
      return new $e([...this.segments, t]);
    throw new Error("Invalid action type");
  }
};
o(sr, "DataResourceKeyBuilder");
var nr = class extends Le {
  constructor(t) {
    super(t);
  }
  resource(t) {
    return new sr([...this.segments, t]);
  }
  mutation(t) {
    return new $e([...t === "custom" ? this.segments : [this.segments[0]], t]);
  }
};
o(nr, "DataKeyBuilder");
var ar = class extends Le {
  constructor(t) {
    super(t);
  }
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(ar, "AuthKeyBuilder");
var ir = class extends Le {
  constructor(t) {
    super(t);
  }
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(ir, "AccessResourceKeyBuilder");
var ur = class extends Le {
  constructor(t) {
    super(t);
  }
  resource(t) {
    return new ir([...this.segments, t]);
  }
};
o(ur, "AccessKeyBuilder");
var cr = class extends Le {
  constructor(t) {
    super(t);
  }
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(cr, "AuditActionKeyBuilder");
var dr = class extends Le {
  constructor(t) {
    super(t);
  }
  resource(t) {
    return new cr([...this.segments, t]);
  }
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(dr, "AuditKeyBuilder");
var Ct = class extends Le {
  constructor(t) {
    super(t);
  }
  data(t) {
    return new nr(["data", t || "default"]);
  }
  auth() {
    return new ar(["auth"]);
  }
  access() {
    return new ur(["access"]);
  }
  audit() {
    return new dr(["audit"]);
  }
};
o(Ct, "KeyBuilder");
var We = o(() => new Ct([]), "keys");
var vo = o((e, t, r, s) => {
  let n = t || "default", i2 = { all: [n], resourceAll: [n, e || ""], list: (a) => [...i2.resourceAll, "list", { ...a, ...S(r, s) || {} }], many: (a) => [...i2.resourceAll, "getMany", a && a.map(String), { ...S(r, s) || {} }].filter((u) => u !== void 0), detail: (a) => [...i2.resourceAll, "detail", a == null ? void 0 : a.toString(), { ...S(r, s) || {} }], logList: (a) => ["logList", e, a, s].filter((u) => u !== void 0) };
  return i2;
}, "queryKeys");
var Je = o((e) => (t, r, s, n) => {
  let i2 = r || "default";
  return { all: We().data(i2).get(e), resourceAll: We().data(r).resource(t ?? "").get(e), list: (u) => We().data(r).resource(t ?? "").action("list").params({ ...u, ...S(s, n) || {} }).get(e), many: (u) => We().data(r).resource(t ?? "").action("many").ids(...u ?? []).params({ ...S(s, n) || {} }).get(e), detail: (u) => We().data(r).resource(t ?? "").action("one").id(u ?? "").params({ ...S(s, n) || {} }).get(e), logList: (u) => [...We().audit().resource(t).action("list").params(u).get(e), n].filter((d3) => d3 !== void 0) };
}, "queryKeysReplacement");
var Br = o((e, t) => !e || !t ? false : !!e.find((r) => r === t), "hasPermission");
var bt = o((e) => e.startsWith(":"), "isParameter");
var je = o((e) => e.split("/").filter((r) => r !== ""), "splitToSegments");
var Do = o((e, t) => {
  let r = je(e), s = je(t);
  return r.length === s.length;
}, "isSegmentCountsSame");
var xe = o((e) => e.replace(/^\/|\/$/g, ""), "removeLeadingTrailingSlashes");
var Lo = o((e, t) => {
  let r = xe(e), s = xe(t);
  if (!Do(r, s))
    return false;
  let n = je(r);
  return je(s).every((a, u) => bt(a) || a === n[u]);
}, "checkBySegments");
var Eo = o((e, t, r) => {
  let s = xe(r || ""), n = `${s}${s ? "/" : ""}${e}`;
  return t === "list" ? n = `${n}` : t === "create" ? n = `${n}/create` : t === "edit" ? n = `${n}/edit/:id` : t === "show" ? n = `${n}/show/:id` : t === "clone" && (n = `${n}/clone/:id`), `/${n.replace(/^\//, "")}`;
}, "getDefaultActionPath");
var Ae = o((e, t) => {
  var n, i2;
  let r = S((n = e.meta) == null ? void 0 : n.parent, (i2 = e.options) == null ? void 0 : i2.parent, e.parentName);
  return r ? t.find((a) => (a.identifier ?? a.name) === r) ?? { name: r } : void 0;
}, "getParentResource");
var Nt = o((e, t, r) => {
  let s = [], n = Ae(e, t);
  for (; n; )
    s.push(n), n = Ae(n, t);
  if (s.length !== 0)
    return `/${s.reverse().map((i2) => {
      var u;
      let a = r ? ((u = i2.options) == null ? void 0 : u.route) ?? i2.name : i2.name;
      return xe(a);
    }).join("/")}`;
}, "getParentPrefixForResource");
var Pe = o((e, t, r) => {
  let s = [], n = ["list", "show", "edit", "create", "clone"], i2 = Nt(e, t, r);
  return n.forEach((a) => {
    var c, p3;
    let u = r && a === "clone" ? e.create : e[a], d3;
    typeof u == "function" || r ? d3 = Eo(r ? ((c = e.meta) == null ? void 0 : c.route) ?? ((p3 = e.options) == null ? void 0 : p3.route) ?? e.name : e.name, a, r ? i2 : void 0) : typeof u == "string" ? d3 = u : typeof u == "object" && (d3 = u.path), d3 && s.push({ action: a, resource: e, route: `/${d3.replace(/^\//, "")}` });
  }), s;
}, "getActionRoutesFromResource");
var Uo = o((e) => {
  var n;
  if (e.length === 0)
    return;
  if (e.length === 1)
    return e[0];
  let t = e.map((i2) => ({ ...i2, splitted: je(xe(i2.route)) })), r = ((n = t[0]) == null ? void 0 : n.splitted.length) ?? 0, s = [...t];
  for (let i2 = 0; i2 < r; i2++) {
    let a = s.filter((u) => !bt(u.splitted[i2]));
    if (a.length !== 0) {
      if (a.length === 1) {
        s = a;
        break;
      }
      s = a;
    }
  }
  return s[0];
}, "pickMatchedRoute");
var Mo = o((e, t) => {
  let s = t.flatMap((i2) => Pe(i2, t)).filter((i2) => Lo(e, i2.route)), n = Uo(s);
  return { found: !!n, resource: n == null ? void 0 : n.resource, action: n == null ? void 0 : n.action, matchedRoute: n == null ? void 0 : n.route };
}, "matchResourceFromRoute");
var pr = o((e, t) => {
  var n;
  let r, s = Nt(e, t, true);
  if (s) {
    let i2 = S(e.meta, e.options);
    r = `${s}/${(i2 == null ? void 0 : i2.route) ?? e.name}`;
  } else
    r = ((n = e.options) == null ? void 0 : n.route) ?? e.name;
  return `/${r.replace(/^\//, "")}`;
}, "routeGenerator");
var Io = o((e) => {
  var a;
  let t = [], r = {}, s = {}, n, i2;
  for (let u = 0; u < e.length; u++) {
    n = e[u];
    let d3 = n.route ?? ((a = S(n == null ? void 0 : n.meta, n.options)) == null ? void 0 : a.route) ?? "";
    r[d3] = n, r[d3].children = [], s[n.name] = n, s[n.name].children = [];
  }
  for (let u in r)
    r.hasOwnProperty(u) && (i2 = r[u], i2.parentName && s[i2.parentName] ? s[i2.parentName].children.push(i2) : t.push(i2));
  return t;
}, "createTreeView");
var Bt = o((e) => (e = e.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3"), e = e.toLowerCase().replace(/[_-]+/g, " ").replace(/\s{2,}/g, " ").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), "humanizeString");
var Nr = o(({ children: e }) => import_react4.default.createElement("div", null, e), "DefaultLayout");
var Ee = { mutationMode: "pessimistic", syncWithLocation: false, undoableTimeout: 5e3, warnWhenUnsavedChanges: false, liveMode: "off", redirect: { afterCreate: "list", afterClone: "list", afterEdit: "list" }, overtime: { interval: 1e3 }, textTransformers: { humanize: Bt, plural: import_pluralize2.default.plural, singular: import_pluralize2.default.singular }, disableServerSideValidation: false };
var Ue = import_react3.default.createContext({ hasDashboard: false, mutationMode: "pessimistic", warnWhenUnsavedChanges: false, syncWithLocation: false, undoableTimeout: 5e3, Title: void 0, Sider: void 0, Header: void 0, Footer: void 0, Layout: Nr, OffLayoutArea: void 0, liveMode: "off", onLiveEvent: void 0, options: Ee });
var Ao = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, undoableTimeout: n, children: i2, DashboardPage: a, Title: u, Layout: d3 = Nr, Header: c, Sider: p3, Footer: m2, OffLayoutArea: R2, LoginPage: g2 = Kr, catchAll: T2, liveMode: E2 = "off", onLiveEvent: D, options: f2 }) => import_react3.default.createElement(Ue.Provider, { value: { hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, Title: u, undoableTimeout: n, Layout: d3, Header: c, Sider: p3, Footer: m2, OffLayoutArea: R2, DashboardPage: a, LoginPage: g2, catchAll: T2, liveMode: E2, onLiveEvent: D, options: f2 } }, i2), "RefineContextProvider");
var Hr = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: s, reactQueryClientConfig: n, reactQueryDevtoolConfig: i2, syncWithLocation: a, undoableTimeout: u, warnWhenUnsavedChanges: d3 } = {}) => {
  var R2, g2, T2, E2, D, f2, h, L;
  let c = { breadcrumb: e == null ? void 0 : e.breadcrumb, mutationMode: (e == null ? void 0 : e.mutationMode) ?? s ?? Ee.mutationMode, undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? u ?? Ee.undoableTimeout, syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? a ?? Ee.syncWithLocation, warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? d3 ?? Ee.warnWhenUnsavedChanges, liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? Ee.liveMode, redirect: { afterCreate: ((R2 = e == null ? void 0 : e.redirect) == null ? void 0 : R2.afterCreate) ?? Ee.redirect.afterCreate, afterClone: ((g2 = e == null ? void 0 : e.redirect) == null ? void 0 : g2.afterClone) ?? Ee.redirect.afterClone, afterEdit: ((T2 = e == null ? void 0 : e.redirect) == null ? void 0 : T2.afterEdit) ?? Ee.redirect.afterEdit }, overtime: (e == null ? void 0 : e.overtime) ?? Ee.overtime, textTransformers: { humanize: ((E2 = e == null ? void 0 : e.textTransformers) == null ? void 0 : E2.humanize) ?? Ee.textTransformers.humanize, plural: ((D = e == null ? void 0 : e.textTransformers) == null ? void 0 : D.plural) ?? Ee.textTransformers.plural, singular: ((f2 = e == null ? void 0 : e.textTransformers) == null ? void 0 : f2.singular) ?? Ee.textTransformers.singular }, disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? Ee.disableServerSideValidation, projectId: e == null ? void 0 : e.projectId, useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys }, p3 = (e == null ? void 0 : e.disableTelemetry) ?? t ?? false, m2 = { clientConfig: ((h = e == null ? void 0 : e.reactQuery) == null ? void 0 : h.clientConfig) ?? n ?? {}, devtoolConfig: ((L = e == null ? void 0 : e.reactQuery) == null ? void 0 : L.devtoolConfig) ?? i2 ?? {} };
  return { optionsWithDefaults: c, disableTelemetryWithDefault: p3, reactQueryWithDefaults: m2 };
}, "handleRefineOptions");
var Gr = o(({ redirectFromProps: e, action: t, redirectOptions: r }) => {
  if (e || e === false)
    return e;
  switch (t) {
    case "clone":
      return r.afterClone;
    case "create":
      return r.afterCreate;
    case "edit":
      return r.afterEdit;
    default:
      return false;
  }
}, "redirectPage");
var lr = o(async (e, t, r) => {
  let s = [];
  for (let [n, i2] of e.entries())
    try {
      let a = await i2();
      s.push(t(a, n));
    } catch (a) {
      s.push(r(a, n));
    }
  return s;
}, "sequentialPromises");
var de = o((e, t = [], r = false) => {
  if (!e)
    return;
  if (r) {
    let n = t.find((a) => xe(a.route ?? "") === xe(e));
    return n || t.find((a) => a.name === e);
  }
  let s = t.find((n) => n.identifier === e);
  return s || (s = t.find((n) => n.name === e)), s;
}, "pickResource");
var z = o((e, t, r) => {
  if (t)
    return t;
  let s = de(e, r), n = S(s == null ? void 0 : s.meta, s == null ? void 0 : s.options);
  return n != null && n.dataProviderName ? n.dataProviderName : "default";
}, "pickDataProvider");
var Ze = o(async (e) => ({ data: (await Promise.all(e)).map((t) => t.data) }), "handleMultiple");
var mr = o((e) => {
  let { pagination: t, cursor: r } = e;
  if (r != null && r.next)
    return r.next;
  let s = (t == null ? void 0 : t.current) || 1, n = (t == null ? void 0 : t.pageSize) || 10, i2 = Math.ceil((e.total || 0) / n);
  return s < i2 ? Number(s) + 1 : void 0;
}, "getNextPageParam");
var fr = o((e) => {
  let { pagination: t, cursor: r } = e;
  if (r != null && r.prev)
    return r.prev;
  let s = (t == null ? void 0 : t.current) || 1;
  return s === 1 ? void 0 : s - 1;
}, "getPreviousPageParam");
var yr = o((e) => {
  let t = [];
  return e.forEach((r) => {
    var s, n;
    t.push({ ...r, label: ((s = r.meta) == null ? void 0 : s.label) ?? ((n = r.options) == null ? void 0 : n.label), route: pr(r, e), canCreate: !!r.create, canEdit: !!r.edit, canShow: !!r.show, canDelete: r.canDelete });
  }), t;
}, "legacyResourceTransform");
var ko = o((e) => je(xe(e)).flatMap((r) => bt(r) ? [r.slice(1)] : []), "pickRouteParams");
var Fo = o((e, t = {}) => e.reduce((r, s) => {
  let n = t[s];
  return typeof n < "u" && (r[s] = n), r;
}, {}), "prepareRouteParams");
var Me = o((e, t = {}, r = {}, s = {}) => {
  let n = ko(e), i2 = Fo(n, { ...t, ...typeof (r == null ? void 0 : r.id) < "u" ? { id: r.id } : {}, ...typeof (r == null ? void 0 : r.action) < "u" ? { action: r.action } : {}, ...typeof (r == null ? void 0 : r.resource) < "u" ? { resource: r.resource } : {}, ...r == null ? void 0 : r.params, ...s });
  return e.replace(/:([^\/]+)/g, (a, u) => {
    let d3 = i2[u];
    return typeof d3 < "u" ? `${d3}` : a;
  });
}, "composeRoute");
var Qo = import_react5.default.createContext({});
var Vo = o(({ children: e, isProvided: t, ...r }) => {
  let { replace: s } = le(), n = o(async (d3) => {
    var c;
    try {
      return await ((c = r.login) == null ? void 0 : c.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "loginFunc"), i2 = o(async (d3) => {
    var c;
    try {
      return await ((c = r.register) == null ? void 0 : c.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "registerFunc"), a = o(async (d3) => {
    var c;
    try {
      return await ((c = r.logout) == null ? void 0 : c.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "logoutFunc"), u = o(async (d3) => {
    var c;
    try {
      return await ((c = r.checkAuth) == null ? void 0 : c.call(r, d3)), Promise.resolve();
    } catch (p3) {
      return p3 != null && p3.redirectPath && s(p3.redirectPath), Promise.reject(p3);
    }
  }, "checkAuthFunc");
  return import_react5.default.createElement(Qo.Provider, { value: { ...r, login: n, logout: a, checkAuth: u, register: i2, isProvided: t } }, e);
}, "LegacyAuthContextProvider");
var Bo = import_react5.default.createContext({});
var No = o(({ children: e, isProvided: t, ...r }) => {
  let s = o(async (c) => {
    var p3;
    try {
      return await ((p3 = r.login) == null ? void 0 : p3.call(r, c));
    } catch (m2) {
      return console.warn("Unhandled Error in login: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleLogin"), n = o(async (c) => {
    var p3;
    try {
      return await ((p3 = r.register) == null ? void 0 : p3.call(r, c));
    } catch (m2) {
      return console.warn("Unhandled Error in register: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleRegister"), i2 = o(async (c) => {
    var p3;
    try {
      return await ((p3 = r.logout) == null ? void 0 : p3.call(r, c));
    } catch (m2) {
      return console.warn("Unhandled Error in logout: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleLogout"), a = o(async (c) => {
    var p3;
    try {
      let m2 = await ((p3 = r.check) == null ? void 0 : p3.call(r, c));
      return Promise.resolve(m2);
    } catch (m2) {
      return console.warn("Unhandled Error in check: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleCheck"), u = o(async (c) => {
    var p3;
    try {
      let m2 = await ((p3 = r.forgotPassword) == null ? void 0 : p3.call(r, c));
      return Promise.resolve(m2);
    } catch (m2) {
      return console.warn("Unhandled Error in forgotPassword: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleForgotPassword"), d3 = o(async (c) => {
    var p3;
    try {
      let m2 = await ((p3 = r.updatePassword) == null ? void 0 : p3.call(r, c));
      return Promise.resolve(m2);
    } catch (m2) {
      return console.warn("Unhandled Error in updatePassword: refine always expects a resolved promise.", m2), Promise.reject(m2);
    }
  }, "handleUpdatePassword");
  return import_react5.default.createElement(Bo.Provider, { value: { ...r, login: s, logout: i2, check: a, register: n, forgotPassword: u, updatePassword: d3, isProvided: t } }, e);
}, "AuthBindingsContextProvider");
var se = o(() => import_react5.default.useContext(Qo), "useLegacyAuthContext");
var pe = o(() => import_react5.default.useContext(Bo), "useAuthBindingsContext");
var Y = o(() => {
  let e = se(), t = pe();
  return t.isProvided ? { isLegacy: false, ...t } : e.isProvided ? { isLegacy: true, ...e, check: e.checkAuth, onError: e.checkError, getIdentity: e.getUserIdentity } : null;
}, "useActiveAuthProvider");
var Kt = o(({ hasPagination: e, pagination: t, configPagination: r } = {}) => {
  let s = e === false ? "off" : "server", n = (t == null ? void 0 : t.mode) ?? s, i2 = S(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, a = S(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;
  return { current: i2, pageSize: a, mode: n };
}, "handlePaginationParams");
var gr = o((e) => {
  let [t, r] = (0, import_react6.useState)(false);
  return (0, import_react6.useEffect)(() => {
    let s = window.matchMedia(e);
    s.matches !== t && r(s.matches);
    let n = o(() => r(s.matches), "listener");
    return window.addEventListener("resize", n), () => window.removeEventListener("resize", n);
  }, [t, e]), t;
}, "useMediaQuery");
var Tr = o((e, t, r, s) => {
  let n = s ? e(t, s, r) : e(t, r), i2 = r ?? t;
  return n === t || typeof n > "u" ? i2 : n;
}, "safeTranslate");
function Ko(e, t, r, s, n) {
  var R2;
  let i2 = { create: "Create new ", clone: `#${s ?? ""} Clone `, edit: `#${s ?? ""} Edit `, show: `#${s ?? ""} Show `, list: "" }, a = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), u = (t == null ? void 0 : t.label) ?? ((R2 = t == null ? void 0 : t.meta) == null ? void 0 : R2.label) ?? tr(a, r === "list" ? "plural" : "singular"), d3 = n ?? u, c = Tr(e, "documentTitle.default", "refine"), p3 = Tr(e, "documentTitle.suffix", " | refine"), m2 = c;
  return r && a && (m2 = Tr(e, `documentTitle.${a}.${r}`, `${i2[r] ?? ""}${d3}${p3}`, { id: s })), m2;
}
o(Ko, "generateDefaultDocumentTitle");
var ze = o(() => {
  let { mutationMode: e, undoableTimeout: t } = (0, import_react7.useContext)(Ue);
  return { mutationMode: e, undoableTimeout: t };
}, "useMutationMode");
var $r = import_react9.default.createContext({});
var Go = o(({ children: e }) => {
  let [t, r] = (0, import_react9.useState)(false);
  return import_react9.default.createElement($r.Provider, { value: { warnWhen: t, setWarnWhen: r } }, e);
}, "UnsavedWarnContextProvider");
var Ht = o(() => {
  let { warnWhenUnsavedChanges: e } = (0, import_react8.useContext)(Ue), { warnWhen: t, setWarnWhen: r } = (0, import_react8.useContext)($r);
  return { warnWhenUnsavedChanges: e, warnWhen: !!t, setWarnWhen: r ?? (() => {
  }) };
}, "useWarnAboutChange");
var Wr = o(() => {
  let { syncWithLocation: e } = (0, import_react10.useContext)(Ue);
  return { syncWithLocation: e };
}, "useSyncWithLocation");
var Mn = o(() => {
  let { Title: e } = (0, import_react11.useContext)(Ue);
  return e;
}, "useTitle");
var oe = o(() => {
  let { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: i2, hasDashboard: a, mutationMode: u, syncWithLocation: d3, undoableTimeout: c, warnWhenUnsavedChanges: p3, DashboardPage: m2, LoginPage: R2, catchAll: g2, options: T2 } = (0, import_react12.useContext)(Ue);
  return { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: i2, hasDashboard: a, mutationMode: u, syncWithLocation: d3, undoableTimeout: c, warnWhenUnsavedChanges: p3, DashboardPage: m2, LoginPage: R2, catchAll: g2, options: T2 };
}, "useRefineContext");
var Dt = o(() => {
  let { options: { textTransformers: e } } = oe();
  return o((r = "", s) => {
    let n = e.humanize(r);
    return s === "singular" ? e.singular(n) : e.plural(n);
  }, "getFriendlyName");
}, "useUserFriendlyName");
var Wo = o((e) => typeof e == "object" && e !== null, "isNested");
var wn = o((e) => Array.isArray(e), "isArray");
var Rr = o((e, t = "") => Wo(e) ? Object.keys(e).reduce((r, s) => {
  let n = t.length ? t + "." : "";
  return Wo(e[s]) && Object.keys(e[s]).length && (wn(e[s]) && e[s].length ? e[s].forEach((i2, a) => {
    Object.assign(r, Rr(i2, n + s + "." + a));
  }) : Object.assign(r, Rr(e[s], n + s))), r[n + s] = e[s], r;
}, {}) : { [t]: e }, "flattenObjectKeys");
var zo = o((e) => e.split(".").map((t) => isNaN(Number(t)) ? t : Number(t)), "propertyPathToArray");
var Pr = o((e) => {
  let { current: t, pageSize: r, sorter: s, sorters: n, filters: i2 } = import_qs.default.parse(e.substring(1));
  return { parsedCurrent: t && Number(t), parsedPageSize: r && Number(r), parsedSorter: S(n, s) ?? [], parsedFilters: i2 ?? [] };
}, "parseTableParams");
var An = o((e) => {
  let t = import_qs.default.stringify(e);
  return Pr(`/${t}`);
}, "parseTableParamsFromQuery");
var xr = o((e) => {
  let t = { skipNulls: true, arrayFormat: "indices", encode: false }, { pagination: r, sorter: s, sorters: n, filters: i2, ...a } = e;
  return import_qs.default.stringify({ ...a, ...r || {}, sorters: S(n, s), filters: i2 }, t);
}, "stringifyTableParams");
var jo = o((e, t) => e.operator !== "and" && e.operator !== "or" && t.operator !== "and" && t.operator !== "or" ? ("field" in e ? e.field : void 0) == ("field" in t ? t.field : void 0) && e.operator == t.operator : ("key" in e ? e.key : void 0) == ("key" in t ? t.key : void 0) && e.operator == t.operator, "compareFilters");
var Xo = o((e, t) => e.field == t.field, "compareSorters");
var Lt = o((e, t, r = []) => (t.filter((n) => (n.operator === "or" || n.operator === "and") && !n.key).length > 1 && (0, import_warn_once.default)(true, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. 
For more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), unionWith_default(e, t, r, jo).filter((n) => n.value !== void 0 && n.value !== null && (n.operator !== "or" || n.operator === "or" && n.value.length !== 0) && (n.operator !== "and" || n.operator === "and" && n.value.length !== 0))), "unionFilters");
var hr = o((e, t) => unionWith_default(e, t, Xo).filter((r) => r.order !== void 0 && r.order !== null), "unionSorters");
var Cr = o((e, t) => [...differenceWith_default(t, e, jo), ...e], "setInitialFilters");
var br = o((e, t) => [...differenceWith_default(t, e, Xo), ...e], "setInitialSorters");
var kn = o((e, t) => {
  if (!t)
    return;
  let r = t.find((s) => s.field === e);
  if (r)
    return r.order;
}, "getDefaultSortOrder");
var Fn = o((e, t, r = "eq") => {
  let s = t == null ? void 0 : t.find((n) => {
    if (n.operator !== "or" && n.operator !== "and" && "field" in n) {
      let { operator: i2, field: a } = n;
      return a === e && i2 === r;
    }
  });
  if (s)
    return s.value || [];
}, "getDefaultFilter");
var Qn = o((e) => new Promise((t, r) => {
  let s = new FileReader(), n = o(() => {
    s.result && (s.removeEventListener("load", n, false), t(s.result));
  }, "resultHandler");
  s.addEventListener("load", n, false), s.readAsDataURL(e.originFileObj), s.onerror = (i2) => (s.removeEventListener("load", n, false), r(i2));
}), "file2Base64");
var W = o(() => {
  let { options: { useNewQueryKeys: e } } = oe();
  return { keys: We, preferLegacyKeys: !e };
}, "useKeys");
function Vn({ v3LegacyAuthProviderCompatible: e = false, options: t } = {}) {
  let { getPermissions: r } = se(), { getPermissions: s } = pe(), { keys: n, preferLegacyKeys: i2 } = W(), a = useQuery({ queryKey: n().auth().action("permissions").get(i2), queryFn: s ?? (() => Promise.resolve(void 0)), enabled: !e && !!s, ...e ? {} : t, meta: { ...e ? {} : t == null ? void 0 : t.meta, ...P("usePermissions", i2) } }), u = useQuery({ queryKey: [...n().auth().action("permissions").get(i2), "v3LegacyAuthProviderCompatible"], queryFn: r ?? (() => Promise.resolve(void 0)), enabled: e && !!r, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("usePermissions", i2) } });
  return e ? u : a;
}
o(Vn, "usePermissions");
function _r({ v3LegacyAuthProviderCompatible: e = false, queryOptions: t } = {}) {
  let { getUserIdentity: r } = se(), { getIdentity: s } = pe(), { keys: n, preferLegacyKeys: i2 } = W(), a = useQuery({ queryKey: n().auth().action("identity").get(i2), queryFn: s ?? (() => Promise.resolve({})), enabled: !e && !!s, retry: false, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useGetIdentity", i2) } }), u = useQuery({ queryKey: [...n().auth().action("identity").get(i2), "v3LegacyAuthProviderCompatible"], queryFn: r ?? (() => Promise.resolve({})), enabled: e && !!r, retry: false, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useGetIdentity", i2) } });
  return e ? u : a;
}
o(_r, "useGetIdentity");
var Et = o(() => {
  let e = useQueryClient(), { keys: t, preferLegacyKeys: r } = W();
  return o(async () => {
    await Promise.all(["check", "identity", "permissions"].map((n) => e.invalidateQueries(t().auth().action(n).get(r))));
  }, "invalidate");
}, "useInvalidateAuthStore");
function vr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Et(), s = q(), n = me(), { push: i2 } = le(), { open: a, close: u } = Ie(), { logout: d3 } = se(), { logout: c } = pe(), { keys: p3, preferLegacyKeys: m2 } = W(), R2 = useMutation({ mutationKey: p3().auth().action("logout").get(m2), mutationFn: c, onSuccess: async (T2, E2) => {
    let { success: D, error: f2, redirectTo: h } = T2, { redirectPath: L } = E2 ?? {}, w = L ?? h;
    D && (u == null || u("useLogout-error")), (f2 || !D) && (a == null || a(Or(f2))), w !== false && (s === "legacy" ? i2(w ?? "/login") : w && n({ to: w })), await r();
  }, onError: (T2) => {
    a == null || a(Or(T2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useLogout", m2) } }), g2 = useMutation({ mutationKey: [...p3().auth().action("logout").get(m2), "v3LegacyAuthProviderCompatible"], mutationFn: d3, onSuccess: async (T2, E2) => {
    let D = (E2 == null ? void 0 : E2.redirectPath) ?? T2;
    if (D !== false) {
      if (D) {
        s === "legacy" ? i2(D) : n({ to: D });
        return;
      }
      s === "legacy" ? i2("/login") : n({ to: "/login" }), await r();
    }
  }, onError: (T2) => {
    a == null || a(Or(T2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useLogout", m2) } });
  return e ? g2 : R2;
}
o(vr, "useLogout");
var Or = o((e) => ({ key: "useLogout-error", type: "error", message: (e == null ? void 0 : e.name) || "Logout Error", description: (e == null ? void 0 : e.message) || "Something went wrong during logout" }), "buildNotification");
function Gt({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Et(), s = q(), n = me(), { replace: i2 } = le(), a = ye(), { useLocation: u } = ne(), { search: d3 } = u(), { close: c, open: p3 } = Ie(), { login: m2 } = se(), { login: R2 } = pe(), { keys: g2, preferLegacyKeys: T2 } = W(), E2 = import_react13.default.useMemo(() => {
    var h;
    return s === "legacy" ? import_qs2.default.parse(d3, { ignoreQueryPrefix: true }).to : (h = a.params) == null ? void 0 : h.to;
  }, [s, a.params, d3]), D = useMutation({ mutationKey: g2().auth().action("login").get(T2), mutationFn: R2, onSuccess: async ({ success: h, redirectTo: L, error: w }) => {
    h && (c == null || c("login-error")), (w || !h) && (p3 == null || p3(jr(w))), E2 && h ? s === "legacy" ? i2(E2) : n({ to: E2, type: "replace" }) : L ? s === "legacy" ? i2(L) : n({ to: L, type: "replace" }) : s === "legacy" && i2("/"), await r();
  }, onError: (h) => {
    p3 == null || p3(jr(h));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useLogin", T2) } }), f2 = useMutation({ mutationKey: [...g2().auth().action("login").get(T2), "v3LegacyAuthProviderCompatible"], mutationFn: m2, onSuccess: async (h) => {
    E2 && i2(E2), h !== false && !E2 && (typeof h == "string" ? s === "legacy" ? i2(h) : n({ to: h, type: "replace" }) : s === "legacy" ? i2("/") : n({ to: "/", type: "replace" })), await r(), c == null || c("login-error");
  }, onError: (h) => {
    p3 == null || p3(jr(h));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useLogin", T2) } });
  return e ? f2 : D;
}
o(Gt, "useLogin");
var jr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Login Error", description: (e == null ? void 0 : e.message) || "Invalid credentials", key: "login-error", type: "error" }), "buildNotification");
function Yr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Et(), s = q(), n = me(), { replace: i2 } = le(), { register: a } = se(), { register: u } = pe(), { close: d3, open: c } = Ie(), { keys: p3, preferLegacyKeys: m2 } = W(), R2 = useMutation({ mutationKey: p3().auth().action("register").get(m2), mutationFn: u, onSuccess: async ({ success: T2, redirectTo: E2, error: D }) => {
    T2 && (d3 == null || d3("register-error")), (D || !T2) && (c == null || c(Xr(D))), E2 ? s === "legacy" ? i2(E2) : n({ to: E2, type: "replace" }) : s === "legacy" && i2("/"), await r();
  }, onError: (T2) => {
    c == null || c(Xr(T2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useRegister", m2) } }), g2 = useMutation({ mutationKey: [...p3().auth().action("register").get(m2), "v3LegacyAuthProviderCompatible"], mutationFn: a, onSuccess: async (T2) => {
    T2 !== false && (T2 ? s === "legacy" ? i2(T2) : n({ to: T2, type: "replace" }) : s === "legacy" ? i2("/") : n({ to: "/", type: "replace" }), await r(), d3 == null || d3("register-error"));
  }, onError: (T2) => {
    c == null || c(Xr(T2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useRegister", m2) } });
  return e ? g2 : R2;
}
o(Yr, "useRegister");
var Xr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Register Error", description: (e == null ? void 0 : e.message) || "Error while registering", key: "register-error", type: "error" }), "buildNotification");
function Zr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = q(), s = me(), { replace: n } = le(), { forgotPassword: i2 } = se(), { forgotPassword: a } = pe(), { close: u, open: d3 } = Ie(), { keys: c, preferLegacyKeys: p3 } = W(), m2 = useMutation({ mutationKey: c().auth().action("forgotPassword").get(p3), mutationFn: a, onSuccess: ({ success: g2, redirectTo: T2, error: E2 }) => {
    g2 && (u == null || u("forgot-password-error")), (E2 || !g2) && (d3 == null || d3(Jr(E2))), T2 && (r === "legacy" ? n(T2) : s({ to: T2, type: "replace" }));
  }, onError: (g2) => {
    d3 == null || d3(Jr(g2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useForgotPassword", p3) } }), R2 = useMutation({ mutationKey: [...c().auth().action("forgotPassword").get(p3), "v3LegacyAuthProviderCompatible"], mutationFn: i2, onSuccess: (g2) => {
    g2 !== false && g2 && (r === "legacy" ? n(g2) : s({ to: g2, type: "replace" })), u == null || u("forgot-password-error");
  }, onError: (g2) => {
    d3 == null || d3(Jr(g2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useForgotPassword", p3) } });
  return e ? R2 : m2;
}
o(Zr, "useForgotPassword");
var Jr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Forgot Password Error", description: (e == null ? void 0 : e.message) || "Error while resetting password", key: "forgot-password-error", type: "error" }), "buildNotification");
function eo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = q(), s = me(), { replace: n } = le(), { updatePassword: i2 } = se(), { updatePassword: a } = pe(), { close: u, open: d3 } = Ie(), { keys: c, preferLegacyKeys: p3 } = W(), m2 = ye(), { useLocation: R2 } = ne(), { search: g2 } = R2(), T2 = import_react14.default.useMemo(() => r === "legacy" ? import_qs3.default.parse(g2, { ignoreQueryPrefix: true }) ?? {} : m2.params ?? {}, [g2, m2, r]), E2 = useMutation({ mutationKey: c().auth().action("updatePassword").get(p3), mutationFn: async (f2) => a == null ? void 0 : a({ ...T2, ...f2 }), onSuccess: ({ success: f2, redirectTo: h, error: L }) => {
    f2 && (u == null || u("update-password-error")), (L || !f2) && (d3 == null || d3(qr(L))), h && (r === "legacy" ? n(h) : s({ to: h, type: "replace" }));
  }, onError: (f2) => {
    d3 == null || d3(qr(f2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useUpdatePassword", p3) } }), D = useMutation({ mutationKey: [...c().auth().action("updatePassword").get(p3), "v3LegacyAuthProviderCompatible"], mutationFn: async (f2) => i2 == null ? void 0 : i2({ ...T2, ...f2 }), onSuccess: (f2) => {
    f2 !== false && f2 && (r === "legacy" ? n(f2) : s({ to: f2, type: "replace" })), u == null || u("update-password-error");
  }, onError: (f2) => {
    d3 == null || d3(qr(f2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useUpdatePassword", p3) } });
  return e ? D : E2;
}
o(eo, "useUpdatePassword");
var qr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Update Password Error", description: (e == null ? void 0 : e.message) || "Error while updating password", key: "update-password-error", type: "error" }), "buildNotification");
function Dr({ v3LegacyAuthProviderCompatible: e = false, params: t } = {}) {
  let { checkAuth: r } = se(), { check: s } = pe(), { keys: n, preferLegacyKeys: i2 } = W(), a = useQuery({ queryKey: n().auth().action("check").params(t).get(i2), queryFn: async () => await (s == null ? void 0 : s(t)) ?? {}, retry: false, enabled: !e, meta: { ...P("useIsAuthenticated", i2) } }), u = useQuery({ queryKey: [...n().auth().action("check").params(t).get(i2), "v3LegacyAuthProviderCompatible"], queryFn: async () => await (r == null ? void 0 : r(t)) ?? {}, retry: false, enabled: e, meta: { ...P("useIsAuthenticated", i2) } });
  return e ? u : a;
}
o(Dr, "useIsAuthenticated");
var $n = Dr;
function ae({ v3LegacyAuthProviderCompatible: e = false } = {}) {
  let t = q(), r = me(), { replace: s } = le(), { checkError: n } = se(), { onError: i2 } = pe(), { keys: a, preferLegacyKeys: u } = W(), { mutate: d3 } = vr({ v3LegacyAuthProviderCompatible: !!e }), { mutate: c } = vr({ v3LegacyAuthProviderCompatible: !!e }), p3 = useMutation({ mutationKey: a().auth().action("onError").get(u), mutationFn: i2, onSuccess: ({ logout: R2, redirectTo: g2 }) => {
    if (R2) {
      c({ redirectPath: g2 });
      return;
    }
    if (g2) {
      t === "legacy" ? s(g2) : r({ to: g2, type: "replace" });
      return;
    }
  }, meta: { ...P("useOnError", u) } }), m2 = useMutation({ mutationKey: [...a().auth().action("onError").get(u), "v3LegacyAuthProviderCompatible"], mutationFn: n, onError: (R2) => {
    d3({ redirectPath: R2 });
  }, meta: { ...P("useOnError", u) } });
  return e ? m2 : p3;
}
o(ae, "useOnError");
var Wn = ae;
var to = o(() => {
  let { isProvided: e } = se(), { isProvided: t } = pe();
  return !!(t || e);
}, "useIsExistAuthentication");
var ee = o(({ isLoading: e, interval: t, onInterval: r }) => {
  let [s, n] = (0, import_react15.useState)(void 0), { options: i2 } = oe(), { overtime: a } = i2, u = t ?? a.interval, d3 = r ?? (a == null ? void 0 : a.onInterval);
  return (0, import_react15.useEffect)(() => {
    let c;
    return e && (c = setInterval(() => {
      n((p3) => p3 === void 0 ? u : p3 + u);
    }, u)), () => {
      clearInterval(c), n(void 0);
    };
  }, [e, u]), (0, import_react15.useEffect)(() => {
    d3 && s && d3(s);
  }, [s]), { elapsedTime: s };
}, "useLoadingOvertime");
var $t = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i2, queryOptions: a, successNotification: u, errorNotification: d3, meta: c, metaData: p3, liveMode: m2, onLiveEvent: R2, liveParams: g2, dataProviderName: T2, overtimeOptions: E2 } = {}) => {
  let { resources: D, resource: f2, identifier: h } = G(e), L = re(), w = _(), x2 = Y(), { mutate: y2 } = ae({ v3LegacyAuthProviderCompatible: !!(x2 != null && x2.isLegacy) }), l2 = ie(), C2 = J(), { keys: b, preferLegacyKeys: P2 } = W(), M = z(h, T2, D), v2 = S(c, p3), U = S(r, t == null ? void 0 : t.filters), k = S(i2, t == null ? void 0 : t.sort), I2 = S(s, t == null ? void 0 : t.hasPagination), F = Kt({ pagination: n, configPagination: t == null ? void 0 : t.pagination, hasPagination: I2 }), A = F.mode === "server", H = C2({ resource: f2, meta: v2 }), N = { meta: H, metaData: H, filters: U, hasPagination: A, pagination: F, sorters: k, config: { ...t, sort: k } }, V = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === true, { getList: O2 } = L(M);
  at({ resource: h, types: ["*"], params: { meta: H, metaData: H, pagination: F, hasPagination: A, sort: k, sorters: k, filters: U, subscriptionType: "useList", ...g2 }, channel: `resources/${f2 == null ? void 0 : f2.name}`, enabled: V, liveMode: m2, onLiveEvent: R2, dataProviderName: M, meta: { ...c, dataProviderName: T2 } });
  let B = useQuery({ queryKey: b().data(M).resource(h ?? "").action("list").params({ ...v2 || {}, filters: U, hasPagination: A, ...A && { pagination: F }, ...i2 && { sorters: i2 }, ...(t == null ? void 0 : t.sort) && { sort: t == null ? void 0 : t.sort } }).get(P2), queryFn: ({ queryKey: Q, pageParam: K, signal: X }) => O2({ resource: (f2 == null ? void 0 : f2.name) ?? "", pagination: F, hasPagination: A, filters: U, sort: k, sorters: k, meta: { ...H, queryContext: { queryKey: Q, pageParam: K, signal: X } }, metaData: { ...H, queryContext: { queryKey: Q, pageParam: K, signal: X } } }), ...a, enabled: typeof (a == null ? void 0 : a.enabled) < "u" ? a == null ? void 0 : a.enabled : !!(f2 != null && f2.name), select: (Q) => {
    var he;
    let K = Q, { current: X, mode: j, pageSize: Z } = F;
    return j === "client" && (K = { ...K, data: K.data.slice((X - 1) * Z, X * Z), total: K.total }), a != null && a.select ? (he = a == null ? void 0 : a.select) == null ? void 0 : he.call(a, K) : K;
  }, onSuccess: (Q) => {
    var X;
    (X = a == null ? void 0 : a.onSuccess) == null || X.call(a, Q);
    let K = typeof u == "function" ? u(Q, N, h) : u;
    l2(K);
  }, onError: (Q) => {
    var X;
    y2(Q), (X = a == null ? void 0 : a.onError) == null || X.call(a, Q);
    let K = typeof d3 == "function" ? d3(Q, N, h) : d3;
    l2(K, { key: `${h}-useList-notification`, message: w("notifications.error", { statusCode: Q.statusCode }, `Error (status code: ${Q.statusCode})`), description: Q.message, type: "error" });
  }, meta: { ...a == null ? void 0 : a.meta, ...P("useList", P2) } }), { elapsedTime: $ } = ee({ isLoading: B.isFetching, interval: E2 == null ? void 0 : E2.interval, onInterval: E2 == null ? void 0 : E2.onInterval });
  return { ...B, overtime: { elapsedTime: $ } };
}, "useList");
var Wt = o(({ resource: e, id: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i2, metaData: a, liveMode: u, onLiveEvent: d3, liveParams: c, dataProviderName: p3, overtimeOptions: m2 }) => {
  let { resources: R2, resource: g2, identifier: T2 } = G(e), E2 = re(), D = _(), f2 = Y(), { mutate: h } = ae({ v3LegacyAuthProviderCompatible: !!(f2 != null && f2.isLegacy) }), L = ie(), w = J(), { keys: x2, preferLegacyKeys: y2 } = W(), l2 = S(i2, a), C2 = z(T2, p3, R2), { getOne: b } = E2(C2), P2 = w({ resource: g2, meta: l2 });
  at({ resource: T2, types: ["*"], channel: `resources/${g2 == null ? void 0 : g2.name}`, params: { ids: t ? [t] : [], id: t, meta: P2, metaData: P2, subscriptionType: "useOne", ...c }, enabled: typeof (r == null ? void 0 : r.enabled) < "u" ? r == null ? void 0 : r.enabled : typeof (g2 == null ? void 0 : g2.name) < "u" && typeof t < "u", liveMode: u, onLiveEvent: d3, dataProviderName: C2, meta: { ...i2, dataProviderName: p3 } });
  let M = useQuery({ queryKey: x2().data(C2).resource(T2 ?? "").action("one").id(t ?? "").params({ ...l2 || {} }).get(y2), queryFn: ({ queryKey: U, pageParam: k, signal: I2 }) => b({ resource: (g2 == null ? void 0 : g2.name) ?? "", id: t, meta: { ...P2, queryContext: { queryKey: U, pageParam: k, signal: I2 } }, metaData: { ...P2, queryContext: { queryKey: U, pageParam: k, signal: I2 } } }), ...r, enabled: typeof (r == null ? void 0 : r.enabled) < "u" ? r == null ? void 0 : r.enabled : typeof t < "u", onSuccess: (U) => {
    var I2;
    (I2 = r == null ? void 0 : r.onSuccess) == null || I2.call(r, U);
    let k = typeof s == "function" ? s(U, { id: t, ...P2 }, T2) : s;
    L(k);
  }, onError: (U) => {
    var I2;
    h(U), (I2 = r == null ? void 0 : r.onError) == null || I2.call(r, U);
    let k = typeof n == "function" ? n(U, { id: t, ...P2 }, T2) : n;
    L(k, { key: `${t}-${T2}-getOne-notification`, message: D("notifications.error", { statusCode: U.statusCode }, `Error (status code: ${U.statusCode})`), description: U.message, type: "error" });
  }, meta: { ...r == null ? void 0 : r.meta, ...P("useOne", y2) } }), { elapsedTime: v2 } = ee({ isLoading: M.isFetching, interval: m2 == null ? void 0 : m2.interval, onInterval: m2 == null ? void 0 : m2.onInterval });
  return { ...M, overtime: { elapsedTime: v2 } };
}, "useOne");
var ro = o(({ resource: e, ids: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i2, metaData: a, liveMode: u, onLiveEvent: d3, liveParams: c, dataProviderName: p3, overtimeOptions: m2 }) => {
  let { resources: R2, resource: g2, identifier: T2 } = G(e), E2 = re(), D = _(), f2 = Y(), { mutate: h } = ae({ v3LegacyAuthProviderCompatible: !!(f2 != null && f2.isLegacy) }), L = ie(), w = J(), { keys: x2, preferLegacyKeys: y2 } = W(), l2 = S(i2, a), C2 = z(T2, p3, R2), b = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === true, { getMany: P2, getOne: M } = E2(C2), v2 = w({ resource: g2, meta: l2 });
  at({ resource: T2, types: ["*"], params: { ids: t, meta: v2, metaData: v2, subscriptionType: "useMany", ...c }, channel: `resources/${g2.name}`, enabled: b, liveMode: u, onLiveEvent: d3, dataProviderName: C2, meta: { ...i2, dataProviderName: p3 } });
  let U = useQuery({ queryKey: x2().data(C2).resource(T2).action("many").ids(...t).params({ ...l2 || {} }).get(y2), queryFn: ({ queryKey: I2, pageParam: F, signal: A }) => P2 ? P2({ resource: g2 == null ? void 0 : g2.name, ids: t, meta: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } }, metaData: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } } }) : Ze(t.map((H) => M({ resource: g2 == null ? void 0 : g2.name, id: H, meta: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } }, metaData: { ...v2, queryContext: { queryKey: I2, pageParam: F, signal: A } } }))), ...r, onSuccess: (I2) => {
    var A;
    (A = r == null ? void 0 : r.onSuccess) == null || A.call(r, I2);
    let F = typeof s == "function" ? s(I2, t, T2) : s;
    L(F);
  }, onError: (I2) => {
    var A;
    h(I2), (A = r == null ? void 0 : r.onError) == null || A.call(r, I2);
    let F = typeof n == "function" ? n(I2, t, T2) : n;
    L(F, { key: `${t[0]}-${T2}-getMany-notification`, message: D("notifications.error", { statusCode: I2.statusCode }, `Error (status code: ${I2.statusCode})`), description: I2.message, type: "error" });
  }, meta: { ...r == null ? void 0 : r.meta, ...P("useMany", y2) } }), { elapsedTime: k } = ee({ isLoading: U.isFetching, interval: m2 == null ? void 0 : m2.interval, onInterval: m2 == null ? void 0 : m2.onInterval });
  return { ...U, overtime: { elapsedTime: k } };
}, "useMany");
var Lr = import_react16.default.createContext({ notifications: [], notificationDispatch: () => false });
var qn = [];
var ea = o((e, t) => {
  switch (t.type) {
    case "ADD":
      return [...e.filter((s) => !(isEqual_default(s.id, t.payload.id) && s.resource == t.payload.resource)), { ...t.payload, isRunning: true }];
    case "REMOVE":
      return e.filter((s) => !(isEqual_default(s.id, t.payload.id) && s.resource == t.payload.resource));
    case "DECREASE_NOTIFICATION_SECOND":
      return e.map((s) => isEqual_default(s.id, t.payload.id) && s.resource == t.payload.resource ? { ...s, seconds: t.payload.seconds - 1e3 } : s);
    default:
      return e;
  }
}, "undoableQueueReducer");
var no = o(({ children: e }) => {
  let [t, r] = (0, import_react16.useReducer)(ea, qn), s = { notifications: t, notificationDispatch: r };
  return import_react16.default.createElement(Lr.Provider, { value: s }, e, typeof window < "u" && t.map((n) => import_react16.default.createElement(ys, { key: `${n.id}-${n.resource}-queue`, notification: n })));
}, "UndoableQueueContextProvider");
var Er = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let { resources: r, select: s } = G(), n = useQueryClient(), i2 = re(), { mutationMode: a, undoableTimeout: u } = ze(), d3 = _(), c = Y(), { mutate: p3 } = ae({ v3LegacyAuthProviderCompatible: !!(c != null && c.isLegacy) }), m2 = Ve(), { log: R2 } = Be(), { notificationDispatch: g2 } = Xe(), T2 = ie(), E2 = Ce(), D = J(), { options: { textTransformers: f2 } } = oe(), { keys: h, preferLegacyKeys: L } = W(), w = useMutation({ mutationFn: ({ id: y2, values: l2, resource: C2, mutationMode: b, undoableTimeout: P2, onCancel: M, meta: v2, metaData: U, dataProviderName: k }) => {
    let { resource: I2, identifier: F } = s(C2), A = D({ resource: I2, meta: S(v2, U) }), H = b ?? a, N = P2 ?? u;
    return H !== "undoable" ? i2(z(F, k, r)).update({ resource: I2.name, id: y2, variables: l2, meta: A, metaData: A }) : new Promise((O2, B) => {
      let $ = o(() => {
        i2(z(F, k, r)).update({ resource: I2.name, id: y2, variables: l2, meta: A, metaData: A }).then((K) => O2(K)).catch((K) => B(K));
      }, "doMutation"), Q = o(() => {
        B({ message: "mutationCancelled" });
      }, "cancelMutation");
      M && M(Q), g2({ type: "ADD", payload: { id: y2, resource: F, cancelMutation: Q, doMutation: $, seconds: N, isSilent: !!M } });
    });
  }, onMutate: async ({ resource: y2, id: l2, mutationMode: C2, values: b, dataProviderName: P2, meta: M, metaData: v2, optimisticUpdateMap: U = { list: true, many: true, detail: true } }) => {
    let { identifier: k } = s(y2), { gqlMutation: I2, gqlQuery: F, ...A } = S(M, v2) ?? {}, H = Je(L)(k, z(k, P2, r), A), N = h().data(z(k, P2, r)).resource(k), V = n.getQueriesData(N.get(L)), O2 = C2 ?? a;
    return await n.cancelQueries(N.get(L), void 0, { silent: true }), O2 !== "pessimistic" && (U.list && n.setQueriesData(N.action("list").params(A ?? {}).get(L), (B) => {
      if (typeof U.list == "function")
        return U.list(B, b, l2);
      if (!B)
        return null;
      let $ = B.data.map((Q) => {
        var K;
        return ((K = Q.id) == null ? void 0 : K.toString()) === (l2 == null ? void 0 : l2.toString()) ? { id: l2, ...Q, ...b } : Q;
      });
      return { ...B, data: $ };
    }), U.many && n.setQueriesData(N.action("many").get(L), (B) => {
      if (typeof U.many == "function")
        return U.many(B, b, l2);
      if (!B)
        return null;
      let $ = B.data.map((Q) => {
        var K;
        return ((K = Q.id) == null ? void 0 : K.toString()) === (l2 == null ? void 0 : l2.toString()) && (Q = { id: l2, ...Q, ...b }), Q;
      });
      return { ...B, data: $ };
    }), U.detail && n.setQueriesData(N.action("one").id(l2).params(A ?? {}).get(L), (B) => typeof U.detail == "function" ? U.detail(B, b, l2) : B ? { ...B, data: { ...B.data, ...b } } : null)), { previousQueries: V, queryKey: H };
  }, onSettled: (y2, l2, { id: C2, resource: b, dataProviderName: P2, invalidates: M = ["list", "many", "detail"] }) => {
    let { identifier: v2 } = s(b);
    E2({ resource: v2, dataProviderName: z(v2, P2, r), invalidates: M, id: C2 }), g2({ type: "REMOVE", payload: { id: C2, resource: v2 } });
  }, onSuccess: (y2, { id: l2, resource: C2, successNotification: b, dataProviderName: P2, values: M, meta: v2, metaData: U }, k) => {
    var X;
    let { resource: I2, identifier: F } = s(C2), A = f2.singular(F), H = z(F, P2, r), N = D({ resource: I2, meta: S(v2, U) }), V = typeof b == "function" ? b(y2, { id: l2, values: M }, F) : b;
    T2(V, { key: `${l2}-${F}-notification`, description: d3("notifications.success", "Successful"), message: d3("notifications.editSuccess", { resource: d3(`${F}.${F}`, A) }, `Successfully updated ${A}`), type: "success" }), m2 == null || m2({ channel: `resources/${I2.name}`, type: "updated", payload: { ids: (X = y2.data) != null && X.id ? [y2.data.id] : void 0 }, date: /* @__PURE__ */ new Date(), meta: { ...N, dataProviderName: H } });
    let O2;
    if (k) {
      let j = n.getQueryData(k.queryKey.detail(l2));
      O2 = Object.keys(M || {}).reduce((Z, he) => {
        var ve;
        return Z[he] = (ve = j == null ? void 0 : j.data) == null ? void 0 : ve[he], Z;
      }, {});
    }
    let { fields: B, operation: $, variables: Q, ...K } = N || {};
    R2 == null || R2.mutate({ action: "update", resource: I2.name, data: M, previousData: O2, meta: { id: l2, dataProviderName: H, ...K } });
  }, onError: (y2, { id: l2, resource: C2, errorNotification: b, values: P2 }, M) => {
    let { identifier: v2 } = s(C2);
    if (M)
      for (let U of M.previousQueries)
        n.setQueryData(U[0], U[1]);
    if (y2.message !== "mutationCancelled") {
      p3 == null || p3(y2);
      let U = f2.singular(v2), k = typeof b == "function" ? b(y2, { id: l2, values: P2 }, v2) : b;
      T2(k, { key: `${l2}-${v2}-notification`, message: d3("notifications.editError", { resource: d3(`${v2}.${v2}`, U), statusCode: y2.statusCode }, `Error when updating ${U} (status code: ${y2.statusCode})`), description: y2.message, type: "error" });
    }
  }, mutationKey: h().data().mutation("update").get(L), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useUpdate", L) } }), { elapsedTime: x2 } = ee({ isLoading: w.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...w, overtime: { elapsedTime: x2 } };
}, "useUpdate");
var zt = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Y(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), n = re(), i2 = Ce(), { resources: a, select: u } = G(), d3 = _(), c = Ve(), { log: p3 } = Be(), m2 = ie(), R2 = J(), { options: { textTransformers: g2 } } = oe(), { keys: T2, preferLegacyKeys: E2 } = W(), D = useMutation({ mutationFn: ({ resource: h, values: L, meta: w, metaData: x2, dataProviderName: y2 }) => {
    let { resource: l2, identifier: C2 } = u(h), b = R2({ resource: l2, meta: S(w, x2) });
    return n(z(C2, y2, a)).create({ resource: l2.name, variables: L, meta: b, metaData: b });
  }, onSuccess: (h, { resource: L, successNotification: w, dataProviderName: x2, invalidates: y2 = ["list", "many"], values: l2, meta: C2, metaData: b }) => {
    var V, O2;
    let { resource: P2, identifier: M } = u(L), v2 = g2.singular(M), U = z(M, x2, a), k = R2({ resource: P2, meta: S(C2, b) }), I2 = typeof w == "function" ? w(h, l2, M) : w;
    m2(I2, { key: `create-${M}-notification`, message: d3("notifications.createSuccess", { resource: d3(`${M}.${M}`, v2) }, `Successfully created ${v2}`), description: d3("notifications.success", "Success"), type: "success" }), i2({ resource: M, dataProviderName: U, invalidates: y2 }), c == null || c({ channel: `resources/${P2.name}`, type: "created", payload: { ids: (V = h == null ? void 0 : h.data) != null && V.id ? [h.data.id] : void 0 }, date: /* @__PURE__ */ new Date(), meta: { ...k, dataProviderName: U } });
    let { fields: F, operation: A, variables: H, ...N } = k || {};
    p3 == null || p3.mutate({ action: "create", resource: P2.name, data: l2, meta: { dataProviderName: U, id: ((O2 = h == null ? void 0 : h.data) == null ? void 0 : O2.id) ?? void 0, ...N } });
  }, onError: (h, { resource: L, errorNotification: w, values: x2 }) => {
    s(h);
    let { identifier: y2 } = u(L), l2 = g2.singular(y2), C2 = typeof w == "function" ? w(h, x2, y2) : w;
    m2(C2, { key: `create-${y2}-notification`, description: h.message, message: d3("notifications.createError", { resource: d3(`${y2}.${y2}`, l2), statusCode: h.statusCode }, `There was an error creating ${l2} (status code: ${h.statusCode})`), type: "error" });
  }, mutationKey: T2().data().mutation("create").get(E2), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCreate", E2) } }), { elapsedTime: f2 } = ee({ isLoading: D.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...D, overtime: { elapsedTime: f2 } };
}, "useCreate");
var ca = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Y(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), n = re(), { resources: i2, select: a } = G(), u = useQueryClient(), { mutationMode: d3, undoableTimeout: c } = ze(), { notificationDispatch: p3 } = Xe(), m2 = _(), R2 = Ve(), { log: g2 } = Be(), T2 = ie(), E2 = Ce(), D = J(), { options: { textTransformers: f2 } } = oe(), { keys: h, preferLegacyKeys: L } = W(), w = useMutation({ mutationFn: ({ id: y2, mutationMode: l2, undoableTimeout: C2, resource: b, onCancel: P2, meta: M, metaData: v2, dataProviderName: U, values: k }) => {
    let { resource: I2, identifier: F } = a(b), A = D({ resource: I2, meta: S(M, v2) }), H = l2 ?? d3, N = C2 ?? c;
    return H !== "undoable" ? n(z(F, U, i2)).deleteOne({ resource: I2.name, id: y2, meta: A, metaData: A, variables: k }) : new Promise((O2, B) => {
      let $ = o(() => {
        n(z(F, U, i2)).deleteOne({ resource: I2.name, id: y2, meta: A, metaData: A, variables: k }).then((K) => O2(K)).catch((K) => B(K));
      }, "doMutation"), Q = o(() => {
        B({ message: "mutationCancelled" });
      }, "cancelMutation");
      P2 && P2(Q), p3({ type: "ADD", payload: { id: y2, resource: F, cancelMutation: Q, doMutation: $, seconds: N, isSilent: !!P2 } });
    });
  }, onMutate: async ({ id: y2, resource: l2, mutationMode: C2, dataProviderName: b, meta: P2, metaData: M }) => {
    let { identifier: v2 } = a(l2), { gqlMutation: U, gqlQuery: k, ...I2 } = S(P2, M) ?? {}, F = Je(L)(v2, z(v2, b, i2), I2), A = h().data(z(v2, b, i2)).resource(v2), H = C2 ?? d3;
    await u.cancelQueries(A.get(L), void 0, { silent: true });
    let N = u.getQueriesData(A.get(L));
    return H !== "pessimistic" && (u.setQueriesData(A.action("list").params(I2 ?? {}).get(L), (V) => V ? { data: V.data.filter((B) => {
      var $;
      return (($ = B.id) == null ? void 0 : $.toString()) !== y2.toString();
    }), total: V.total - 1 } : null), u.setQueriesData(A.action("many").get(L), (V) => {
      if (!V)
        return null;
      let O2 = V.data.filter((B) => {
        var $;
        return (($ = B.id) == null ? void 0 : $.toString()) !== (y2 == null ? void 0 : y2.toString());
      });
      return { ...V, data: O2 };
    })), { previousQueries: N, queryKey: F };
  }, onSettled: (y2, l2, { id: C2, resource: b, dataProviderName: P2, invalidates: M = ["list", "many"] }) => {
    let { identifier: v2 } = a(b);
    E2({ resource: v2, dataProviderName: z(v2, P2, i2), invalidates: M }), p3({ type: "REMOVE", payload: { id: C2, resource: v2 } });
  }, onSuccess: (y2, { id: l2, resource: C2, successNotification: b, dataProviderName: P2, meta: M, metaData: v2 }, U) => {
    let { resource: k, identifier: I2 } = a(C2), F = f2.singular(I2), A = z(I2, P2, i2), H = D({ resource: k, meta: S(M, v2) });
    u.removeQueries(U == null ? void 0 : U.queryKey.detail(l2));
    let N = typeof b == "function" ? b(y2, l2, I2) : b;
    T2(N, { key: `${l2}-${I2}-notification`, description: m2("notifications.success", "Success"), message: m2("notifications.deleteSuccess", { resource: m2(`${I2}.${I2}`, F) }, `Successfully deleted a ${F}`), type: "success" }), R2 == null || R2({ channel: `resources/${k.name}`, type: "deleted", payload: { ids: [l2] }, date: /* @__PURE__ */ new Date(), meta: { ...H, dataProviderName: A } });
    let { fields: V, operation: O2, variables: B, ...$ } = H || {};
    g2 == null || g2.mutate({ action: "delete", resource: k.name, meta: { id: l2, dataProviderName: A, ...$ } }), u.removeQueries(U == null ? void 0 : U.queryKey.detail(l2));
  }, onError: (y2, { id: l2, resource: C2, errorNotification: b }, P2) => {
    let { identifier: M } = a(C2);
    if (P2)
      for (let v2 of P2.previousQueries)
        u.setQueryData(v2[0], v2[1]);
    if (y2.message !== "mutationCancelled") {
      s(y2);
      let v2 = f2.singular(M), U = typeof b == "function" ? b(y2, l2, M) : b;
      T2(U, { key: `${l2}-${M}-notification`, message: m2("notifications.deleteError", { resource: v2, statusCode: y2.statusCode }, `Error (status code: ${y2.statusCode})`), description: y2.message, type: "error" });
    }
  }, mutationKey: h().data().mutation("delete").get(L), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useDelete", L) } }), { elapsedTime: x2 } = ee({ isLoading: w.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...w, overtime: { elapsedTime: x2 } };
}, "useDelete");
var ao = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = re(), { resources: s, select: n } = G(), i2 = _(), a = Ve(), u = ie(), d3 = Ce(), { log: c } = Be(), p3 = J(), { options: { textTransformers: m2 } } = oe(), { keys: R2, preferLegacyKeys: g2 } = W(), T2 = useMutation({ mutationFn: ({ resource: D, values: f2, meta: h, metaData: L, dataProviderName: w }) => {
    let { resource: x2, identifier: y2 } = n(D), l2 = p3({ resource: x2, meta: S(h, L) }), C2 = r(z(y2, w, s));
    return C2.createMany ? C2.createMany({ resource: x2.name, variables: f2, meta: l2, metaData: l2 }) : Ze(f2.map((b) => C2.create({ resource: x2.name, variables: b, meta: l2, metaData: l2 })));
  }, onSuccess: (D, { resource: f2, successNotification: h, dataProviderName: L, invalidates: w = ["list", "many"], values: x2, meta: y2, metaData: l2 }) => {
    let { resource: C2, identifier: b } = n(f2), P2 = m2.plural(b), M = z(b, L, s), v2 = p3({ resource: C2, meta: S(y2, l2) }), U = typeof h == "function" ? h(D, x2, b) : h;
    u(U, { key: `createMany-${b}-notification`, message: i2("notifications.createSuccess", { resource: i2(`${b}.${b}`, b) }, `Successfully created ${P2}`), description: i2("notifications.success", "Success"), type: "success" }), d3({ resource: b, dataProviderName: M, invalidates: w });
    let k = D == null ? void 0 : D.data.filter((N) => (N == null ? void 0 : N.id) !== void 0).map((N) => N.id);
    a == null || a({ channel: `resources/${C2.name}`, type: "created", payload: { ids: k }, date: /* @__PURE__ */ new Date(), meta: { ...v2, dataProviderName: M } });
    let { fields: I2, operation: F, variables: A, ...H } = v2 || {};
    c == null || c.mutate({ action: "createMany", resource: C2.name, data: x2, meta: { dataProviderName: M, ids: k, ...H } });
  }, onError: (D, { resource: f2, errorNotification: h, values: L }) => {
    let { identifier: w } = n(f2), x2 = typeof h == "function" ? h(D, L, w) : h;
    u(x2, { key: `createMany-${w}-notification`, description: D.message, message: i2("notifications.createError", { resource: i2(`${w}.${w}`, w), statusCode: D.statusCode }, `There was an error creating ${w} (status code: ${D.statusCode}`), type: "error" });
  }, mutationKey: R2().data().mutation("createMany").get(g2), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCreateMany", g2) } }), { elapsedTime: E2 } = ee({ isLoading: T2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...T2, overtime: { elapsedTime: E2 } };
}, "useCreateMany");
var ya = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let { resources: r, select: s } = G(), n = useQueryClient(), i2 = re(), a = _(), { mutationMode: u, undoableTimeout: d3 } = ze(), c = Y(), { mutate: p3 } = ae({ v3LegacyAuthProviderCompatible: !!(c != null && c.isLegacy) }), { notificationDispatch: m2 } = Xe(), R2 = Ve(), g2 = ie(), T2 = Ce(), { log: E2 } = Be(), D = J(), { options: { textTransformers: f2 } } = oe(), { keys: h, preferLegacyKeys: L } = W(), w = useMutation({ mutationFn: ({ ids: y2, values: l2, resource: C2, onCancel: b, mutationMode: P2, undoableTimeout: M, meta: v2, metaData: U, dataProviderName: k }) => {
    let { resource: I2, identifier: F } = s(C2), A = D({ resource: I2, meta: S(v2, U) }), H = P2 ?? u, N = M ?? d3, V = i2(z(F, k, r)), O2 = o(() => V.updateMany ? V.updateMany({ resource: I2.name, ids: y2, variables: l2, meta: A, metaData: A }) : Ze(y2.map(($) => V.update({ resource: I2.name, id: $, variables: l2, meta: A, metaData: A }))), "mutationFn");
    return H !== "undoable" ? O2() : new Promise(($, Q) => {
      let K = o(() => {
        O2().then((j) => $(j)).catch((j) => Q(j));
      }, "doMutation"), X = o(() => {
        Q({ message: "mutationCancelled" });
      }, "cancelMutation");
      b && b(X), m2({ type: "ADD", payload: { id: y2, resource: F, cancelMutation: X, doMutation: K, seconds: N, isSilent: !!b } });
    });
  }, onMutate: async ({ resource: y2, ids: l2, values: C2, mutationMode: b, dataProviderName: P2, meta: M, metaData: v2, optimisticUpdateMap: U = { list: true, many: true, detail: true } }) => {
    let { identifier: k } = s(y2), { gqlMutation: I2, gqlQuery: F, ...A } = S(M, v2) ?? {}, H = Je(L)(k, z(k, P2, r), A), N = h().data(z(k, P2, r)).resource(k), V = b ?? u;
    await n.cancelQueries(N.get(L), void 0, { silent: true });
    let O2 = n.getQueriesData(N.get(L));
    if (V !== "pessimistic" && (U.list && n.setQueriesData(N.action("list").params(A ?? {}).get(L), (B) => {
      if (typeof U.list == "function")
        return U.list(B, C2, l2);
      if (!B)
        return null;
      let $ = B.data.map((Q) => Q.id !== void 0 && l2.filter((K) => K !== void 0).map(String).includes(Q.id.toString()) ? { ...Q, ...C2 } : Q);
      return { ...B, data: $ };
    }), U.many && n.setQueriesData(N.action("many").get(L), (B) => {
      if (typeof U.many == "function")
        return U.many(B, C2, l2);
      if (!B)
        return null;
      let $ = B.data.map((Q) => Q.id !== void 0 && l2.filter((K) => K !== void 0).map(String).includes(Q.id.toString()) ? { ...Q, ...C2 } : Q);
      return { ...B, data: $ };
    }), U.detail))
      for (let B of l2)
        n.setQueriesData(N.action("one").id(B).params(A ?? {}).get(L), ($) => {
          if (typeof U.detail == "function")
            return U.detail($, C2, B);
          if (!$)
            return null;
          let Q = { ...$.data, ...C2 };
          return { ...$, data: Q };
        });
    return { previousQueries: O2, queryKey: H };
  }, onSettled: (y2, l2, { ids: C2, resource: b, dataProviderName: P2 }) => {
    let { identifier: M } = s(b);
    T2({ resource: M, invalidates: ["list", "many"], dataProviderName: z(M, P2, r) }), C2.forEach((v2) => T2({ resource: M, invalidates: ["detail"], dataProviderName: z(M, P2, r), id: v2 })), m2({ type: "REMOVE", payload: { id: C2, resource: M } });
  }, onSuccess: (y2, { ids: l2, resource: C2, meta: b, metaData: P2, dataProviderName: M, successNotification: v2, values: U }, k) => {
    let { resource: I2, identifier: F } = s(C2), A = f2.singular(F), H = z(F, M, r), N = D({ resource: I2, meta: S(b, P2) }), V = typeof v2 == "function" ? v2(y2, { ids: l2, values: U }, F) : v2;
    g2(V, { key: `${l2}-${F}-notification`, description: a("notifications.success", "Successful"), message: a("notifications.editSuccess", { resource: a(`${F}.${F}`, F) }, `Successfully updated ${A}`), type: "success" }), R2 == null || R2({ channel: `resources/${I2.name}`, type: "updated", payload: { ids: l2.map(String) }, date: /* @__PURE__ */ new Date(), meta: { ...N, dataProviderName: H } });
    let O2 = [];
    k && l2.forEach((X) => {
      let j = n.getQueryData(k.queryKey.detail(X));
      O2.push(Object.keys(U || {}).reduce((Z, he) => {
        var ve;
        return Z[he] = (ve = j == null ? void 0 : j.data) == null ? void 0 : ve[he], Z;
      }, {}));
    });
    let { fields: B, operation: $, variables: Q, ...K } = N || {};
    E2 == null || E2.mutate({ action: "updateMany", resource: I2.name, data: U, previousData: O2, meta: { ids: l2, dataProviderName: H, ...K } });
  }, onError: (y2, { ids: l2, resource: C2, errorNotification: b, values: P2 }, M) => {
    let { identifier: v2 } = s(C2);
    if (M)
      for (let U of M.previousQueries)
        n.setQueryData(U[0], U[1]);
    if (y2.message !== "mutationCancelled") {
      p3 == null || p3(y2);
      let U = f2.singular(v2), k = typeof b == "function" ? b(y2, { ids: l2, values: P2 }, v2) : b;
      g2(k, { key: `${l2}-${v2}-updateMany-error-notification`, message: a("notifications.editError", { resource: U, statusCode: y2.statusCode }, `Error when updating ${U} (status code: ${y2.statusCode})`), description: y2.message, type: "error" });
    }
  }, mutationKey: h().data().mutation("updateMany").get(L), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useUpdateMany", L) } }), { elapsedTime: x2 } = ee({ isLoading: w.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...w, overtime: { elapsedTime: x2 } };
}, "useUpdateMany");
var Pa = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Y(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), { mutationMode: n, undoableTimeout: i2 } = ze(), a = re(), { notificationDispatch: u } = Xe(), d3 = _(), c = Ve(), p3 = ie(), m2 = Ce(), { log: R2 } = Be(), { resources: g2, select: T2 } = G(), E2 = useQueryClient(), D = J(), { options: { textTransformers: f2 } } = oe(), { keys: h, preferLegacyKeys: L } = W(), w = useMutation({ mutationFn: ({ resource: y2, ids: l2, mutationMode: C2, undoableTimeout: b, onCancel: P2, meta: M, metaData: v2, dataProviderName: U, values: k }) => {
    let { resource: I2, identifier: F } = T2(y2), A = D({ resource: I2, meta: S(M, v2) }), H = C2 ?? n, N = b ?? i2, V = a(z(F, U, g2)), O2 = o(() => V.deleteMany ? V.deleteMany({ resource: I2.name, ids: l2, meta: A, metaData: A, variables: k }) : Ze(l2.map(($) => V.deleteOne({ resource: I2.name, id: $, meta: A, metaData: A, variables: k }))), "mutationFn");
    return H !== "undoable" ? O2() : new Promise(($, Q) => {
      let K = o(() => {
        O2().then((j) => $(j)).catch((j) => Q(j));
      }, "doMutation"), X = o(() => {
        Q({ message: "mutationCancelled" });
      }, "cancelMutation");
      P2 && P2(X), u({ type: "ADD", payload: { id: l2, resource: F, cancelMutation: X, doMutation: K, seconds: N, isSilent: !!P2 } });
    });
  }, onMutate: async ({ ids: y2, resource: l2, mutationMode: C2, dataProviderName: b, meta: P2, metaData: M }) => {
    let { identifier: v2 } = T2(l2), { gqlMutation: U, gqlQuery: k, ...I2 } = S(P2, M) ?? {}, F = Je(L)(v2, z(v2, b, g2), I2), A = h().data(z(v2, b, g2)).resource(v2), H = C2 ?? n;
    await E2.cancelQueries(A.get(L), void 0, { silent: true });
    let N = E2.getQueriesData(A.get(L));
    if (H !== "pessimistic") {
      E2.setQueriesData(A.action("list").params(I2 ?? {}).get(L), (V) => V ? { data: V.data.filter((B) => B.id && !y2.map(String).includes(B.id.toString())), total: V.total - 1 } : null), E2.setQueriesData(A.action("many").get(L), (V) => {
        if (!V)
          return null;
        let O2 = V.data.filter((B) => B.id ? !y2.map(String).includes(B.id.toString()) : false);
        return { ...V, data: O2 };
      });
      for (let V of y2)
        E2.setQueriesData(A.action("one").id(V).params(I2).get(L), (O2) => !O2 || O2.data.id == V ? null : { ...O2 });
    }
    return { previousQueries: N, queryKey: F };
  }, onSettled: (y2, l2, { resource: C2, ids: b, dataProviderName: P2, invalidates: M = ["list", "many"] }) => {
    let { identifier: v2 } = T2(C2);
    m2({ resource: v2, dataProviderName: z(v2, P2, g2), invalidates: M }), u({ type: "REMOVE", payload: { id: b, resource: v2 } });
  }, onSuccess: (y2, { ids: l2, resource: C2, meta: b, metaData: P2, dataProviderName: M, successNotification: v2 }, U) => {
    let { resource: k, identifier: I2 } = T2(C2), F = z(I2, M, g2), A = D({ resource: k, meta: S(b, P2) });
    l2.forEach(($) => E2.removeQueries(U == null ? void 0 : U.queryKey.detail($)));
    let H = typeof v2 == "function" ? v2(y2, l2, I2) : v2;
    p3(H, { key: `${l2}-${I2}-notification`, description: d3("notifications.success", "Success"), message: d3("notifications.deleteSuccess", { resource: d3(`${I2}.${I2}`, I2) }, `Successfully deleted ${I2}`), type: "success" }), c == null || c({ channel: `resources/${k.name}`, type: "deleted", payload: { ids: l2 }, date: /* @__PURE__ */ new Date(), meta: { ...A, dataProviderName: F } });
    let { fields: N, operation: V, variables: O2, ...B } = A || {};
    R2 == null || R2.mutate({ action: "deleteMany", resource: k.name, meta: { ids: l2, dataProviderName: F, ...B } }), l2.forEach(($) => E2.removeQueries(U == null ? void 0 : U.queryKey.detail($)));
  }, onError: (y2, { ids: l2, resource: C2, errorNotification: b }, P2) => {
    let { identifier: M } = T2(C2);
    if (P2)
      for (let v2 of P2.previousQueries)
        E2.setQueryData(v2[0], v2[1]);
    if (y2.message !== "mutationCancelled") {
      s(y2);
      let v2 = f2.singular(M), U = typeof b == "function" ? b(y2, l2, M) : b;
      p3(U, { key: `${l2}-${M}-notification`, message: d3("notifications.deleteError", { resource: v2, statusCode: y2.statusCode }, `Error (status code: ${y2.statusCode})`), description: y2.message, type: "error" });
    }
  }, mutationKey: h().data().mutation("deleteMany").get(L), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useDeleteMany", L) } }), { elapsedTime: x2 } = ee({ isLoading: w.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...w, overtime: { elapsedTime: x2 } };
}, "useDeleteMany");
var xa = o((e) => {
  var n;
  let t = re(), { resource: r } = G(), { getApiUrl: s } = t(e ?? ((n = S(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : n.dataProviderName));
  return s();
}, "useApiUrl");
var ba = o(({ url: e, method: t, config: r, queryOptions: s, successNotification: n, errorNotification: i2, meta: a, metaData: u, dataProviderName: d3, overtimeOptions: c }) => {
  let p3 = re(), m2 = Y(), { mutate: R2 } = ae({ v3LegacyAuthProviderCompatible: !!(m2 != null && m2.isLegacy) }), g2 = _(), T2 = ie(), E2 = J(), { keys: D, preferLegacyKeys: f2 } = W(), h = S(a, u), { custom: L } = p3(d3), w = E2({ meta: h });
  if (L) {
    let x2 = useQuery({ queryKey: D().data(d3).mutation("custom").params({ method: t, url: e, ...r, ...h || {} }).get(f2), queryFn: ({ queryKey: l2, pageParam: C2, signal: b }) => L({ url: e, method: t, ...r, meta: { ...w, queryContext: { queryKey: l2, pageParam: C2, signal: b } }, metaData: { ...w, queryContext: { queryKey: l2, pageParam: C2, signal: b } } }), ...s, onSuccess: (l2) => {
      var b;
      (b = s == null ? void 0 : s.onSuccess) == null || b.call(s, l2);
      let C2 = typeof n == "function" ? n(l2, { ...r, ...w }) : n;
      T2(C2);
    }, onError: (l2) => {
      var b;
      R2(l2), (b = s == null ? void 0 : s.onError) == null || b.call(s, l2);
      let C2 = typeof i2 == "function" ? i2(l2, { ...r, ...w }) : i2;
      T2(C2, { key: `${t}-notification`, message: g2("notifications.error", { statusCode: l2.statusCode }, `Error (status code: ${l2.statusCode})`), description: l2.message, type: "error" });
    }, meta: { ...s == null ? void 0 : s.meta, ...P("useCustom", f2) } }), { elapsedTime: y2 } = ee({ isLoading: x2.isFetching, interval: c == null ? void 0 : c.interval, onInterval: c == null ? void 0 : c.onInterval });
    return { ...x2, overtime: { elapsedTime: y2 } };
  } else
    throw Error("Not implemented custom on data provider.");
}, "useCustom");
var La = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = Y(), { mutate: s } = ae({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), n = ie(), i2 = re(), a = _(), u = J(), { keys: d3, preferLegacyKeys: c } = W(), p3 = useMutation(({ url: R2, method: g2, values: T2, meta: E2, metaData: D, dataProviderName: f2, config: h }) => {
    let L = u({ meta: S(E2, D) }), { custom: w } = i2(f2);
    if (w)
      return w({ url: R2, method: g2, payload: T2, meta: L, metaData: L, headers: { ...h == null ? void 0 : h.headers } });
    throw Error("Not implemented custom on data provider.");
  }, { onSuccess: (R2, { successNotification: g2, config: T2, meta: E2, metaData: D }) => {
    let f2 = typeof g2 == "function" ? g2(R2, { ...T2, ...S(E2, D) || {} }) : g2;
    n(f2);
  }, onError: (R2, { errorNotification: g2, method: T2, config: E2, meta: D, metaData: f2 }) => {
    s(R2);
    let h = typeof g2 == "function" ? g2(R2, { ...E2, ...S(D, f2) || {} }) : g2;
    n(h, { key: `${T2}-notification`, message: a("notifications.error", { statusCode: R2.statusCode }, `Error (status code: ${R2.statusCode})`), description: R2.message, type: "error" });
  }, mutationKey: d3().data().mutation("customMutation").get(c), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCustomMutation", c) } }), { elapsedTime: m2 } = ee({ isLoading: p3.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...p3, overtime: { elapsedTime: m2 } };
}, "useCustomMutation");
var Ea = o(() => ({ default: { create: () => Promise.resolve({ data: { id: 1 } }), createMany: () => Promise.resolve({ data: [] }), deleteOne: () => Promise.resolve({ data: { id: 1 } }), deleteMany: () => Promise.resolve({ data: [] }), getList: () => Promise.resolve({ data: [], total: 0 }), getMany: () => Promise.resolve({ data: [] }), getOne: () => Promise.resolve({ data: { id: 1 } }), update: () => Promise.resolve({ data: { id: 1 } }), updateMany: () => Promise.resolve({ data: [] }), custom: () => Promise.resolve({ data: {} }), getApiUrl: () => "" } }), "defaultDataProvider");
var _t = import_react18.default.createContext(Ea());
var Ts = o(({ children: e, ...t }) => {
  let r;
  return !t.getList || !t.getOne ? r = t : r = { default: t }, import_react18.default.createElement(_t.Provider, { value: r }, e);
}, "DataContextProvider");
var re = o(() => {
  let e = (0, import_react17.useContext)(_t);
  return (0, import_react17.useCallback)((r) => {
    if (r) {
      if (!e[r])
        throw new Error(`"${r}" Data provider not found`);
      return e[r];
    }
    if (e.default)
      return e.default;
    throw new Error('There is no "default" data provider. Please pass dataProviderName.');
  }, [e]);
}, "useDataProvider");
var Sa = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i2, queryOptions: a, successNotification: u, errorNotification: d3, meta: c, metaData: p3, liveMode: m2, onLiveEvent: R2, liveParams: g2, dataProviderName: T2, overtimeOptions: E2 }) => {
  let { resources: D, resource: f2, identifier: h } = G(e), L = re(), w = _(), x2 = Y(), { mutate: y2 } = ae({ v3LegacyAuthProviderCompatible: !!(x2 != null && x2.isLegacy) }), l2 = ie(), C2 = J(), { keys: b, preferLegacyKeys: P2 } = W(), M = z(h, T2, D), v2 = S(c, p3), U = S(r, t == null ? void 0 : t.filters), k = S(i2, t == null ? void 0 : t.sort), I2 = S(s, t == null ? void 0 : t.hasPagination), F = Kt({ pagination: n, configPagination: t == null ? void 0 : t.pagination, hasPagination: I2 }), A = F.mode === "server", H = { meta: v2, metaData: v2, filters: U, hasPagination: A, pagination: F, sorters: k, config: { ...t, sort: k } }, N = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === true, V = C2({ resource: f2, meta: v2 }), { getList: O2 } = L(M);
  at({ resource: h, types: ["*"], params: { meta: V, metaData: V, pagination: F, hasPagination: A, sort: k, sorters: k, filters: U, subscriptionType: "useList", ...g2 }, channel: `resources/${f2.name}`, enabled: N, liveMode: m2, onLiveEvent: R2, dataProviderName: M, meta: { ...V, dataProviderName: T2 } });
  let B = useInfiniteQuery({ queryKey: b().data(M).resource(h).action("infinite").params({ ...v2 || {}, filters: U, hasPagination: A, ...A && { pagination: F }, ...i2 && { sorters: i2 }, ...(t == null ? void 0 : t.sort) && { sort: t == null ? void 0 : t.sort } }).get(P2), queryFn: ({ queryKey: Q, pageParam: K, signal: X }) => {
    let j = { ...F, current: K };
    return O2({ resource: f2.name, pagination: j, hasPagination: A, filters: U, sort: k, sorters: k, meta: { ...V, queryContext: { queryKey: Q, pageParam: K, signal: X } }, metaData: { ...V, queryContext: { queryKey: Q, pageParam: K, signal: X } } }).then(({ data: Z, total: he, ...ve }) => ({ data: Z, total: he, pagination: j, ...ve }));
  }, getNextPageParam: (Q) => mr(Q), getPreviousPageParam: (Q) => fr(Q), ...a, onSuccess: (Q) => {
    var X;
    (X = a == null ? void 0 : a.onSuccess) == null || X.call(a, Q);
    let K = typeof u == "function" ? u(Q, H, h) : u;
    l2(K);
  }, onError: (Q) => {
    var X;
    y2(Q), (X = a == null ? void 0 : a.onError) == null || X.call(a, Q);
    let K = typeof d3 == "function" ? d3(Q, H, h) : d3;
    l2(K, { key: `${h}-useInfiniteList-notification`, message: w("notifications.error", { statusCode: Q.statusCode }, `Error (status code: ${Q.statusCode})`), description: Q.message, type: "error" });
  }, meta: { ...a == null ? void 0 : a.meta, ...P("useInfiniteList", P2) } }), { elapsedTime: $ } = ee({ isLoading: B.isFetching, interval: E2 == null ? void 0 : E2.interval, onInterval: E2 == null ? void 0 : E2.onInterval });
  return { ...B, overtime: { elapsedTime: $ } };
}, "useInfiniteList");
var qe = import_react19.default.createContext(void 0);
var Ps = o(({ liveProvider: e, children: t }) => import_react19.default.createElement(qe.Provider, { value: e }, t), "LiveContextProvider");
var xs = o((e) => {
  let t = (0, import_react24.useRef)(e);
  return isEqual_default(t.current, e) || (t.current = e), t.current;
}, "useMemoized");
var Ur = o((e, t) => {
  let r = xs(t);
  return (0, import_react23.useMemo)(e, r);
}, "useDeepMemo");
var it = import_react22.default.createContext({ resources: [] });
var Cs = o(({ resources: e, children: t }) => {
  let r = Ur(() => yr(e ?? []), [e]);
  return import_react22.default.createElement(it.Provider, { value: { resources: r } }, t);
}, "ResourceContextProvider");
var vs = import_react25.default.createContext("new");
var Ds = vs.Provider;
var q = o(() => import_react25.default.useContext(vs), "useRouterType");
var Ls = {};
var et = (0, import_react27.createContext)(Ls);
var Es = o(({ children: e, router: t }) => import_react27.default.createElement(et.Provider, { value: t ?? Ls }, e), "RouterBindingsProvider");
var io = o(() => {
  let e = (0, import_react28.useContext)(et);
  return import_react28.default.useMemo(() => (e == null ? void 0 : e.parse) ?? (() => () => ({})), [e == null ? void 0 : e.parse])();
}, "useParse");
var ye = o(() => {
  let e = io();
  return import_react26.default.useMemo(() => e(), [e]);
}, "useParsed");
function G(e) {
  let { resources: t } = (0, import_react21.useContext)(it), r = q(), s = ye(), n = { resourceName: e && typeof e != "string" ? e.resourceName : e, resourceNameOrRouteName: e && typeof e != "string" ? e.resourceNameOrRouteName : e, recordItemId: e && typeof e != "string" ? e.recordItemId : void 0 }, i2 = o((m2, R2 = true) => {
    let T2 = de(m2, t, r === "legacy");
    if (T2)
      return { resource: T2, identifier: T2.identifier ?? T2.name };
    if (R2) {
      let E2 = { name: m2, identifier: m2 }, D = E2.identifier ?? E2.name;
      return { resource: E2, identifier: D };
    }
  }, "select"), a = Us(), { useParams: u } = ne(), d3 = u();
  if (r === "legacy") {
    let m2 = n.resourceNameOrRouteName ? n.resourceNameOrRouteName : d3.resource, R2 = m2 ? a(m2) : void 0, g2 = (n == null ? void 0 : n.recordItemId) ?? d3.id, T2 = d3.action, E2 = (n == null ? void 0 : n.resourceName) ?? (R2 == null ? void 0 : R2.name), D = (R2 == null ? void 0 : R2.identifier) ?? (R2 == null ? void 0 : R2.name);
    return { resources: t, resource: R2, resourceName: E2, id: g2, action: T2, select: i2, identifier: D };
  }
  let c, p3 = typeof e == "string" ? e : n == null ? void 0 : n.resourceNameOrRouteName;
  if (p3) {
    let m2 = de(p3, t);
    m2 ? c = m2 : c = { name: p3 };
  } else
    s != null && s.resource && (c = s.resource);
  return { resources: t, resource: c, resourceName: c == null ? void 0 : c.name, id: s.id, action: s.action, select: i2, identifier: (c == null ? void 0 : c.identifier) ?? (c == null ? void 0 : c.name) };
}
o(G, "useResource");
var Us = o(() => {
  let { resources: e } = (0, import_react29.useContext)(it);
  return (0, import_react29.useCallback)((r) => {
    let s = de(r, e, true);
    return s || { name: r, route: r };
  }, [e]);
}, "useResourceWithRoute");
var Ce = o(() => {
  let { resources: e } = G(), t = useQueryClient(), { keys: r, preferLegacyKeys: s } = W();
  return (0, import_react20.useCallback)(async ({ resource: i2, dataProviderName: a, invalidates: u, id: d3, invalidationFilters: c = { type: "all", refetchType: "active" }, invalidationOptions: p3 = { cancelRefetch: false } }) => {
    if (u === false)
      return;
    let m2 = z(i2, a, e), R2 = r().data(m2).resource(i2 ?? "");
    await Promise.all(u.map((g2) => {
      switch (g2) {
        case "all":
          return t.invalidateQueries(r().data(m2).get(s), c, p3);
        case "list":
          return t.invalidateQueries(R2.action("list").get(s), c, p3);
        case "many":
          return t.invalidateQueries(R2.action("many").get(s), c, p3);
        case "resourceAll":
          return t.invalidateQueries(R2.get(s), c, p3);
        case "detail":
          return t.invalidateQueries(R2.action("one").id(d3 || "").get(s), c, p3);
        default:
          return;
      }
    }));
  }, []);
}, "useInvalidate");
var at = o(({ resource: e, params: t, channel: r, types: s, enabled: n = true, liveMode: i2, onLiveEvent: a, dataProviderName: u, meta: d3 }) => {
  var f2;
  let { resource: c, identifier: p3 } = G(e), m2 = (0, import_react30.useContext)(qe), { liveMode: R2, onLiveEvent: g2 } = (0, import_react30.useContext)(Ue), T2 = i2 ?? R2, E2 = Ce(), D = u ?? (d3 == null ? void 0 : d3.dataProviderName) ?? ((f2 = c == null ? void 0 : c.meta) == null ? void 0 : f2.dataProviderName);
  (0, import_react30.useEffect)(() => {
    let h, L = o((w) => {
      T2 === "auto" && E2({ resource: p3, dataProviderName: D, invalidates: ["resourceAll"], invalidationFilters: { type: "active", refetchType: "active" }, invalidationOptions: { cancelRefetch: false } }), a == null || a(w), g2 == null || g2(w);
    }, "callback");
    return T2 && T2 !== "off" && n && (h = m2 == null ? void 0 : m2.subscribe({ channel: r, params: { resource: c == null ? void 0 : c.name, ...t }, types: s, callback: L, dataProviderName: D, meta: { ...d3, dataProviderName: D } })), () => {
      h && (m2 == null || m2.unsubscribe(h));
    };
  }, [n]);
}, "useResourceSubscription");
var Is = o((e) => {
  let { liveMode: t } = (0, import_react31.useContext)(Ue);
  return e ?? t;
}, "useLiveMode");
var iP = o(({ params: e, channel: t, types: r = ["*"], enabled: s = true, onLiveEvent: n, dataProviderName: i2 = "default", meta: a }) => {
  let u = (0, import_react32.useContext)(qe);
  (0, import_react32.useEffect)(() => {
    let d3;
    return s && (d3 = u == null ? void 0 : u.subscribe({ channel: t, params: e, types: r, callback: n, dataProviderName: i2, meta: { ...a, dataProviderName: i2 } })), () => {
      d3 && (u == null || u.unsubscribe(d3));
    };
  }, [s]);
}, "useSubscription");
var Ve = o(() => {
  let e = (0, import_react33.useContext)(qe);
  return e == null ? void 0 : e.publish;
}, "usePublish");
var Xe = o(() => {
  let { notifications: e, notificationDispatch: t } = (0, import_react34.useContext)(Lr);
  return { notifications: e, notificationDispatch: t };
}, "useCancelNotification");
var Ot = (0, import_react36.createContext)({});
var ws = o(({ open: e, close: t, children: r }) => import_react36.default.createElement(Ot.Provider, { value: { open: e, close: t } }, r), "NotificationContextProvider");
var Ie = o(() => {
  let { open: e, close: t } = (0, import_react35.useContext)(Ot);
  return { open: e, close: t };
}, "useNotification");
var ie = o(() => {
  let { open: e } = Ie();
  return (0, import_react37.useCallback)((r, s) => {
    r !== false && (r ? e == null || e(r) : s && (e == null || e(s)));
  }, []);
}, "useHandleNotification");
var Ne = import_react39.default.createContext({});
var As = o(({ children: e, i18nProvider: t }) => import_react39.default.createElement(Ne.Provider, { value: { i18nProvider: t } }, e), "TranslationContextProvider");
var si = o(() => {
  let { i18nProvider: e } = (0, import_react38.useContext)(Ne);
  return (0, import_react38.useCallback)((t) => e == null ? void 0 : e.changeLocale(t), []);
}, "useSetLocale");
var _ = o(() => {
  let { i18nProvider: e } = (0, import_react40.useContext)(Ne);
  return (0, import_react40.useMemo)(() => {
    function r(s, n, i2) {
      return (e == null ? void 0 : e.translate(s, n, i2)) ?? i2 ?? (typeof n == "string" && typeof i2 > "u" ? n : s);
    }
    return o(r, "translate"), r;
  }, [e]);
}, "useTranslate");
var ci = o(() => {
  let { i18nProvider: e } = (0, import_react41.useContext)(Ne);
  return (0, import_react41.useCallback)(() => e == null ? void 0 : e.getLocale(), []);
}, "useGetLocale");
var qP = o(({ resourceName: e, resource: t, sorter: r, sorters: s, filters: n, maxItemCount: i2, pageSize: a = 20, mapData: u = o((g2) => g2, "mapData"), exportOptions: d3, meta: c, metaData: p3, dataProviderName: m2, onError: R2 } = {}) => {
  let [g2, T2] = (0, import_react42.useState)(false), E2 = re(), D = J(), { resource: f2, resources: h, identifier: L } = G(S(t, e)), x2 = `${Dt()(L, "plural")}-${(/* @__PURE__ */ new Date()).toLocaleString()}`, { getList: y2 } = E2(z(L, m2, h)), l2 = D({ resource: f2, meta: S(c, p3) });
  return { isLoading: g2, triggerExport: o(async () => {
    T2(true);
    let b = [], P2 = 1, M = true;
    for (; M; )
      try {
        let { data: U, total: k } = await y2({ resource: (f2 == null ? void 0 : f2.name) ?? "", filters: n, sort: S(s, r), sorters: S(s, r), pagination: { current: P2, pageSize: a, mode: "server" }, meta: l2, metaData: l2 });
        P2++, b.push(...U), i2 && b.length >= i2 && (b = b.slice(0, i2), M = false), k === b.length && (M = false);
      } catch (U) {
        T2(false), M = false, R2 == null || R2(U);
        return;
      }
    new import_export_to_csv_fix_source_map.ExportToCsv({ filename: x2, useKeysAsHeaders: true, ...d3 }).generateCsv(b.map(u)), T2(false);
  }, "triggerExport") };
}, "useExport");
var fx = o(({ resource: e, action: t, id: r, onMutationSuccess: s, onMutationError: n, redirect: i2, successNotification: a, errorNotification: u, meta: d3, metaData: c, queryMeta: p3, mutationMeta: m2, mutationMode: R2, liveMode: g2, onLiveEvent: T2, liveParams: E2, undoableTimeout: D, dataProviderName: f2, invalidates: h, queryOptions: L, createMutationOptions: w, updateMutationOptions: x2, overtimeOptions: y2, autoSave: l2, optimisticUpdateMap: C2 } = {}) => {
  let b = Ce(), { options: P2 } = oe(), M = J(), { resource: v2, id: U, action: k, identifier: I2 } = G(e), { identifier: F } = G(), H = o(() => {
    let fe = r ?? U;
    return e && e !== F ? r : fe;
  }, "getDefaultId")(), [N, V] = import_react43.default.useState(H);
  import_react43.default.useEffect(() => {
    V(H);
  }, [H]);
  let B = o(() => t || (k === "edit" || k === "clone" ? k : "create"), "getAction")(), $ = M({ resource: v2, meta: S(d3, c) }), { mutationMode: Q } = ze(), K = R2 ?? Q, X = B === "create", j = B === "edit", Z = B === "clone";
  (0, import_warn_once2.default)((Z || j) && !!e && !r && (L == null ? void 0 : L.enabled) !== false, `[useForm]: action: "${B}", resource: "${I2}", id: ${N} 

If you don't use the \`setId\` method to set the \`id\`, you should pass the \`id\` prop to \`useForm\`. Otherwise, \`useForm\` will not be able to infer the \`id\` from the current URL. 

See https://refine.dev/docs/api-reference/core/hooks/useForm/#resource`);
  let he = Gr({ redirectFromProps: i2, action: B, redirectOptions: P2.redirect }), St = Wt({ resource: I2, id: N ?? "", queryOptions: { enabled: N !== void 0 && (j || Z), ...L }, liveMode: g2, onLiveEvent: T2, liveParams: E2, meta: { ...$, ...p3 }, metaData: { ...$, ...p3 }, dataProviderName: f2 }), { isFetching: ct } = St, dt = zt({ mutationOptions: w }), { mutate: Tt, isLoading: Rt } = dt, Pt = Er({ mutationOptions: x2 }), { mutate: Yt, isLoading: Fr } = Pt, Oe = Er({}), { setWarnWhen: At } = Ht(), Ge = ks(), Jt = o(async (fe) => {
    At(false);
    let Fe = o((Se) => {
      Ge({ redirect: he, resource: v2, id: Se, meta: S(d3, c) });
    }, "onSuccess");
    return K !== "pessimistic" && setTimeout(() => {
      Fe();
    }), new Promise((Se, ot) => {
      if (K !== "pessimistic" && Se(), !!v2)
        return Tt({ values: fe, resource: I2 ?? v2.name, successNotification: a, errorNotification: u, meta: { ...$, ...m2 }, metaData: { ...$, ...m2 }, dataProviderName: f2, invalidates: h }, { onSuccess: (De, st, nt) => {
          var Ft;
          s && s(De, fe, nt);
          let lt = (Ft = De == null ? void 0 : De.data) == null ? void 0 : Ft.id;
          Fe(lt), Se(De);
        }, onError: (De, st, nt) => {
          if (n)
            return n(De, fe, nt);
          ot();
        } });
    });
  }, "onFinishCreate");
  import_react43.default.useEffect(() => () => {
    l2 != null && l2.invalidateOnUnmount && Oe.status === "success" && b({ id: N, invalidates: h || ["list", "many", "detail"], dataProviderName: f2, resource: I2 });
  }, [l2 == null ? void 0 : l2.invalidateOnUnmount, Oe.status]);
  let pt = o((fe) => {
    if (!v2 || !j)
      return;
    let Fe = { id: N ?? "", values: fe, resource: I2 ?? v2.name, successNotification: false, errorNotification: false, meta: { ...$, ...m2 }, metaData: { ...$, ...m2 }, dataProviderName: f2, invalidates: [], mutationMode: "pessimistic" };
    return Oe.mutate(Fe, { onSuccess: (Se, ot, De) => {
      s && s(Se, fe, De, true);
    }, onError: (Se, ot, De) => {
      if (n)
        return n(Se, fe, De, true);
    } });
  }, "onFinishAutoSaveMutation"), xt = debounce_default((fe) => pt(fe), (l2 == null ? void 0 : l2.debounce) || 1e3), kt = X || Z ? { formLoading: ct || Rt, mutationResult: dt, onFinish: Jt } : { formLoading: ct || Fr, mutationResult: Pt, onFinish: o(async (fe) => {
    if (At(false), !v2)
      return;
    let Fe = { id: N ?? "", values: fe, resource: I2 ?? v2.name, mutationMode: K, undoableTimeout: D, successNotification: a, errorNotification: u, meta: { ...$, ...m2 }, metaData: { ...$, ...m2 }, dataProviderName: f2, invalidates: h, optimisticUpdateMap: C2 }, Se = o(() => {
      Ge({ redirect: he, resource: v2, id: N, meta: S(d3, c) });
    }, "onSuccess");
    return K !== "pessimistic" && setTimeout(() => {
      Se();
    }), new Promise((ot, De) => (K !== "pessimistic" && ot(), setTimeout(() => {
      Yt(Fe, { onSuccess: (st, nt, lt) => {
        s && s(st, fe, lt), K === "pessimistic" && Se(), ot(st);
      }, onError: (st, nt, lt) => {
        if (n)
          return n(st, fe, lt);
        De();
      } });
    })));
  }, "onFinishUpdate") }, { elapsedTime: Vr } = ee({ isLoading: kt.mutationResult.isLoading || St.isFetching, interval: y2 == null ? void 0 : y2.interval, onInterval: y2 == null ? void 0 : y2.onInterval });
  return { ...kt, queryResult: St, onFinishAutoSave: xt, autoSaveProps: { status: Oe.status, data: Oe.data, error: Oe.error }, id: N, setId: V, redirect: (fe, Fe) => {
    Ge({ redirect: fe !== void 0 ? fe : j ? "list" : "edit", resource: v2, id: Fe ?? N, meta: S(d3, c) });
  }, overtime: { elapsedTime: Vr } };
}, "useForm");
var ks = o(() => {
  let { show: e, edit: t, list: r, create: s } = le();
  return (0, import_react44.useCallback)(({ redirect: i2, resource: a, id: u, meta: d3 = {} }) => {
    if (i2 && a)
      return a.show && i2 === "show" && u ? e(a, u, void 0, d3) : a.edit && i2 === "edit" && u ? t(a, u, void 0, d3) : a.create && i2 === "create" ? s(a, void 0, d3) : r(a, "push", d3);
  }, []);
}, "useRedirectionAfterSubmission");
var mt = o(() => {
  let e = q(), { resource: t, resources: r } = G(), s = ye();
  return import_react46.default.useCallback(({ resource: i2, action: a, meta: u }) => {
    var R2;
    let d3 = i2 || t;
    if (!d3)
      return;
    let p3 = (R2 = Pe(d3, r, e === "legacy").find((g2) => g2.action === a)) == null ? void 0 : R2.route;
    return p3 ? Me(p3, d3 == null ? void 0 : d3.meta, s, u) : void 0;
  }, [r, t, s]);
}, "useGetToPath");
var me = o(() => {
  let e = (0, import_react45.useContext)(et), { select: t } = G(), r = mt(), n = import_react45.default.useMemo(() => (e == null ? void 0 : e.go) ?? (() => () => {
  }), [e == null ? void 0 : e.go])();
  return (0, import_react45.useCallback)((a) => {
    if (typeof a.to != "object")
      return n({ ...a, to: a.to });
    let { resource: u } = t(a.to.resource);
    Pi(a.to, u);
    let d3 = r({ resource: u, action: a.to.action, meta: { id: a.to.id, ...a.to.meta } });
    return n({ ...a, to: d3 });
  }, [t, n]);
}, "useGo");
var Pi = o((e, t) => {
  if (!(e != null && e.action) || !(e != null && e.resource))
    throw new Error('[useGo]: "action" or "resource" is required.');
  if (["edit", "show", "clone"].includes(e == null ? void 0 : e.action) && !e.id)
    throw new Error(`[useGo]: [action: ${e.action}] requires an "id" for resource [resource: ${e.resource}]`);
  if (!t[e.action])
    throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);
}, "handleResourceErrors");
var co = o(() => {
  let e = (0, import_react47.useContext)(et);
  return import_react47.default.useMemo(() => (e == null ? void 0 : e.back) ?? (() => () => {
  }), [e == null ? void 0 : e.back])();
}, "useBack");
var le = o(() => {
  let { resources: e } = G(), t = q(), { useHistory: r } = ne(), s = r(), n = ye(), i2 = me(), a = co(), u = o((x2, y2 = "push") => {
    t === "legacy" ? s[y2](x2) : i2({ to: x2, type: y2 });
  }, "handleUrl"), d3 = o((x2, y2 = {}) => {
    var l2;
    if (t === "legacy") {
      let C2 = typeof x2 == "string" ? de(x2, e, true) ?? { name: x2, route: x2 } : x2, b = Pe(C2, e, true).find((P2) => P2.action === "create");
      return b ? Me(b.route, C2 == null ? void 0 : C2.meta, n, y2) : "";
    } else {
      let C2 = typeof x2 == "string" ? de(x2, e) ?? { name: x2 } : x2, b = (l2 = Pe(C2, e).find((P2) => P2.action === "create")) == null ? void 0 : l2.route;
      return b ? i2({ to: Me(b, C2 == null ? void 0 : C2.meta, n, y2), type: "path" }) : "";
    }
  }, "createUrl"), c = o((x2, y2, l2 = {}) => {
    var b;
    let C2 = encodeURIComponent(y2);
    if (t === "legacy") {
      let P2 = typeof x2 == "string" ? de(x2, e, true) ?? { name: x2, route: x2 } : x2, M = Pe(P2, e, true).find((v2) => v2.action === "edit");
      return M ? Me(M.route, P2 == null ? void 0 : P2.meta, n, { ...l2, id: C2 }) : "";
    } else {
      let P2 = typeof x2 == "string" ? de(x2, e) ?? { name: x2 } : x2, M = (b = Pe(P2, e).find((v2) => v2.action === "edit")) == null ? void 0 : b.route;
      return M ? i2({ to: Me(M, P2 == null ? void 0 : P2.meta, n, { ...l2, id: C2 }), type: "path" }) : "";
    }
  }, "editUrl"), p3 = o((x2, y2, l2 = {}) => {
    var b;
    let C2 = encodeURIComponent(y2);
    if (t === "legacy") {
      let P2 = typeof x2 == "string" ? de(x2, e, true) ?? { name: x2, route: x2 } : x2, M = Pe(P2, e, true).find((v2) => v2.action === "clone");
      return M ? Me(M.route, P2 == null ? void 0 : P2.meta, n, { ...l2, id: C2 }) : "";
    } else {
      let P2 = typeof x2 == "string" ? de(x2, e) ?? { name: x2 } : x2, M = (b = Pe(P2, e).find((v2) => v2.action === "clone")) == null ? void 0 : b.route;
      return M ? i2({ to: Me(M, P2 == null ? void 0 : P2.meta, n, { ...l2, id: C2 }), type: "path" }) : "";
    }
  }, "cloneUrl"), m2 = o((x2, y2, l2 = {}) => {
    var b;
    let C2 = encodeURIComponent(y2);
    if (t === "legacy") {
      let P2 = typeof x2 == "string" ? de(x2, e, true) ?? { name: x2, route: x2 } : x2, M = Pe(P2, e, true).find((v2) => v2.action === "show");
      return M ? Me(M.route, P2 == null ? void 0 : P2.meta, n, { ...l2, id: C2 }) : "";
    } else {
      let P2 = typeof x2 == "string" ? de(x2, e) ?? { name: x2 } : x2, M = (b = Pe(P2, e).find((v2) => v2.action === "show")) == null ? void 0 : b.route;
      return M ? i2({ to: Me(M, P2 == null ? void 0 : P2.meta, n, { ...l2, id: C2 }), type: "path" }) : "";
    }
  }, "showUrl"), R2 = o((x2, y2 = {}) => {
    var l2;
    if (t === "legacy") {
      let C2 = typeof x2 == "string" ? de(x2, e, true) ?? { name: x2, route: x2 } : x2, b = Pe(C2, e, true).find((P2) => P2.action === "list");
      return b ? Me(b.route, C2 == null ? void 0 : C2.meta, n, y2) : "";
    } else {
      let C2 = typeof x2 == "string" ? de(x2, e) ?? { name: x2 } : x2, b = (l2 = Pe(C2, e).find((P2) => P2.action === "list")) == null ? void 0 : l2.route;
      return b ? i2({ to: Me(b, C2 == null ? void 0 : C2.meta, n, y2), type: "path" }) : "";
    }
  }, "listUrl");
  return { create: o((x2, y2 = "push", l2 = {}) => {
    u(d3(x2, l2), y2);
  }, "create"), createUrl: d3, edit: o((x2, y2, l2 = "push", C2 = {}) => {
    u(c(x2, y2, C2), l2);
  }, "edit"), editUrl: c, clone: o((x2, y2, l2 = "push", C2 = {}) => {
    u(p3(x2, y2, C2), l2);
  }, "clone"), cloneUrl: p3, show: o((x2, y2, l2 = "push", C2 = {}) => {
    u(m2(x2, y2, C2), l2);
  }, "show"), showUrl: m2, list: o((x2, y2 = "push", l2 = {}) => {
    u(R2(x2, l2), y2);
  }, "list"), listUrl: R2, push: o((x2, ...y2) => {
    t === "legacy" ? s.push(x2, ...y2) : i2({ to: x2, type: "push" });
  }, "push"), replace: o((x2, ...y2) => {
    t === "legacy" ? s.replace(x2, ...y2) : i2({ to: x2, type: "replace" });
  }, "replace"), goBack: o(() => {
    t === "legacy" ? s.goBack() : a();
  }, "goBack") };
}, "useNavigation");
var oh = o(({ resource: e, id: t, successNotification: r, errorNotification: s, meta: n, metaData: i2, liveMode: a, onLiveEvent: u, dataProviderName: d3, queryOptions: c, overtimeOptions: p3 } = {}) => {
  let { resource: m2, id: R2, identifier: g2 } = G(e), { identifier: T2 } = G(), E2 = J(), f2 = o(() => {
    let l2 = t ?? R2;
    return e && e !== T2 ? t : l2;
  }, "getDefaultId")(), [h, L] = (0, import_react48.useState)(f2);
  import_react48.default.useEffect(() => {
    L(f2);
  }, [f2]);
  let w = E2({ resource: m2, meta: S(n, i2) });
  (0, import_warn_once3.default)(!!e && !t, `[useShow]: resource: "${g2}", id: ${t} 

If you don't use the \`setShowId\` method to set the \`showId\`, you should pass the \`id\` prop to \`useShow\`. Otherwise, \`useShow\` will not be able to infer the \`id\` from the current URL. 

See https://refine.dev/docs/api-reference/core/hooks/show/useShow/#resource`);
  let x2 = Wt({ resource: g2, id: h ?? "", queryOptions: { enabled: h !== void 0, ...c }, successNotification: r, errorNotification: s, meta: w, metaData: w, liveMode: a, onLiveEvent: u, dataProviderName: d3 }), { elapsedTime: y2 } = ee({ isLoading: x2.isFetching, interval: p3 == null ? void 0 : p3.interval, onInterval: p3 == null ? void 0 : p3.onInterval });
  return { queryResult: x2, showId: h, setShowId: L, overtime: { elapsedTime: y2 } };
}, "useShow");
var lh = o(({ resourceName: e, resource: t, mapData: r = o((p3) => p3, "mapData"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: i2, meta: a, metaData: u, onProgress: d3, dataProviderName: c } = {}) => {
  let [p3, m2] = (0, import_react49.useState)(0), [R2, g2] = (0, import_react49.useState)(0), [T2, E2] = (0, import_react49.useState)(false), { resource: D, identifier: f2 } = G(t ?? e), h = J(), L = ao(), w = zt(), x2 = h({ resource: D, meta: S(a, u) }), y2;
  n === 1 ? y2 = w : y2 = L;
  let l2 = o(() => {
    g2(0), m2(0), E2(false);
  }, "handleCleanup"), C2 = o((P2) => {
    let M = { succeeded: P2.filter((v2) => v2.type === "success"), errored: P2.filter((v2) => v2.type === "error") };
    i2 == null || i2(M), E2(false);
  }, "handleFinish");
  (0, import_react49.useEffect)(() => {
    d3 == null || d3({ totalAmount: R2, processedAmount: p3 });
  }, [R2, p3]);
  let b = o(({ file: P2 }) => (l2(), new Promise((M) => {
    E2(true), (0, import_papaparse.parse)(P2, { complete: async ({ data: v2 }) => {
      let U = er(v2, r);
      if (g2(U.length), n === 1) {
        let k = U.map((F) => o(async () => ({ response: await w.mutateAsync({ resource: f2 ?? "", values: F, successNotification: false, errorNotification: false, dataProviderName: c, meta: x2, metaData: x2 }), value: F }), "fn")), I2 = await lr(k, ({ response: F, value: A }) => (m2((H) => H + 1), { response: [F.data], type: "success", request: [A] }), (F, A) => ({ response: [F], type: "error", request: [U[A]] }));
        M(I2);
      } else {
        let k = chunk_default(U, n), I2 = k.map((A) => o(async () => ({ response: await L.mutateAsync({ resource: f2 ?? "", values: A, successNotification: false, errorNotification: false, dataProviderName: c, meta: x2, metaData: x2 }), value: A, currentBatchLength: A.length }), "fn")), F = await lr(I2, ({ response: A, currentBatchLength: H, value: N }) => (m2((V) => V + H), { response: A.data, type: "success", request: N }), (A, H) => ({ response: [A], type: "error", request: k[H] }));
        M(F);
      }
    }, ...s });
  }).then((M) => (C2(M), M))), "handleChange");
  return { inputProps: { type: "file", accept: ".csv", onChange: (P2) => {
    P2.target.files && P2.target.files.length > 0 && b({ file: P2.target.files[0] });
  } }, mutationResult: y2, isLoading: T2, handleChange: b };
}, "useImport");
var gh = o(({ defaultVisible: e = false } = {}) => {
  let [t, r] = (0, import_react50.useState)(e), s = (0, import_react50.useCallback)(() => r(true), [t]), n = (0, import_react50.useCallback)(() => r(false), [t]);
  return { visible: t, show: s, close: n };
}, "useModal");
var Mi = o(({ resource: e, action: t, meta: r, legacy: s }) => mt()({ resource: e, action: t, meta: r, legacy: s }), "useToPath");
var ft = o(() => {
  let e = (0, import_react51.useContext)(et);
  return e != null && e.Link ? e.Link : o(({ to: r, ...s }) => import_react51.default.createElement("a", { href: r, ...s }), "FallbackLink");
}, "useLink");
var tt = { useHistory: () => false, useLocation: () => false, useParams: () => ({}), Prompt: () => null, Link: () => null };
var Si = import_react53.default.createContext(tt);
var jt = Si;
var Vs = o(({ children: e, useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i2, routes: a }) => import_react53.default.createElement(jt.Provider, { value: { useHistory: t ?? tt.useHistory, useLocation: r ?? tt.useLocation, useParams: s ?? tt.useParams, Prompt: n ?? tt.Prompt, Link: i2 ?? tt.Link, routes: a ?? tt.routes } }, e), "LegacyRouterContextProvider");
var ne = o(() => {
  let e = (0, import_react52.useContext)(jt), { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i2, routes: a } = e ?? tt;
  return { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i2, routes: a };
}, "useRouterContext");
var ut = import_react55.default.createContext({ options: { buttons: { enableAccessControl: true, hideIfUnauthorized: false } } });
var Ns = o(({ can: e, children: t, options: r }) => import_react55.default.createElement(ut.Provider, { value: { can: e, options: r ? { ...r, buttons: { enableAccessControl: true, hideIfUnauthorized: false, ...r.buttons } } : { buttons: { enableAccessControl: true, hideIfUnauthorized: false } } } }, t), "AccessControlContextProvider");
var Ut = o((e) => {
  if (!e)
    return;
  let { icon: t, list: r, edit: s, create: n, show: i2, clone: a, children: u, meta: d3, options: c, ...p3 } = e, { icon: m2, ...R2 } = d3 ?? {}, { icon: g2, ...T2 } = c ?? {};
  return { ...p3, ...d3 ? { meta: R2 } : {}, ...c ? { options: T2 } : {} };
}, "sanitizeResource");
var Ks = o(({ action: e, resource: t, params: r, queryOptions: s }) => {
  let { can: n } = (0, import_react54.useContext)(ut), { keys: i2, preferLegacyKeys: a } = W(), { resource: u, ...d3 } = r ?? {}, c = Ut(u), p3 = useQuery({ queryKey: i2().access().resource(t).action(e).params({ params: { ...d3, resource: c }, enabled: s == null ? void 0 : s.enabled }).get(a), queryFn: () => (n == null ? void 0 : n({ action: e, resource: t, params: { ...d3, resource: c } })) ?? Promise.resolve({ can: true }), enabled: typeof n < "u", ...s, meta: { ...s == null ? void 0 : s.meta, ...P("useCan", a) }, retry: false });
  return typeof n > "u" ? { data: { can: true } } : p3;
}, "useCan");
var nC = o(() => {
  let { can: e } = import_react56.default.useContext(ut);
  return { can: import_react56.default.useMemo(() => e ? o(async ({ params: s, ...n }) => {
    let i2 = s != null && s.resource ? Ut(s.resource) : void 0;
    return e({ ...n, ...s ? { params: { ...s, resource: i2 } } : {} });
  }, "canWithSanitizedResource") : void 0, [e]) };
}, "useCanWithoutCache");
var RC = o((e) => {
  let [t, r] = (0, import_react57.useState)([]), [s, n] = (0, import_react57.useState)([]), [i2, a] = (0, import_react57.useState)([]), { resource: u, sort: d3, sorters: c, filters: p3 = [], optionLabel: m2 = "title", optionValue: R2 = "id", debounce: g2 = 300, successNotification: T2, errorNotification: E2, defaultValueQueryOptions: D, queryOptions: f2, fetchSize: h, pagination: L, hasPagination: w = false, liveMode: x2, defaultValue: y2 = [], onLiveEvent: l2, onSearch: C2, liveParams: b, meta: P2, metaData: M, dataProviderName: v2, overtimeOptions: U } = e, { resource: k, identifier: I2 } = G(u), A = J()({ resource: k, meta: S(P2, M) }), H = Array.isArray(y2) ? y2 : [y2], N = (0, import_react57.useCallback)((j) => {
    a(j.data.map((Z) => ({ label: get_default(Z, m2), value: get_default(Z, R2) })));
  }, [m2, R2]), V = D ?? f2, O2 = ro({ resource: I2, ids: H, queryOptions: { ...V, enabled: H.length > 0 && ((V == null ? void 0 : V.enabled) ?? true), onSuccess: (j) => {
    var Z;
    N(j), (Z = V == null ? void 0 : V.onSuccess) == null || Z.call(V, j);
  } }, meta: A, metaData: A, liveMode: "off", dataProviderName: v2 }), B = (0, import_react57.useCallback)((j) => {
    n(j.data.map((Z) => ({ label: get_default(Z, m2), value: get_default(Z, R2) })));
  }, [m2, R2]), $ = $t({ resource: I2, sorters: S(c, d3), filters: p3.concat(t), pagination: { current: L == null ? void 0 : L.current, pageSize: (L == null ? void 0 : L.pageSize) ?? h, mode: L == null ? void 0 : L.mode }, hasPagination: w, queryOptions: { ...f2, onSuccess: (j) => {
    var Z;
    B(j), (Z = f2 == null ? void 0 : f2.onSuccess) == null || Z.call(f2, j);
  } }, successNotification: T2, errorNotification: E2, meta: A, metaData: A, liveMode: x2, liveParams: b, onLiveEvent: l2, dataProviderName: v2 }), Q = o((j) => {
    if (C2) {
      r(C2(j));
      return;
    }
    if (j)
      r([{ field: m2, operator: "contains", value: j }]);
    else {
      r([]);
      return;
    }
  }, "onSearch"), { elapsedTime: K } = ee({ isLoading: $.isFetching || O2.isFetching, interval: U == null ? void 0 : U.interval, onInterval: U == null ? void 0 : U.onInterval }), X = (0, import_react57.useMemo)(() => uniqBy_default([...s, ...i2], "value"), [s, i2]);
  return { queryResult: $, defaultValueQueryResult: O2, options: X, onSearch: debounce_default(Q, g2), overtime: { elapsedTime: K } };
}, "useSelect");
var zs = [];
var _s = [];
function AC({ initialCurrent: e, initialPageSize: t, hasPagination: r = true, pagination: s, initialSorter: n, permanentSorter: i2 = _s, defaultSetFilterBehavior: a, initialFilter: u, permanentFilter: d3 = zs, filters: c, sorters: p3, syncWithLocation: m2, resource: R2, successNotification: g2, errorNotification: T2, queryOptions: E2, liveMode: D, onLiveEvent: f2, liveParams: h, meta: L, metaData: w, dataProviderName: x2, overtimeOptions: y2 } = {}) {
  var Ft, Ro, Po, xo, ho;
  let { syncWithLocation: l2 } = Wr(), C2 = m2 ?? l2, b = Is(D), P2 = q(), { useLocation: M } = ne(), { search: v2, pathname: U } = M(), k = J(), I2 = ye(), F = ((c == null ? void 0 : c.mode) || "server") === "server", A = ((p3 == null ? void 0 : p3.mode) || "server") === "server", H = r === false ? "off" : "server", N = ((s == null ? void 0 : s.mode) ?? H) !== "off", V = S(s == null ? void 0 : s.current, e), O2 = S(s == null ? void 0 : s.pageSize, t), B = S(L, w), { parsedCurrent: $, parsedPageSize: Q, parsedSorter: K, parsedFilters: X } = Pr(v2 ?? "?"), j = S(c == null ? void 0 : c.initial, u), Z = S(c == null ? void 0 : c.permanent, d3) ?? zs, he = S(p3 == null ? void 0 : p3.initial, n), ve = S(p3 == null ? void 0 : p3.permanent, i2) ?? _s, St = S(c == null ? void 0 : c.defaultBehavior, a) ?? "merge", ct, dt, Tt, Rt;
  C2 ? (ct = ((Ft = I2 == null ? void 0 : I2.params) == null ? void 0 : Ft.current) || $ || V || 1, dt = ((Ro = I2 == null ? void 0 : I2.params) == null ? void 0 : Ro.pageSize) || Q || O2 || 10, Tt = ((Po = I2 == null ? void 0 : I2.params) == null ? void 0 : Po.sorters) || (K.length ? K : he), Rt = ((xo = I2 == null ? void 0 : I2.params) == null ? void 0 : xo.filters) || (X.length ? X : j)) : (ct = V || 1, dt = O2 || 10, Tt = he, Rt = j);
  let { replace: Pt } = le(), Yt = me(), { resource: Fr, identifier: Oe } = G(R2), At = k({ resource: Fr, meta: B });
  import_react58.default.useEffect(() => {
    (0, import_warn_once4.default)(typeof Oe > "u", "useTable: `resource` is not defined.");
  }, [Oe]);
  let [Ge, Jt] = (0, import_react58.useState)(br(ve, Tt ?? [])), [pt, xt] = (0, import_react58.useState)(Cr(Z, Rt ?? [])), [ht, Qr] = (0, import_react58.useState)(ct), [rt, kt] = (0, import_react58.useState)(dt), Vr = o(({ pagination: { current: Re, pageSize: Qe }, sorter: Zt, filters: qt }) => {
    if (P2 === "new")
      return Yt({ type: "path", options: { keepHash: true, keepQuery: true }, query: { ...N ? { current: Re, pageSize: Qe } : {}, sorters: Zt, filters: qt, ...fe() } }) ?? "";
    {
      let Qt = import_qs4.default.parse(v2 == null ? void 0 : v2.substring(1)), Tn = xr({ pagination: { pageSize: Qe, current: Re }, sorters: Ge ?? Zt, filters: qt, ...Qt });
      return `${U ?? ""}?${Tn ?? ""}`;
    }
  }, "createLinkForSyncWithLocation");
  (0, import_react58.useEffect)(() => {
    v2 === "" && (Qr(ct), kt(dt), Jt(br(ve, Tt ?? [])), xt(Cr(Z, Rt ?? [])));
  }, [v2]);
  let fe = o(() => {
    if (P2 === "new") {
      let { sorters: Re, filters: Qe, pageSize: Zt, current: qt, ...Qt } = (I2 == null ? void 0 : I2.params) ?? {};
      return Qt;
    } else {
      let { sorter: Re, filters: Qe, pageSize: Zt, current: qt, ...Qt } = import_qs4.default.parse(v2, { ignoreQueryPrefix: true });
      return Qt;
    }
  }, "currentQueryParams");
  (0, import_react58.useEffect)(() => {
    if (C2) {
      let Re = fe();
      if (P2 === "new")
        Yt({ type: "replace", options: { keepQuery: true }, query: { ...N ? { pageSize: rt, current: ht } : {}, sorters: differenceWith_default(Ge, ve, isEqual_default), filters: differenceWith_default(pt, Z, isEqual_default) } });
      else {
        let Qe = xr({ ...N ? { pagination: { pageSize: rt, current: ht } } : {}, sorters: differenceWith_default(Ge, ve, isEqual_default), filters: differenceWith_default(pt, Z, isEqual_default), ...Re });
        return Pt == null ? void 0 : Pt(`${U}?${Qe}`, void 0, { shallow: true });
      }
    }
  }, [C2, ht, rt, Ge, pt]);
  let Fe = $t({ resource: Oe, hasPagination: r, pagination: { current: ht, pageSize: rt, mode: s == null ? void 0 : s.mode }, filters: F ? Lt(Z, pt) : void 0, sorters: A ? hr(ve, Ge) : void 0, queryOptions: E2, successNotification: g2, errorNotification: T2, meta: At, metaData: At, liveMode: b, liveParams: h, onLiveEvent: f2, dataProviderName: x2 }), Se = o((Re) => {
    xt((Qe) => Lt(Z, Re, Qe));
  }, "setFiltersAsMerge"), ot = o((Re) => {
    xt(Lt(Z, Re));
  }, "setFiltersAsReplace"), De = o((Re) => {
    xt((Qe) => Lt(Z, Re(Qe)));
  }, "setFiltersWithSetter"), st = o((Re, Qe = St) => {
    typeof Re == "function" ? De(Re) : Qe === "replace" ? ot(Re) : Se(Re);
  }, "setFiltersFn"), nt = o((Re) => {
    Jt(() => hr(ve, Re));
  }, "setSortWithUnion"), { elapsedTime: lt } = ee({ isLoading: Fe.isFetching, interval: y2 == null ? void 0 : y2.interval, onInterval: y2 == null ? void 0 : y2.onInterval });
  return { tableQueryResult: Fe, sorters: Ge, setSorters: nt, sorter: Ge, setSorter: nt, filters: pt, setFilters: st, current: ht, setCurrent: Qr, pageSize: rt, setPageSize: kt, pageCount: rt ? Math.ceil((((ho = Fe.data) == null ? void 0 : ho.total) ?? 0) / rt) : 1, createLinkForSyncWithLocation: Vr, overtime: { elapsedTime: lt } };
}
o(AC, "useTable");
var yt = import_react60.default.createContext({});
var js = o(({ create: e, get: t, update: r, children: s }) => import_react60.default.createElement(yt.Provider, { value: { create: e, get: t, update: r } }, s), "AuditLogContextProvider");
var Be = o(({ logMutationOptions: e, renameMutationOptions: t } = {}) => {
  let r = useQueryClient(), s = (0, import_react59.useContext)(yt), { keys: n, preferLegacyKeys: i2 } = W(), a = Y(), { resources: u } = (0, import_react59.useContext)(it), { data: d3, refetch: c, isLoading: p3 } = _r({ v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy), queryOptions: { enabled: !!(s != null && s.create) } }), m2 = useMutation(async (g2) => {
    var f2, h, L, w, x2;
    let T2 = de(g2.resource, u), E2 = S((f2 = T2 == null ? void 0 : T2.meta) == null ? void 0 : f2.audit, (h = T2 == null ? void 0 : T2.options) == null ? void 0 : h.audit, (w = (L = T2 == null ? void 0 : T2.options) == null ? void 0 : L.auditLog) == null ? void 0 : w.permissions);
    if (E2 && !Br(E2, g2.action))
      return;
    let D;
    return p3 && (s != null && s.create) && (D = await c()), await ((x2 = s.create) == null ? void 0 : x2.call(s, { ...g2, author: d3 ?? (D == null ? void 0 : D.data) }));
  }, { mutationKey: n().audit().action("log").get(), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useLog", i2) } }), R2 = useMutation(async (g2) => {
    var T2;
    return await ((T2 = s.update) == null ? void 0 : T2.call(s, g2));
  }, { onSuccess: (g2) => {
    g2 != null && g2.resource && r.invalidateQueries(n().audit().resource((g2 == null ? void 0 : g2.resource) ?? "").action("list").get(i2));
  }, mutationKey: n().audit().action("rename").get(), ...t, meta: { ...t == null ? void 0 : t.meta, ...P("useLog", i2) } });
  return { log: m2, rename: R2 };
}, "useLog");
var ab = o(({ resource: e, action: t, meta: r, author: s, metaData: n, queryOptions: i2 }) => {
  let { get: a } = (0, import_react61.useContext)(yt), { keys: u, preferLegacyKeys: d3 } = W();
  return useQuery({ queryKey: u().audit().resource(e).action("list").params(r).get(d3), queryFn: () => (a == null ? void 0 : a({ resource: e, action: t, author: s, meta: r, metaData: n })) ?? Promise.resolve([]), enabled: typeof a < "u", ...i2, retry: false, meta: { ...i2 == null ? void 0 : i2.meta, ...P("useLogList", d3) } });
}, "useLogList");
var xb = o(({ meta: e = {} } = {}) => {
  let t = q(), { i18nProvider: r } = (0, import_react62.useContext)(Ne), s = ye(), n = _(), { resources: i2, resource: a, action: u } = G(), { options: { textTransformers: d3 } } = oe(), c = [];
  if (!(a != null && a.name))
    return { breadcrumbs: c };
  let p3 = o((m2) => {
    var g2, T2, E2, D, f2, h;
    let R2 = typeof m2 == "string" ? de(m2, i2, t === "legacy") ?? { name: m2 } : m2;
    if (R2) {
      let L = S((g2 = R2 == null ? void 0 : R2.meta) == null ? void 0 : g2.parent, R2 == null ? void 0 : R2.parentName);
      L && p3(L);
      let w = Pe(R2, i2, t === "legacy").find((l2) => l2.action === "list"), x2 = (T2 = w == null ? void 0 : w.resource) != null && T2.list ? w == null ? void 0 : w.route : void 0, y2 = x2 ? t === "legacy" ? x2 : Me(x2, R2 == null ? void 0 : R2.meta, s, e) : void 0;
      c.push({ label: S((E2 = R2.meta) == null ? void 0 : E2.label, (D = R2.options) == null ? void 0 : D.label) ?? n(`${R2.name}.${R2.name}`, d3.humanize(R2.name)), href: y2, icon: S((f2 = R2.meta) == null ? void 0 : f2.icon, (h = R2.options) == null ? void 0 : h.icon, R2.icon) });
    }
  }, "addBreadcrumb");
  if (p3(a), u && u !== "list") {
    let m2 = `actions.${u}`, R2 = n(m2);
    typeof r < "u" && R2 === m2 ? ((0, import_warn_once5.default)(true, `[useBreadcrumb]: Breadcrumb missing translate key for the "${u}" action. Please add "actions.${u}" key to your translation file.
For more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), c.push({ label: n(`buttons.${u}`, d3.humanize(u)) })) : c.push({ label: n(m2, d3.humanize(u)) });
  }
  return { breadcrumbs: c };
}, "useBreadcrumb");
var Mt = o((e, t, r = false) => {
  let s = [], n = Ae(e, t);
  for (; n; )
    s.push(n), n = Ae(n, t);
  return s.reverse(), `/${[...s, e].map((a) => xe((r ? a.route : void 0) ?? a.identifier ?? a.name)).join("/").replace(/^\//, "")}`;
}, "createResourceKey");
var Zs = o((e, t = false) => {
  let r = { item: { name: "__root__" }, children: {} };
  e.forEach((n) => {
    let i2 = [], a = Ae(n, e);
    for (; a; )
      i2.push(a), a = Ae(a, e);
    i2.reverse();
    let u = r;
    i2.forEach((c) => {
      let p3 = (t ? c.route : void 0) ?? c.identifier ?? c.name;
      u.children[p3] || (u.children[p3] = { item: c, children: {} }), u = u.children[p3];
    });
    let d3 = (t ? n.route : void 0) ?? n.identifier ?? n.name;
    u.children[d3] || (u.children[d3] = { item: n, children: {} });
  });
  let s = o((n) => {
    let i2 = [];
    return Object.keys(n.children).forEach((a) => {
      let u = Mt(n.children[a].item, e, t), d3 = { ...n.children[a].item, key: u, children: s(n.children[a]) };
      i2.push(d3);
    }), i2;
  }, "flatten");
  return s(r);
}, "createTree");
var qs = o((e) => e.split("?")[0].split("#")[0].replace(/(.+)(\/$)/, "$1"), "getCleanPath");
var ji = o(({ meta: e, hideOnMissingParameter: t } = { hideOnMissingParameter: true }) => {
  let r = _(), s = mt(), n = q(), { resource: i2, resources: a } = G(), { pathname: u } = ye(), { useLocation: d3 } = ne(), { pathname: c } = d3(), p3 = Dt(), R2 = `/${((n === "legacy" ? qs(c) : u ? qs(u) : void 0) ?? "").replace(/^\//, "")}`, g2 = i2 ? Mt(i2, a, n === "legacy") : R2 ?? "", T2 = import_react63.default.useMemo(() => {
    if (!i2)
      return [];
    let f2 = Ae(i2, a), h = [Mt(i2, a)];
    for (; f2; )
      h.push(Mt(f2, a)), f2 = Ae(f2, a);
    return h;
  }, []), E2 = import_react63.default.useCallback((f2) => {
    var L, w, x2, y2, l2, C2;
    if ((((L = f2 == null ? void 0 : f2.meta) == null ? void 0 : L.hide) ?? ((w = f2 == null ? void 0 : f2.options) == null ? void 0 : w.hide)) || !(f2 != null && f2.list) && f2.children.length === 0)
      return;
    let h = f2.list ? s({ resource: f2, action: "list", legacy: n === "legacy", meta: e }) : void 0;
    if (!(t && h && h.match(/(\/|^):(.+?)(\/|$){1}/)))
      return { ...f2, route: h, icon: S((x2 = f2.meta) == null ? void 0 : x2.icon, (y2 = f2.options) == null ? void 0 : y2.icon, f2.icon), label: S((l2 = f2 == null ? void 0 : f2.meta) == null ? void 0 : l2.label, (C2 = f2 == null ? void 0 : f2.options) == null ? void 0 : C2.label) ?? r(`${f2.name}.${f2.name}`, p3(f2.name, "plural")) };
  }, [n, e, s, r, t]), D = import_react63.default.useMemo(() => {
    let f2 = Zs(a, n === "legacy"), h = o((L) => L.flatMap((w) => {
      let x2 = h(w.children), y2 = E2({ ...w, children: x2 });
      return y2 ? [y2] : [];
    }), "prepare");
    return h(f2);
  }, [a, n, E2]);
  return { defaultOpenKeys: T2, selectedKey: g2, menuItems: D };
}, "useMenu");
var J = o(() => {
  let { params: e } = ye();
  return o(({ resource: r, meta: s } = {}) => {
    let { meta: n } = Ut(r) ?? { meta: {} }, { filters: i2, sorters: a, current: u, pageSize: d3, ...c } = e ?? {};
    return { ...n, ...c, ...s };
  }, "getMetaFn");
}, "useMeta");
var Ji = o(() => {
  let [e, t] = (0, import_react2.useState)(), r = _(), { push: s } = le(), n = me(), i2 = q(), { resource: a, action: u } = G();
  return (0, import_react2.useEffect)(() => {
    a && u && t(r("pages.error.info", { action: u, resource: a.name }, `You may have forgotten to add the "${u}" component to "${a.name}" resource.`));
  }, [a, u]), import_react2.default.createElement(import_react2.default.Fragment, null, import_react2.default.createElement("h1", null, r("pages.error.404", void 0, "Sorry, the page you visited does not exist.")), e && import_react2.default.createElement("p", null, e), import_react2.default.createElement("button", { onClick: () => {
    i2 === "legacy" ? s("/") : n({ to: "/" });
  } }, r("pages.error.backHome", void 0, "Back Home")));
}, "ErrorComponent");
var Kr = o(() => {
  let [e, t] = (0, import_react64.useState)(""), [r, s] = (0, import_react64.useState)(""), n = _(), i2 = Y(), { mutate: a } = Gt({ v3LegacyAuthProviderCompatible: !!(i2 != null && i2.isLegacy) });
  return import_react64.default.createElement(import_react64.default.Fragment, null, import_react64.default.createElement("h1", null, n("pages.login.title", "Sign in your account")), import_react64.default.createElement("form", { onSubmit: (u) => {
    u.preventDefault(), a({ username: e, password: r });
  } }, import_react64.default.createElement("table", null, import_react64.default.createElement("tbody", null, import_react64.default.createElement("tr", null, import_react64.default.createElement("td", null, n("pages.login.username", void 0, "username"), ":"), import_react64.default.createElement("td", null, import_react64.default.createElement("input", { type: "text", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", autoFocus: true, required: true, value: e, onChange: (u) => t(u.target.value) }))), import_react64.default.createElement("tr", null, import_react64.default.createElement("td", null, n("pages.login.password", void 0, "password"), ":"), import_react64.default.createElement("td", null, import_react64.default.createElement("input", { type: "password", required: true, size: 20, value: r, onChange: (u) => s(u.target.value) }))))), import_react64.default.createElement("br", null), import_react64.default.createElement("input", { type: "submit", value: "login" })));
}, "LoginPage");
var tn = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: i2, renderContent: a, formProps: u, title: d3 = void 0, hideForm: c }) => {
  let p3 = q(), m2 = ft(), { Link: R2 } = ne(), g2 = p3 === "legacy" ? R2 : m2, [T2, E2] = (0, import_react66.useState)(""), [D, f2] = (0, import_react66.useState)(""), [h, L] = (0, import_react66.useState)(false), w = _(), x2 = Y(), { mutate: y2 } = Gt({ v3LegacyAuthProviderCompatible: !!(x2 != null && x2.isLegacy) }), l2 = o((P2, M) => import_react66.default.createElement(g2, { to: P2 }, M), "renderLink"), C2 = o(() => e ? e.map((P2) => import_react66.default.createElement("div", { key: P2.name, style: { display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "1rem" } }, import_react66.default.createElement("button", { onClick: () => y2({ providerName: P2.name }), style: { display: "flex", alignItems: "center" } }, P2 == null ? void 0 : P2.icon, P2.label ?? import_react66.default.createElement("label", null, P2.label)))) : null, "renderProviders"), b = import_react66.default.createElement("div", { ...n }, import_react66.default.createElement("h1", { style: { textAlign: "center" } }, w("pages.login.title", "Sign in to your account")), C2(), !c && import_react66.default.createElement(import_react66.default.Fragment, null, import_react66.default.createElement("hr", null), import_react66.default.createElement("form", { onSubmit: (P2) => {
    P2.preventDefault(), y2({ email: T2, password: D, remember: h });
  }, ...u }, import_react66.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react66.default.createElement("label", { htmlFor: "email-input" }, w("pages.login.fields.email", "Email")), import_react66.default.createElement("input", { id: "email-input", name: "email", type: "text", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: T2, onChange: (P2) => E2(P2.target.value) }), import_react66.default.createElement("label", { htmlFor: "password-input" }, w("pages.login.fields.password", "Password")), import_react66.default.createElement("input", { id: "password-input", type: "password", name: "password", required: true, size: 20, value: D, onChange: (P2) => f2(P2.target.value) }), s ?? import_react66.default.createElement(import_react66.default.Fragment, null, import_react66.default.createElement("label", { htmlFor: "remember-me-input" }, w("pages.login.buttons.rememberMe", "Remember me"), import_react66.default.createElement("input", { id: "remember-me-input", name: "remember", type: "checkbox", size: 20, checked: h, value: h.toString(), onChange: () => {
    L(!h);
  } }))), import_react66.default.createElement("br", null), r ?? l2("/forgot-password", w("pages.login.buttons.forgotPassword", "Forgot password?")), import_react66.default.createElement("input", { type: "submit", value: w("pages.login.signin", "Sign in") }), t ?? import_react66.default.createElement("span", null, w("pages.login.buttons.noAccount", "Don’t have an account?"), " ", l2("/register", w("pages.login.register", "Sign up")))))), t !== false && c && import_react66.default.createElement("div", { style: { textAlign: "center" } }, w("pages.login.buttons.noAccount", "Don’t have an account?"), " ", l2("/register", w("pages.login.register", "Sign up"))));
  return import_react66.default.createElement("div", { ...i2 }, a ? a(b, d3) : b);
}, "LoginPage");
var on = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: i2, title: a = void 0, hideForm: u }) => {
  let d3 = q(), c = ft(), { Link: p3 } = ne(), m2 = d3 === "legacy" ? p3 : c, [R2, g2] = (0, import_react67.useState)(""), [T2, E2] = (0, import_react67.useState)(""), D = _(), f2 = Y(), { mutate: h, isLoading: L } = Yr({ v3LegacyAuthProviderCompatible: !!(f2 != null && f2.isLegacy) }), w = o((l2, C2) => import_react67.default.createElement(m2, { to: l2 }, C2), "renderLink"), x2 = o(() => e ? e.map((l2) => import_react67.default.createElement("div", { key: l2.name, style: { display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "1rem" } }, import_react67.default.createElement("button", { onClick: () => h({ providerName: l2.name }), style: { display: "flex", alignItems: "center" } }, l2 == null ? void 0 : l2.icon, l2.label ?? import_react67.default.createElement("label", null, l2.label)))) : null, "renderProviders"), y2 = import_react67.default.createElement("div", { ...s }, import_react67.default.createElement("h1", { style: { textAlign: "center" } }, D("pages.register.title", "Sign up for your account")), x2(), !u && import_react67.default.createElement(import_react67.default.Fragment, null, import_react67.default.createElement("hr", null), import_react67.default.createElement("form", { onSubmit: (l2) => {
    l2.preventDefault(), h({ email: R2, password: T2 });
  }, ...i2 }, import_react67.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react67.default.createElement("label", { htmlFor: "email-input" }, D("pages.register.fields.email", "Email")), import_react67.default.createElement("input", { id: "email-input", name: "email", type: "email", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: R2, onChange: (l2) => g2(l2.target.value) }), import_react67.default.createElement("label", { htmlFor: "password-input" }, D("pages.register.fields.password", "Password")), import_react67.default.createElement("input", { id: "password-input", name: "password", type: "password", required: true, size: 20, value: T2, onChange: (l2) => E2(l2.target.value) }), import_react67.default.createElement("input", { type: "submit", value: D("pages.register.buttons.submit", "Sign up"), disabled: L }), t ?? import_react67.default.createElement(import_react67.default.Fragment, null, import_react67.default.createElement("span", null, D("pages.login.buttons.haveAccount", "Have an account?"), " ", w("/login", D("pages.login.signin", "Sign in"))))))), t !== false && u && import_react67.default.createElement("div", { style: { textAlign: "center" } }, D("pages.login.buttons.haveAccount", "Have an account?"), " ", w("/login", D("pages.login.signin", "Sign in"))));
  return import_react67.default.createElement("div", { ...r }, n ? n(y2, a) : y2);
}, "RegisterPage");
var sn = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: i2 = void 0 }) => {
  let a = _(), u = q(), d3 = ft(), { Link: c } = ne(), p3 = u === "legacy" ? c : d3, [m2, R2] = (0, import_react68.useState)(""), { mutate: g2, isLoading: T2 } = Zr(), E2 = o((f2, h) => import_react68.default.createElement(p3, { to: f2 }, h), "renderLink"), D = import_react68.default.createElement("div", { ...r }, import_react68.default.createElement("h1", { style: { textAlign: "center" } }, a("pages.forgotPassword.title", "Forgot your password?")), import_react68.default.createElement("hr", null), import_react68.default.createElement("form", { onSubmit: (f2) => {
    f2.preventDefault(), g2({ email: m2 });
  }, ...n }, import_react68.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react68.default.createElement("label", { htmlFor: "email-input" }, a("pages.forgotPassword.fields.email", "Email")), import_react68.default.createElement("input", { id: "email-input", name: "email", type: "mail", autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: m2, onChange: (f2) => R2(f2.target.value) }), import_react68.default.createElement("input", { type: "submit", disabled: T2, value: a("pages.forgotPassword.buttons.submit", "Send reset instructions") }), import_react68.default.createElement("br", null), e ?? import_react68.default.createElement("span", null, a("pages.register.buttons.haveAccount", "Have an account? "), " ", E2("/login", a("pages.login.signin", "Sign in"))))));
  return import_react68.default.createElement("div", { ...t }, s ? s(D, i2) : D);
}, "ForgotPasswordPage");
var an = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n = void 0 }) => {
  let i2 = _(), a = Y(), { mutate: u, isLoading: d3 } = eo({ v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy) }), [c, p3] = (0, import_react69.useState)(""), [m2, R2] = (0, import_react69.useState)(""), g2 = import_react69.default.createElement("div", { ...t }, import_react69.default.createElement("h1", { style: { textAlign: "center" } }, i2("pages.updatePassword.title", "Update Password")), import_react69.default.createElement("hr", null), import_react69.default.createElement("form", { onSubmit: (T2) => {
    T2.preventDefault(), u({ password: c, confirmPassword: m2 });
  }, ...s }, import_react69.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react69.default.createElement("label", { htmlFor: "password-input" }, i2("pages.updatePassword.fields.password", "New Password")), import_react69.default.createElement("input", { id: "password-input", name: "password", type: "password", required: true, size: 20, value: c, onChange: (T2) => p3(T2.target.value) }), import_react69.default.createElement("label", { htmlFor: "confirm-password-input" }, i2("pages.updatePassword.fields.confirmPassword", "Confirm New Password")), import_react69.default.createElement("input", { id: "confirm-password-input", name: "confirmPassword", type: "password", required: true, size: 20, value: m2, onChange: (T2) => R2(T2.target.value) }), import_react69.default.createElement("input", { type: "submit", disabled: d3, value: i2("pages.updatePassword.buttons.submit", "Update") }))));
  return import_react69.default.createElement("div", { ...e }, r ? r(g2, n) : g2);
}, "UpdatePasswordPage");
var qi = o((e) => {
  let { type: t } = e;
  return import_react65.default.createElement(import_react65.default.Fragment, null, o(() => {
    switch (t) {
      case "register":
        return import_react65.default.createElement(on, { ...e });
      case "forgotPassword":
        return import_react65.default.createElement(sn, { ...e });
      case "updatePassword":
        return import_react65.default.createElement(an, { ...e });
      default:
        return import_react65.default.createElement(tn, { ...e });
    }
  }, "renderView")());
}, "AuthPage");
var yo = o(() => import_react70.default.createElement(import_react70.default.Fragment, null, import_react70.default.createElement("h1", null, "Welcome on board"), import_react70.default.createElement("p", null, "Your configuration is completed."), import_react70.default.createElement("p", null, "Now you can get started by adding your resources to the", " ", import_react70.default.createElement("code", null, "`resources`"), " property of ", import_react70.default.createElement("code", null, "`<Refine>`")), import_react70.default.createElement("div", { style: { display: "flex", gap: 8 } }, import_react70.default.createElement("a", { href: "https://refine.dev", target: "_blank", rel: "noreferrer" }, import_react70.default.createElement("button", null, "Documentation")), import_react70.default.createElement("a", { href: "https://refine.dev/examples", target: "_blank", rel: "noreferrer" }, import_react70.default.createElement("button", null, "Examples")), import_react70.default.createElement("a", { href: "https://discord.gg/refine", target: "_blank", rel: "noreferrer" }, import_react70.default.createElement("button", null, "Community")))), "ReadyPage");
var tu = [{ title: "Documentation", description: "Learn about the technical details of using refine in your projects.", link: "https://refine.dev/", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg" }, { title: "Tutorial", description: "Learn how to use refine by building a fully-functioning CRUD app, from scratch to full launch.", link: "https://refine.dev/docs/tutorial/introduction/index/", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg" }, { title: "Examples", description: "A collection of reference applications you can use as a starting point.", link: "https://refine.dev/examples", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg" }, { title: "Community", description: "Join our Discord community and keep up with the latest news.", link: "https://discord.gg/refine", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg" }];
var ru = o(() => {
  let e = gr("(max-width: 1010px)"), t = gr("(max-width: 650px)"), r = o(() => t ? "1, 280px" : e ? "2, 280px" : "4, 1fr", "getGridTemplateColumns"), s = o(() => t ? "32px" : e ? "40px" : "48px", "getHeaderFontSize"), n = o(() => t ? "16px" : e ? "20px" : "24px", "getSubHeaderFontSize");
  return import_react71.default.createElement("div", { style: { position: "fixed", zIndex: 10, inset: 0, overflow: "auto", width: "100dvw", height: "100dvh" } }, import_react71.default.createElement("div", { style: { overflow: "hidden", position: "relative", backgroundSize: "cover", backgroundRepeat: "no-repeat", background: t ? "url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30" : e ? "url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30" : "url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30", minHeight: "100%", minWidth: "100%", fontFamily: "Arial", color: "#FFFFFF" } }, import_react71.default.createElement("div", { style: { zIndex: 2, position: "absolute", width: t ? "400px" : "800px", height: "552px", opacity: "0.5", background: "url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)", backgroundRepeat: "no-repeat", backgroundSize: "contain", top: "0", left: "50%", transform: "translateX(-50%)" } }), import_react71.default.createElement("div", { style: { height: t ? "40px" : "80px" } }), import_react71.default.createElement("div", { style: { display: "flex", justifyContent: "center" } }, import_react71.default.createElement("div", { style: { backgroundRepeat: "no-repeat", backgroundSize: t ? "112px 58px" : "224px 116px", backgroundImage: "url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)", width: t ? 112 : 224, height: t ? 58 : 116 } })), import_react71.default.createElement("div", { style: { height: t ? "120px" : e ? "270px" : "40vh", minHeight: t ? "120px" : "270px" } }), import_react71.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px", textAlign: "center" } }, import_react71.default.createElement("h1", { style: { fontSize: s(), fontWeight: 700, margin: "0px" } }, "Welcome Aboard!"), import_react71.default.createElement("h4", { style: { fontSize: n(), fontWeight: 400, margin: "0px" } }, "Your configuration is completed.")), import_react71.default.createElement("div", { style: { height: "64px" } }), import_react71.default.createElement("div", { style: { display: "grid", gridTemplateColumns: `repeat(${r()})`, justifyContent: "center", gap: "48px", paddingRight: "16px", paddingLeft: "16px", paddingBottom: "32px", maxWidth: "976px", margin: "auto" } }, tu.map((i2) => import_react71.default.createElement(ou, { key: `welcome-page-${i2.title}`, card: i2 })))));
}, "WelcomePage");
var ou = o(({ card: e }) => {
  let { title: t, description: r, iconUrl: s, link: n } = e, [i2, a] = (0, import_react71.useState)(false);
  return import_react71.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px" } }, import_react71.default.createElement("div", { style: { display: "flex", alignItems: "center" } }, import_react71.default.createElement("a", { onPointerEnter: () => a(true), onPointerLeave: () => a(false), style: { display: "flex", alignItems: "center", color: "#fff", textDecoration: "none" }, href: n }, import_react71.default.createElement("div", { style: { width: "16px", height: "16px", backgroundPosition: "center", backgroundSize: "contain", backgroundRepeat: "no-repeat", backgroundImage: `url(${s})` } }), import_react71.default.createElement("span", { style: { fontSize: "16px", fontWeight: 700, marginLeft: "13px", marginRight: "14px" } }, t), import_react71.default.createElement("svg", { style: { transition: "transform 0.5s ease-in-out, opacity 0.2s ease-in-out", ...i2 && { transform: "translateX(4px)", opacity: 1 } }, width: "12", height: "8", fill: "none", opacity: "0.5", xmlns: "http://www.w3.org/2000/svg" }, import_react71.default.createElement("path", { d: "M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z", fill: "#fff" })))), import_react71.default.createElement("span", { style: { fontSize: "12px", opacity: 0.5, lineHeight: "16px" } }, r));
}, "Card");
var su = "4.46.2";
var un = o(() => {
  var h;
  let e = to(), t = (0, import_react74.useContext)(yt), r = (0, import_react74.useContext)(qe), s = (0, import_react74.useContext)(jt), n = (0, import_react74.useContext)(_t), { i18nProvider: i2 } = (0, import_react74.useContext)(Ne), a = (0, import_react74.useContext)(Ot), u = (0, import_react74.useContext)(ut), { resources: d3 } = G(), c = oe(), p3 = !!t.create || !!t.get || !!t.update, m2 = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), R2 = !!s.useHistory || !!s.Link || !!s.Prompt || !!s.useLocation || !!s.useParams, g2 = !!n, T2 = !!(i2 != null && i2.changeLocale) || !!(i2 != null && i2.getLocale) || !!(i2 != null && i2.translate), E2 = !!a.close || !!a.open, D = !!u.can, f2 = (h = c == null ? void 0 : c.options) == null ? void 0 : h.projectId;
  return { providers: { auth: e, auditLog: p3, live: m2, router: R2, data: g2, i18n: T2, notification: E2, accessControl: D }, version: su, resourceCount: d3.length, projectId: f2 };
}, "useTelemetryData");
var nu = o((e) => {
  try {
    let t = JSON.stringify(e || {});
    return typeof btoa < "u" ? btoa(t) : Buffer.from(t).toString("base64");
  } catch {
    return;
  }
}, "encode");
var au = o((e) => {
  let t = new Image();
  t.src = e;
}, "throughImage");
var iu = o((e) => {
  fetch(e);
}, "throughFetch");
var uu = o((e) => {
  typeof Image < "u" ? au(e) : typeof fetch < "u" && iu(e);
}, "transport");
var dn = o(() => {
  let e = un(), t = import_react73.default.useRef(false);
  return import_react73.default.useEffect(() => {
    if (t.current)
      return;
    let r = nu(e);
    r && (uu(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = true);
  }, []), null;
}, "Telemetry");
var pn = o((e) => {
  let t = ["go", "parse", "back", "Link"], r = Object.keys(e).filter((n) => !t.includes(n));
  return r.length > 0 ? (console.warn(`Unsupported properties are found in \`routerProvider\` prop. You provided \`${r.join(", ")}\`. Supported properties are \`${t.join(", ")}\`. You may wanted to use \`legacyRouterProvider\` prop instead.`), true) : false;
}, "checkRouterPropMisuse");
var mn = o((e) => {
  let t = import_react75.default.useRef(false);
  import_react75.default.useEffect(() => {
    t.current === false && e && pn(e) && (t.current = true);
  }, [e]);
}, "useRouterMisuseWarning");
var pu = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: s, routerProvider: n, notificationProvider: i2, accessControlProvider: a, auditLogProvider: u, resources: d3, DashboardPage: c, ReadyPage: p3, LoginPage: m2, catchAll: R2, children: g2, liveProvider: T2, i18nProvider: E2, Title: D, Layout: f2, Sider: h, Header: L, Footer: w, OffLayoutArea: x2, onLiveEvent: y2, options: l2 }) => {
  let { optionsWithDefaults: C2, disableTelemetryWithDefault: b, reactQueryWithDefaults: P2 } = Hr({ options: l2 }), M = Ur(() => {
    var I2;
    return P2.clientConfig instanceof QueryClient ? P2.clientConfig : new QueryClient({ ...P2.clientConfig, defaultOptions: { ...P2.clientConfig.defaultOptions, queries: { refetchOnWindowFocus: false, keepPreviousData: true, ...(I2 = P2.clientConfig.defaultOptions) == null ? void 0 : I2.queries } } });
  }, [P2.clientConfig]);
  C(M);
  let U = import_react72.default.useMemo(() => typeof i2 == "function" ? i2 : () => i2 ?? {}, [i2])();
  if (mn(n), s && !n && (d3 ?? []).length === 0)
    return p3 ? import_react72.default.createElement(p3, null) : import_react72.default.createElement(yo, null);
  let { RouterComponent: k = import_react72.default.Fragment } = n ? {} : s ?? {};
  return import_react72.default.createElement(QueryClientProvider, { client: M }, import_react72.default.createElement(ws, { ...U }, import_react72.default.createElement(Vo, { ...e ?? {}, isProvided: !!e }, import_react72.default.createElement(No, { ...t ?? {}, isProvided: !!t }, import_react72.default.createElement(Ts, { ...r }, import_react72.default.createElement(Ps, { liveProvider: T2 }, import_react72.default.createElement(Ds, { value: s && !n ? "legacy" : "new" }, import_react72.default.createElement(Es, { router: n }, import_react72.default.createElement(Vs, { ...s }, import_react72.default.createElement(Cs, { resources: d3 ?? [] }, import_react72.default.createElement(As, { i18nProvider: E2 }, import_react72.default.createElement(Ns, { ...a ?? {} }, import_react72.default.createElement(js, { ...u ?? {} }, import_react72.default.createElement(no, null, import_react72.default.createElement(Ao, { mutationMode: C2.mutationMode, warnWhenUnsavedChanges: C2.warnWhenUnsavedChanges, syncWithLocation: C2.syncWithLocation, Title: D, undoableTimeout: C2.undoableTimeout, catchAll: R2, DashboardPage: c, LoginPage: m2, Layout: f2, Sider: h, Footer: w, Header: L, OffLayoutArea: x2, hasDashboard: !!c, liveMode: C2.liveMode, onLiveEvent: y2, options: C2 }, import_react72.default.createElement(Go, null, import_react72.default.createElement(k, null, g2, !b && import_react72.default.createElement(dn, null), import_react72.default.createElement(go, null))))))))))))))))));
}, "Refine");
var ys = o(({ notification: e }) => {
  let t = _(), { notificationDispatch: r } = Xe(), { open: s } = Ie(), [n, i2] = (0, import_react76.useState)(), a = o(() => {
    if (e.isRunning === true && (e.seconds === 0 && e.doMutation(), e.isSilent || s == null || s({ key: `${e.id}-${e.resource}-notification`, type: "progress", message: t("notifications.undoable", { seconds: Vt(e.seconds) }, `You have ${Vt(e.seconds)} seconds to undo`), cancelMutation: e.cancelMutation, undoableTimeout: Vt(e.seconds) }), e.seconds > 0)) {
      n && clearTimeout(n);
      let u = setTimeout(() => {
        r({ type: "DECREASE_NOTIFICATION_SECOND", payload: { id: e.id, seconds: e.seconds, resource: e.resource } });
      }, 1e3);
      i2(u);
    }
  }, "cancelNotification");
  return (0, import_react76.useEffect)(() => {
    a();
  }, [e]), null;
}, "UndoableQueue");
var yu = o(({ children: e, Layout: t, Sider: r, Header: s, Title: n, Footer: i2, OffLayoutArea: a }) => {
  let { Layout: u, Footer: d3, Header: c, Sider: p3, Title: m2, OffLayoutArea: R2 } = oe();
  return import_react77.default.createElement(t ?? u, { Sider: r ?? p3, Header: s ?? c, Footer: i2 ?? d3, Title: n ?? m2, OffLayoutArea: a ?? R2 }, e, import_react77.default.createElement(gu, null));
}, "LayoutWrapper");
var gu = o(() => {
  let { Prompt: e } = ne(), t = _(), { warnWhen: r, setWarnWhen: s } = Ht(), n = o((i2) => (i2.preventDefault(), i2.returnValue = t("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."), i2.returnValue), "warnWhenListener");
  return (0, import_react77.useEffect)(() => (r && window.addEventListener("beforeunload", n), window.removeEventListener("beforeunload", n)), [r]), import_react77.default.createElement(e, { when: r, message: t("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."), setWarnWhen: s });
}, "UnsavedPrompt");
function Tu({ redirectOnFail: e = true, appendCurrentPathToQuery: t = true, children: r, fallback: s, loading: n }) {
  var L;
  let i2 = Y(), a = q(), u = !!(i2 != null && i2.isProvided), d3 = !!(i2 != null && i2.isLegacy), c = a === "legacy", p3 = ye(), m2 = me(), { useLocation: R2 } = ne(), g2 = R2(), { isFetching: T2, isSuccess: E2, data: { authenticated: D, redirectTo: f2 } = {} } = Dr({ v3LegacyAuthProviderCompatible: d3 }), h = u ? d3 ? E2 : D : true;
  if (!u)
    return import_react78.default.createElement(import_react78.default.Fragment, null, r ?? null);
  if (T2)
    return import_react78.default.createElement(import_react78.default.Fragment, null, n ?? null);
  if (h)
    return import_react78.default.createElement(import_react78.default.Fragment, null, r ?? null);
  {
    if (typeof s < "u")
      return import_react78.default.createElement(import_react78.default.Fragment, null, s ?? null);
    let w = d3 ? typeof e == "string" ? e : "/login" : typeof e == "string" ? e : f2, x2 = `${c ? g2 == null ? void 0 : g2.pathname : p3.pathname}`.replace(/(\?.*|#.*)$/, "");
    if (w)
      if (c) {
        let y2 = t ? `?to=${encodeURIComponent(x2)}` : "";
        return import_react78.default.createElement(Pu, { to: `${w}${y2}` });
      } else
        return import_react78.default.createElement(Ru, { config: { to: w, query: t ? { to: (L = p3.params) != null && L.to ? p3.params.to : m2({ to: x2, options: { keepQuery: true }, type: "path" }) } : void 0, type: "replace" } });
    return null;
  }
}
o(Tu, "Authenticated");
var Ru = o(({ config: e }) => {
  let t = me();
  return import_react78.default.useEffect(() => {
    t(e);
  }, [t, e]), null;
}, "Redirect");
var Pu = o(({ to: e }) => {
  let { replace: t } = le();
  return import_react78.default.useEffect(() => {
    t(e);
  }, [t, e]), null;
}, "RedirectLegacy");
var go = o(() => {
  let { useLocation: e } = ne(), { checkAuth: t } = se(), r = e();
  return (0, import_react79.useEffect)(() => {
    t == null || t().catch(() => false);
  }, [r == null ? void 0 : r.pathname]), null;
}, "RouteChangeHandler");
var Cu = o(({ resource: e, action: t, params: r, fallback: s, onUnauthorized: n, children: i2, ...a }) => {
  let { resource: u, id: d3, action: c } = G(e), { identifier: p3 } = G(), R2 = o(() => {
    let f2 = (r == null ? void 0 : r.id) ?? d3;
    return e && e !== p3 ? r == null ? void 0 : r.id : f2;
  }, "getDefaultId")(), g2 = e ?? (u == null ? void 0 : u.name), T2 = t ?? c ?? "", E2 = r ?? { id: R2, resource: u }, { data: D } = Ks({ resource: g2, action: T2, params: E2 });
  return (0, import_react80.useEffect)(() => {
    n && (D == null ? void 0 : D.can) === false && n({ resource: g2, action: T2, reason: D == null ? void 0 : D.reason, params: E2 });
  }, [D == null ? void 0 : D.can]), D != null && D.can ? import_react80.default.isValidElement(i2) ? import_react80.default.cloneElement(i2, a) : import_react80.default.createElement(import_react80.default.Fragment, null, i2) : (D == null ? void 0 : D.can) === false ? import_react80.default.createElement(import_react80.default.Fragment, null, s ?? null) : null;
}, "CanAccess");
var yn = [`
    .bg-top-announcement {
        border-bottom: 1px solid rgba(71, 235, 235, 0.15);
        background: radial-gradient(
                218.19% 111.8% at 0% 0%,
                rgba(71, 235, 235, 0.1) 0%,
                rgba(71, 235, 235, 0.2) 100%
            ),
            #14141f;
    }
    `, `
    .top-announcement-mask {
        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);
        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);
        mask-repeat: repeat;
        -webkit-mask-repeat: repeat;
        background: rgba(71, 235, 235, 0.25);
    }
    `, `
    .banner {
        display: flex;
        @media (max-width: 1000px) {
            display: none;
        }
    }`, `
    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {
        text-decoration: none;
        z-index: 9;
    }
    `, `
    @keyframes top-announcement-glow {
        0% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }
    `];
var vu = "If you find Refine useful, you can contribute to its growth by giving it a star on GitHub";
var Du = o(() => ((0, import_react81.useEffect)(() => {
  let e = document.createElement("style");
  document.head.appendChild(e), yn.forEach((t) => {
    var r;
    return (r = e.sheet) == null ? void 0 : r.insertRule(t, e.sheet.cssRules.length);
  });
}, []), import_react81.default.createElement("div", { className: "banner bg-top-announcement", style: { width: "100%", height: "48px" } }, import_react81.default.createElement("div", { style: { position: "relative", display: "flex", justifyContent: "center", alignItems: "center", paddingLeft: "200px", width: "100%", maxWidth: "100vw", height: "100%", borderBottom: "1px solid #47ebeb26" } }, import_react81.default.createElement("div", { className: "top-announcement-mask", style: { position: "absolute", left: 0, top: 0, width: "100%", height: "100%", borderBottom: "1px solid #47ebeb26" } }, import_react81.default.createElement("div", { style: { position: "relative", width: "960px", height: "100%", display: "flex", justifyContent: "space-between", margin: "0 auto" } }, import_react81.default.createElement("div", { style: { width: "calc(50% - 300px)", height: "100%", position: "relative" } }, import_react81.default.createElement(Ar, { style: { animationDelay: "1.5s", position: "absolute", top: "2px", right: "220px" }, id: "1" }), import_react81.default.createElement(Ar, { style: { animationDelay: "1s", position: "absolute", top: "8px", right: "100px", transform: "rotate(180deg)" }, id: "2" }), import_react81.default.createElement(gn, { style: { position: "absolute", right: "10px" }, id: "3" })), import_react81.default.createElement("div", { style: { width: "calc(50% - 300px)", height: "100%", position: "relative" } }, import_react81.default.createElement(Ar, { style: { animationDelay: "2s", position: "absolute", top: "6px", right: "180px", transform: "rotate(180deg)" }, id: "4" }), import_react81.default.createElement(Ar, { style: { animationDelay: "0.5s", transitionDelay: "1.3s", position: "absolute", top: "2px", right: "40px" }, id: "5" }), import_react81.default.createElement(gn, { style: { position: "absolute", right: "-70px" }, id: "6" })))), import_react81.default.createElement(Lu, { text: vu })))), "GitHubBanner");
var Lu = o(({ text: e }) => import_react81.default.createElement("a", { className: "gh-link", href: "https://s.refine.dev/github-support", target: "_blank", rel: "noreferrer", style: { position: "absolute", height: "100%", padding: "0 60px", display: "flex", flexWrap: "nowrap", whiteSpace: "nowrap", justifyContent: "center", alignItems: "center", backgroundImage: "linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)" } }, import_react81.default.createElement("div", { style: { color: "#fff", display: "flex", flexDirection: "row", gap: "8px" } }, import_react81.default.createElement("span", { style: { display: "flex", flexDirection: "row", justifyContent: "center", alignItems: "center" } }, "⭐️"), import_react81.default.createElement("span", { className: "text", style: { fontSize: "16px", lineHeight: "24px" } }, e), import_react81.default.createElement("span", { style: { display: "flex", flexDirection: "row", justifyContent: "center", alignItems: "center" } }, "⭐️"))), "Text");
var Ar = o(({ style: e, ...t }) => import_react81.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 80, height: 40, fill: "none", style: { opacity: 1, animation: "top-announcement-glow 1s ease-in-out infinite alternate", ...e } }, import_react81.default.createElement("circle", { cx: 40, r: 40, fill: `url(#${t.id}-a)`, fillOpacity: 0.5 }), import_react81.default.createElement("defs", null, import_react81.default.createElement("radialGradient", { id: `${t.id}-a`, cx: 0, cy: 0, r: 1, gradientTransform: "matrix(0 40 -40 0 40 0)", gradientUnits: "userSpaceOnUse" }, import_react81.default.createElement("stop", { stopColor: "#47EBEB" }), import_react81.default.createElement("stop", { offset: 1, stopColor: "#47EBEB", stopOpacity: 0 })))), "GlowSmall");
var gn = o(({ style: e, ...t }) => import_react81.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 120, height: 48, fill: "none", ...t, style: { opacity: 1, animation: "top-announcement-glow 1s ease-in-out infinite alternate", ...e } }, import_react81.default.createElement("circle", { cx: 60, cy: 24, r: 60, fill: `url(#${t.id}-a)`, fillOpacity: 0.5 }), import_react81.default.createElement("defs", null, import_react81.default.createElement("radialGradient", { id: `${t.id}-a`, cx: 0, cy: 0, r: 1, gradientTransform: "matrix(0 60 -60 0 60 24)", gradientUnits: "userSpaceOnUse" }, import_react81.default.createElement("stop", { stopColor: "#47EBEB" }), import_react81.default.createElement("stop", { offset: 1, stopColor: "#47EBEB", stopOpacity: 0 })))), "GlowBig");
var Eu = o(({ status: e, elements: { success: t = import_react82.default.createElement(kr, { key: "autoSave.success", defaultMessage: "saved" }), error: r = import_react82.default.createElement(kr, { key: "autoSave.error", defaultMessage: "auto save failure" }), loading: s = import_react82.default.createElement(kr, { key: "autoSave.loading", defaultMessage: "saving..." }), idle: n = import_react82.default.createElement(kr, { key: "autoSave.idle", defaultMessage: "waiting for changes" }) } = {} }) => {
  switch (e) {
    case "success":
      return import_react82.default.createElement(import_react82.default.Fragment, null, t);
    case "error":
      return import_react82.default.createElement(import_react82.default.Fragment, null, r);
    case "loading":
      return import_react82.default.createElement(import_react82.default.Fragment, null, s);
    default:
      return import_react82.default.createElement(import_react82.default.Fragment, null, n);
  }
}, "AutoSaveIndicator");
var kr = o(({ key: e, defaultMessage: t }) => {
  let r = _();
  return import_react82.default.createElement("span", null, r(e, t));
}, "Message");

export {
  require_shim,
  useQueryClient,
  require_lib,
  er,
  tr,
  bo,
  S,
  Ct,
  We,
  vo,
  Mo,
  pr,
  Io,
  z,
  mr,
  fr,
  yr,
  Y,
  Ko,
  ze,
  Ht,
  Wr,
  Mn,
  oe,
  Dt,
  Rr,
  zo,
  Pr,
  An,
  xr,
  Lt,
  hr,
  Cr,
  br,
  kn,
  Fn,
  Qn,
  Vn,
  _r,
  vr,
  Gt,
  Yr,
  Zr,
  eo,
  Dr,
  $n,
  ae,
  Wn,
  to,
  ee,
  $t,
  Wt,
  ro,
  Er,
  zt,
  ca,
  ao,
  ya,
  Pa,
  xa,
  ba,
  La,
  re,
  Sa,
  it,
  q,
  io,
  ye,
  G,
  Us,
  Ce,
  at,
  Is,
  iP,
  Ve,
  Xe,
  Ie,
  ie,
  Ne,
  si,
  _,
  ci,
  qP,
  fx,
  ks,
  mt,
  me,
  co,
  le,
  oh,
  lh,
  gh,
  Mi,
  ft,
  ne,
  ut,
  Ks,
  nC,
  RC,
  AC,
  Be,
  ab,
  xb,
  ji,
  J,
  Ji,
  Kr,
  qi,
  yo,
  ru,
  pu,
  ys,
  yu,
  Tu,
  go,
  Cu,
  Du,
  Eu
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.4.1
  https://github.com/mholt/PapaParse
  License: MIT
  *)
*/
//# sourceMappingURL=chunk-TYZGX2V6.js.map
