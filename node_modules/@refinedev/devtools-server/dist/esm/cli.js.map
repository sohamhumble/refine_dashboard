{"version":3,"sources":["../../src/index.ts","../../src/serve-client.ts","../../src/serve-ws.ts","../../src/constants.ts","../../src/reload-on-change.ts","../../src/setup-server.ts","../../src/create-db.ts","../../src/serve-api.ts","../../src/feed/get-feed.ts","../../src/packages/get-installed-package-data.ts","../../src/packages/get-installed-package-json-path.ts","../../src/packages/get-packages-from-package-json.ts","../../src/packages/get-changelog.ts","../../src/packages/get-documentation.ts","../../src/packages/get-all-packages.ts","../../src/packages/get-available-packages.ts","../../src/packages/update-package.ts","../../src/packages/get-latest-package-data.ts","../../src/project-id/get-project-id-from-package-json.ts","../../src/project-id/set-project-id-to-package-json.ts","../../src/project-id/set-project-id-to-refine-component.ts","../../src/project-id/update-project-id.ts","../../src/serve-proxy.ts","../../src/serve-open-in-editor.ts","../../src/cli.ts"],"sourcesContent":["import express from \"express\";\n\nimport { cyanBright, bold } from \"chalk\";\n\nimport { DevtoolsEvent, receive, send } from \"@refinedev/devtools-shared\";\n\nimport { serveClient } from \"./serve-client\";\nimport { serveWs } from \"./serve-ws\";\nimport { reloadOnChange } from \"./reload-on-change\";\nimport { setupServer } from \"./setup-server\";\nimport { Activity, createDb } from \"./create-db\";\nimport { serveApi } from \"./serve-api\";\nimport { SERVER_PORT } from \"./constants\";\nimport { serveProxy } from \"./serve-proxy\";\nimport { serveOpenInEditor } from \"./serve-open-in-editor\";\n\ntype Options = {\n    projectPath?: string;\n};\n\nexport const server = async ({ projectPath = process.cwd() }: Options = {}) => {\n    const app = express();\n    const ws = serveWs();\n\n    const db = createDb();\n\n    ws.on(\"connection\", (client) => {\n        // Initialize development client\n        receive(client as any, DevtoolsEvent.DEVTOOLS_INIT, (data) => {\n            if (db.connectedApp) {\n                // send client the devtools client url if already connected\n                send(client as any, DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED, {\n                    url: db.connectedApp,\n                });\n            } else {\n                db.connectedApp = data.url;\n                db.clientWs = client;\n\n                ws.clients.forEach((c) => {\n                    send(c as any, DevtoolsEvent.DEVTOOLS_CONNECTED_APP, {\n                        url: db.connectedApp,\n                    });\n                });\n            }\n        });\n\n        receive(client as any, DevtoolsEvent.ACTIVITY, (data) => {\n            // match by identifier, if identifier is same, update data instead of pushing\n            const index = db.activities.findIndex(\n                (activity) => activity.identifier === data.identifier,\n            );\n\n            const record: Activity = {\n                ...data,\n                createdAt: Date.now(),\n                updatedAt: Date.now(),\n            };\n\n            if (index > -1) {\n                record.createdAt = db.activities[index].createdAt;\n\n                db.activities[index] = record;\n            } else {\n                db.activities.push(record);\n            }\n\n            ws.clients.forEach((c) => {\n                send(c as any, DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE, {\n                    updatedActivities: [record],\n                });\n            });\n        });\n\n        receive(\n            client as any,\n            DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR,\n            ({ name }) => {\n                ws.clients.forEach((c) => {\n                    send(\n                        c as any,\n                        DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,\n                        {\n                            name,\n                        },\n                    );\n                });\n            },\n        );\n\n        receive(client as any, DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS, () => {\n            ws.clients.forEach((c) => {\n                send(c as any, DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN, {});\n            });\n        });\n\n        // close connected app if client disconnects\n        client.on(\"close\", (_, reason) => {\n            if (__DEVELOPMENT__) {\n                console.log(\"Client disconnected\", ws.clients.size);\n            }\n\n            if (db.clientWs) {\n                if (!ws.clients.has(db.clientWs)) {\n                    db.clientWs = null;\n                    db.connectedApp = null;\n\n                    db.activities = [];\n\n                    ws.clients.forEach((c) => {\n                        send(\n                            c as any,\n                            DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP,\n                            {\n                                url: db.connectedApp,\n                            },\n                        );\n                    });\n                }\n            }\n        });\n\n        if (__DEVELOPMENT__) {\n            console.log(\"Client connected\", ws.clients.size);\n        }\n    });\n\n    reloadOnChange(ws);\n    serveClient(app);\n    setupServer(app);\n    serveApi(app, db);\n    serveProxy(app);\n    serveOpenInEditor(app, projectPath);\n};\n","import express from \"express\";\nimport path from \"path\";\n\nimport type { Express } from \"express\";\n\nexport const serveClient = (app: Express) => {\n    app.use(express.static(path.join(__dirname, \"client\")));\n\n    app.use((req, res, next) => {\n        if (req.path.startsWith(\"/api\")) {\n            return next();\n        }\n        if (req.path.startsWith(\"/open-in-editor\")) {\n            return next();\n        }\n        res.status(200).sendFile(path.join(__dirname + \"/client/index.html\"));\n    });\n};\n","import WebSocket from \"ws\";\nimport { SERVER_PORT, WS_PORT } from \"./constants\";\nimport { DevtoolsEvent, send } from \"@refinedev/devtools-shared\";\nimport { bold, cyanBright } from \"chalk\";\n\nexport const serveWs = () => {\n    const ws = new WebSocket.Server({ port: WS_PORT }).on(\n        \"error\",\n        (error: any) => {\n            if (error?.code === \"EADDRINUSE\") {\n                console.error(\n                    `\\n${cyanBright.bold(\"\\u2717 \")}${bold(\n                        \"refine devtools\",\n                    )} failed to start. Port ${WS_PORT} is already in use, please make sure no other devtools server is running\\n`,\n                );\n            } else {\n                console.error(\n                    `\\n${cyanBright.bold(\"\\u2717 \")}${bold(\n                        \"error from refine devtools\",\n                    )}`,\n                    error,\n                );\n            }\n            process.exit(1);\n        },\n    );\n\n    ws.on(\"connection\", (client) => {\n        if (__DEVELOPMENT__) {\n            console.log(`WebSocket server started on PORT ${WS_PORT}`);\n        }\n        // send client the devtools client url\n        send(client as any, DevtoolsEvent.DEVTOOLS_HANDSHAKE, {\n            url: `http://localhost:${SERVER_PORT}`,\n        });\n\n        client.on(\"close\", () => {\n            client.terminate();\n        });\n    });\n\n    process.on(\"SIGTERM\", () => {\n        ws.close(() => {\n            if (__DEVELOPMENT__) {\n                console.log(\"Process terminated\");\n            }\n        });\n    });\n\n    return ws;\n};\n","export const DEFAULT_WS_PORT = 5002;\nexport const DEFAULT_SERVER_PORT = 5001;\n\nexport const WS_PORT = DEFAULT_WS_PORT;\nexport const SERVER_PORT = DEFAULT_SERVER_PORT;\n\nexport const REFINE_API_URL = __DEVELOPMENT__\n    ? \"https://develop.cloud.refine.dev\"\n    : \"https://cloud2.refine.dev\";\n\nexport const FEED_MD_URL =\n    \"https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md\";\n","import fs from \"fs\";\nimport path from \"path\";\nimport { debounce } from \"lodash\";\nimport { DevtoolsEvent, send } from \"@refinedev/devtools-shared\";\n\nimport type { Server } from \"ws\";\nimport { OPEN } from \"ws\";\n\nexport const reloadOnChange = __DEVELOPMENT__\n    ? (ws: Server) => {\n          const reloadEmitter = debounce(() => {\n              setTimeout(() => {\n                  ws.clients.forEach((client) => {\n                      if (client.readyState === OPEN) {\n                          console.log(\"Reloading connected client...\");\n                          send(client as any, DevtoolsEvent.RELOAD, {});\n                      }\n                  });\n              }, 800);\n          }, 1000);\n\n          const watcher = fs.watch(\n              path.resolve(__dirname, \"client\"),\n              { recursive: true },\n              reloadEmitter,\n          );\n\n          process.on(\"SIGTERM\", () => {\n              watcher.close();\n          });\n      }\n    : () => 0;\n","import type { Express } from \"express\";\nimport { SERVER_PORT } from \"./constants\";\nimport { bold, cyanBright } from \"chalk\";\n\nexport const setupServer = (app: Express) => {\n    const server = app\n        .listen(SERVER_PORT, () => {\n            if (__DEVELOPMENT__) {\n                console.log(`Server started on PORT ${SERVER_PORT}`);\n            }\n        })\n        .on(\"error\", (error: any) => {\n            if (error?.code === \"EADDRINUSE\") {\n                console.error(\n                    `\\n${cyanBright.bold(\"\\u2717 \")}${bold(\n                        \"refine devtools\",\n                    )} failed to start. Port ${SERVER_PORT} is already in use, please make sure no other devtools server is running\\n`,\n                );\n            } else {\n                console.error(\n                    `\\n${cyanBright.bold(\"\\u2717 \")}${bold(\n                        \"error from refine devtools\",\n                    )}`,\n                    error,\n                );\n            }\n            process.exit(1);\n        })\n        .on(\"listening\", () => {\n            console.log(\n                `\\n${cyanBright.bold(\"\\u2713 \")}${bold(\n                    \"refine devtools\",\n                )} is running at port ${cyanBright.bold(SERVER_PORT)}\\n`,\n            );\n        });\n\n    process.on(\"SIGTERM\", () => {\n        server.close(() => {\n            if (__DEVELOPMENT__) {\n                console.log(\"Process terminated\");\n            }\n        });\n    });\n};\n","import {\n    DevtoolsEvent,\n    DevtoolsEventPayloads,\n} from \"@refinedev/devtools-shared\";\nimport type { WebSocket } from \"ws\";\n\nexport type Activity =\n    DevtoolsEventPayloads[DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE][\"updatedActivities\"][number];\n\nexport type Data = {\n    connectedApp: null | string;\n    clientWs: null | WebSocket;\n    devtoolsWsClients: WebSocket[];\n    appWsClients: WebSocket[];\n    activities: Activity[];\n    packages: string[];\n};\n\nconst defaultData: Data = {\n    connectedApp: null,\n    clientWs: null,\n    // connections\n    devtoolsWsClients: [],\n    appWsClients: [],\n    // data\n    activities: [],\n    packages: [],\n};\n\nexport const createDb = (): Data => {\n    return {\n        ...defaultData,\n    };\n};\n","import type { Express } from \"express\";\nimport { json } from \"express\";\nimport uniq from \"lodash/uniq\";\nimport {\n    AvailablePackageType,\n    Feed,\n    PackageType,\n} from \"@refinedev/devtools-shared\";\n\nimport { Data } from \"./create-db\";\nimport { getFeed } from \"./feed/get-feed\";\nimport { getAllPackages } from \"./packages/get-all-packages\";\nimport { getAvailablePackages } from \"./packages/get-available-packages\";\nimport { updatePackage } from \"./packages/update-package\";\nimport { getLatestPackageData } from \"./packages/get-latest-package-data\";\nimport { getProjectIdFromPackageJson } from \"./project-id/get-project-id-from-package-json\";\nimport { updateProjectId } from \"./project-id/update-project-id\";\n\nexport const serveApi = (app: Express, db: Data) => {\n    app.use(\"/api\", json());\n\n    app.get(\"/api/connected-app\", (_, res) => {\n        res.json({ url: db.connectedApp });\n    });\n\n    app.get(\"/api/activities\", (req, res) => {\n        const { offset = 0, limit = db.activities.length } = req.query;\n\n        res.setHeader(\"x-total-count\", db.activities.length);\n\n        res.json({\n            data: db.activities.slice(Number(offset), Number(limit)),\n        });\n    });\n\n    app.get(\"/api/activities/reset\", (_, res) => {\n        db.activities = [];\n        res.json({ success: true });\n    });\n\n    app.get(\"/api/unique-trace-items\", (req, res) => {\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header(\n            \"Access-Control-Allow-Headers\",\n            \"Origin, X-Requested-With, Content-Type, Accept\",\n        );\n\n        const traceItems = db.activities.flatMap(\n            (activity) =>\n                activity.trace?.map((t) => t.function).filter(Boolean) ?? [],\n        ) as string[];\n        const uniqueTraceItems = uniq(traceItems);\n\n        res.setHeader(\"x-total-count\", uniqueTraceItems.length);\n\n        res.json({ data: uniqueTraceItems });\n    });\n\n    let cachedInstalledPackages: PackageType[] | null = null;\n    app.get(\"/api/installed-packages\", async (req, res) => {\n        const { force } = req.query ?? {};\n\n        if (!cachedInstalledPackages || force) {\n            cachedInstalledPackages = await getAllPackages();\n        }\n\n        res.header(\"x-total-count\", `${cachedInstalledPackages.length}`);\n\n        res.json({ data: cachedInstalledPackages });\n    });\n\n    let cachedAvailablePackages: AvailablePackageType[] | null = null;\n    app.get(\"/api/available-packages\", async (_, res) => {\n        if (!cachedAvailablePackages) {\n            cachedAvailablePackages = await getAvailablePackages();\n        }\n\n        res.header(\"x-total-count\", `${cachedAvailablePackages.length}`);\n\n        res.json({ data: cachedAvailablePackages });\n    });\n\n    const cachedLatestPackages = new Map<string, any>();\n    app.get(\"/api/packages/:packageName/latest\", async (req, res) => {\n        const { packageName } = req.params ?? {};\n\n        if (!packageName) {\n            res.status(400).json({ error: \"Package name is required\" });\n            return;\n        }\n\n        if (!cachedLatestPackages.has(packageName)) {\n            const latest = await getLatestPackageData(packageName);\n            cachedLatestPackages.set(packageName, latest);\n        }\n\n        return res.json({ data: cachedLatestPackages.get(packageName) });\n    });\n\n    app.post(\"/api/packages/install\", async (req, res) => {\n        const { packages } = req.body ?? {};\n\n        if (packages?.length === 0) {\n            res.status(400).json({ error: \"Package name is required\" });\n            return;\n        }\n\n        const success = await updatePackage(packages as string[]);\n\n        if (success) {\n            cachedInstalledPackages = null;\n            cachedAvailablePackages = null;\n            res.status(200).json({ success: true });\n        } else {\n            res.status(400).json({\n                success: false,\n                error: \"Failed to update package\",\n            });\n        }\n    });\n\n    let cachedFeed: Feed | null = null;\n    app.get(\"/api/feed\", async (req, res) => {\n        if (!cachedFeed) {\n            cachedFeed = await getFeed();\n        }\n\n        res.header(\"x-total-count\", `${cachedFeed.length}`);\n\n        res.json({ data: cachedFeed });\n    });\n\n    app.get(\"/api/project-id/status\", async (_, res) => {\n        const projectId = await getProjectIdFromPackageJson();\n\n        if (projectId) {\n            res.status(200).json({ projectId });\n            return;\n        } else if (projectId === false) {\n            res.status(404).json({ projectId: null });\n            return;\n        } else {\n            res.status(500).json({ projectId: null });\n            return;\n        }\n    });\n\n    app.post(\"/api/project-id/update\", async (req, res) => {\n        const { projectId } = req.body ?? {};\n\n        if (!projectId) {\n            res.status(400).json({ error: \"Project ID is required\" });\n            return;\n        }\n\n        const success = await updateProjectId(projectId);\n\n        if (success) {\n            res.status(200).json({ success: true });\n            return;\n        } else {\n            res.status(500).json({\n                success: false,\n                error: \"Failed to update project ID\",\n            });\n            return;\n        }\n    });\n};\n","import fetch from \"node-fetch\";\nimport matter from \"gray-matter\";\nimport { marked } from \"marked\";\nimport sanitizeHtml from \"sanitize-html\";\n\nimport { Feed, FeedSection } from \"@refinedev/devtools-shared\";\n\nimport { FEED_MD_URL } from \"src/constants\";\n\nconst splitSections = (feed: string) => {\n    const sections = feed.split(\"---section\");\n\n    return sections.slice(1).map((section) => `---section${section}`);\n};\n\nconst contentToHtml = (content: string) => {\n    const renderer = new marked.Renderer();\n    renderer.link = function (...args) {\n        const out = marked.Renderer.prototype.link.apply(this, args);\n        return out.replace(\n            /^<a/,\n            '<a target=\"_blank\" rel=\"noopener noreferrer\"',\n        );\n    };\n\n    const html = marked(content, {\n        renderer,\n    });\n\n    return sanitizeHtml(html, {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat([\"img\"]),\n        allowedAttributes: {\n            ...sanitizeHtml.defaults.allowedAttributes,\n            img: [\"src\"],\n        },\n    });\n};\n\nconst parseSection = (section: string): FeedSection => {\n    const parsed = matter(section.replace(\"---section\", \"---\"));\n\n    return {\n        ...parsed.data,\n        content: contentToHtml(parsed.content),\n    } as FeedSection;\n};\n\nconst fetchFeed = async () => {\n    try {\n        const response = await fetch(FEED_MD_URL);\n\n        return response.text();\n    } catch (_) {\n        return \"\";\n    }\n};\n\nexport const getFeed = async (): Promise<Feed> => {\n    try {\n        const rawContent = await fetchFeed();\n        const rawSections = splitSections(rawContent);\n        const sections = rawSections.map(parseSection);\n\n        return sections;\n    } catch (e) {\n        return [];\n    }\n};\n","import fs from \"fs\";\nimport { getInstalledPackageJSONPath } from \"./get-installed-package-json-path\";\n\nexport const getInstalledPackageData = async (packageName: string) => {\n    try {\n        const packagePath = await getInstalledPackageJSONPath(packageName);\n\n        if (!packagePath) {\n            return null;\n        }\n\n        const parsed = JSON.parse(\n            fs.readFileSync(packagePath, { encoding: \"utf-8\" }),\n        );\n\n        return {\n            name: parsed.name,\n            version: parsed.version,\n            description: parsed.description,\n        };\n    } catch (e) {\n        return null;\n    }\n};\n","import path from \"path\";\nimport globby from \"globby\";\n\nexport const getInstalledPackageJSONPath = async (packageName: string) => {\n    try {\n        const filesFromGlobbySearch = await globby(\n            `node_modules/${packageName}/package.json`,\n            {\n                onlyFiles: true,\n            },\n        );\n\n        let fileFromModule: string | null = null;\n\n        try {\n            const pkgJsonPath = require.resolve(\n                path.join(packageName, \"package.json\"),\n            );\n            if (pkgJsonPath) {\n                fileFromModule = pkgJsonPath;\n            }\n        } catch (err) {\n            //\n        }\n\n        return (\n            [\n                ...filesFromGlobbySearch,\n                ...(fileFromModule ? [fileFromModule] : []),\n            ][0] ?? null\n        );\n    } catch (err) {\n        return null;\n    }\n};\n","import path from \"path\";\nimport { readJSON } from \"fs-extra\";\n\nexport const getPackagesFromPackageJSON = async (\n    projectPath: string = process.cwd(),\n) => {\n    const packageJson = await readJSON(path.join(projectPath, \"package.json\"), {\n        encoding: \"utf-8\",\n    });\n\n    const refinePackages = Object.keys(packageJson.dependencies).filter(\n        (packageName) => packageName.startsWith(\"@refinedev/\"),\n    );\n\n    return refinePackages;\n};\n","export const getChangelog = (packageName: string) => {\n    return packageName.replace(\"@refinedev/\", \"https://c.refine.dev/\");\n};\n","export const getDocumentation = (packageName: string) => {\n    return \"https://refine.dev/docs/api-reference/general-concepts/\";\n};\n","import { PackageType } from \"@refinedev/devtools-shared\";\nimport { getInstalledPackageData } from \"./get-installed-package-data\";\nimport { getPackagesFromPackageJSON } from \"./get-packages-from-package-json\";\nimport { getChangelog } from \"./get-changelog\";\nimport { getDocumentation } from \"./get-documentation\";\n\nexport const getAllPackages = async (projectPath?: string) => {\n    try {\n        const refinePackages = await getPackagesFromPackageJSON(projectPath);\n        const installedVersions = await Promise.all(\n            refinePackages.map(async (packageName) => {\n                const currentInfo = await getInstalledPackageData(packageName);\n\n                return {\n                    name: packageName,\n                    currentVersion: currentInfo?.version,\n                    description: currentInfo?.description,\n                    changelog: getChangelog(packageName),\n                    documentation: getDocumentation(packageName),\n                } as PackageType;\n            }),\n        );\n\n        return installedVersions;\n    } catch (error) {\n        return [];\n    }\n};\n","import { AvailablePackageType } from \"@refinedev/devtools-shared\";\nimport dedent from \"dedent\";\nimport { getPackagesFromPackageJSON } from \"./get-packages-from-package-json\";\n\nexport const AVAILABLE_PACKAGES: AvailablePackageType[] = [\n    {\n        name: \"@refinedev/ably\",\n        description: \"Ably integration for refine\",\n        install: `npm install @refinedev/ably`,\n        usage: dedent(\n            `\n            import { liveProvider, Ably } from \"@refinedev/ably\";\n\n            export const ablyClient = new Ably.Realtime(\"YOUR_API_TOKEN\");\n\n            const App = () => {\n                return (\n                    <Refine\n                        liveProvider={liveProvider(ablyClient)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n        `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/airtable\",\n        description: \"Airtable integration for refine\",\n        install: `npm install @refinedev/airtable`,\n        usage: dedent(\n            `\n            import dataProvider from \"@refinedev/airtable\";\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(\"API_KEY\", \"BASE_ID\")}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/antd\",\n        description: \"Ant Design integration for refine\",\n        install: `npm install @refinedev/antd antd`,\n        usage: dedent(\n            `\n            import { ThemedLayoutV2 } from \"@refinedev/antd\";\n\n            import \"@refinedev/antd/dist/reset.css\";\n\n            const App = () => {\n                return (\n                    <Refine\n                        /* ... */\n                    >\n                        <ThemedLayoutV2>\n                            {/* ... */}\n                        </ThemedLayoutV2>\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/appwrite\",\n        description: \"Appwrite integration for refine\",\n        install: `npm install @refinedev/appwrite`,\n        usage: dedent(\n            `\n            import { dataProvider, liveProvider, Account, Appwrite, Storage } from \"@refinedev/appwrite\";\n\n            const appwriteClient = new Appwrite();\n            appwriteClient.setEndpoint(\"API_URL\").setProject(\"PROJECT_ID\");\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(appwriteClient, { databaseId: \"default\" })}\n                        liveProvider={liveProvider(appwriteClient, { databaseId: \"default\" })}\n                        /* ... */\n                    >\n                        <ThemedLayout>\n                            {/* ... */}\n                        </ThemedLayout>\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/chakra-ui\",\n        description: \"Chakra UI integration for refine\",\n        install: `npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion`,\n        usage: dedent(\n            `\n            import { ThemedLayoutV2 } from \"@refinedev/chakra-ui\";\n            import { ChakraProvider } from \"@chakra-ui/react\";\n\n            const App = () => {\n                return (\n                        <ChakraProvider>\n                        <Refine\n                            /* ... */\n                        >\n                            <ThemedLayoutV2>\n                                {/* ... */}\n                            </ThemedLayoutV2>\n                        </Refine>\n                    </ChakraProvider>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/graphql\",\n        description: \"GraphQL integration for refine\",\n        install: `npm install @refinedev/graphql`,\n        usage: dedent(\n            `\n            import dataProvider, { GraphQLClient } from \"@refinedev/graphql\";\n\n            const client = new GraphQLClient(\"YOUR_API_URL\");\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(client)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/hasura\",\n        description: \"GraphQL integration for refine\",\n        install: `npm install @refinedev/hasura`,\n        usage: dedent(\n            `\n            import dataProvider, { GraphQLClient } from \"@refinedev/hasura\";\n\n            const client = new GraphQLClient(\"HASURA_API_URL\", {\n                headers: {\n                    \"x-hasura-role\": \"public\",\n                },\n            });\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(client)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/inferencer\",\n        description: \"Auto generate views based on your APIs with refine\",\n        install: `npm install @refinedev/inferencer`,\n        usage: dedent(\n            `\n        import { AntdInferencer } from \"@refinedev/inferencer/antd\";\n\n        const App = () => {\n            return (\n                <Refine\n                    /* ... */\n                >\n                    <AntdInferencer action=\"list\" resource=\"posts\" />\n                </Refine>\n            );\n        };\n        `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/kbar\",\n        description: \"Command palette integration with kbar for refine\",\n        install: `npm install @refinedev/kbar`,\n        usage: dedent(\n            `\n            import { RefineKbar, RefineKbarProvider } from \"@refinedev/kbar\";\n\n            const App = () => {\n                return (\n                    <RefineKbarProvider>\n                        <Refine\n                            /* ... */\n                        >\n                            <RefineKbar />\n                        </Refine>\n                    </RefineKbarProvider>\n                );\n            };\n        `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/mantine\",\n        description: \"Mantine UI integration for refine\",\n        install: `npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons`,\n        usage: dedent(\n            `\n            import { ThemedLayoutV2 } from \"@refinedev/mantine\";\n            import { MantineProvider } from \"@mantine/core\";\n\n            const App = () => {\n                return (\n                    <MantineProvider>\n                        <Refine\n                            /* ... */\n                        >\n                            <ThemedLayoutV2>\n                                {/* ... */}\n                            </ThemedLayoutV2>\n                        </Refine>\n                    </MantineProvider>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/medusa\",\n        description: \"Medusa store integration for refine\",\n        install: `npm install @refinedev/medusa`,\n        usage: dedent(\n            `\n            import dataProvider, { authProvider } from \"@refinedev/medusa\";\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(\"API_URL\")}\n                        authProvider={authProvider(\"API_URL\")}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/mui\",\n        description: \"Material UI integration for refine\",\n        install: `npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form`,\n        usage: dedent(\n            `\n            import { ThemedLayoutV2 } from \"@refinedev/mui\";\n\n            import CssBaseline from \"@mui/material/CssBaseline\";\n            import GlobalStyles from \"@mui/material/GlobalStyles\";\n            import { ThemeProvider } from \"@mui/material/styles\";\n\n            const App = () => {\n                return (\n                    <ThemeProvider>\n                        <CssBaseline />\n                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: \"auto\" } }} />\n                        <Refine\n                            /* ... */\n                        >\n                            <ThemedLayoutV2>\n                                {/* ... */}\n                            </ThemedLayoutV2>\n                        </Refine>\n                    </ThemeProvider>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/nestjs-query\",\n        description: \"NestJS Query data provider integration for refine\",\n        install: `npm install @refinedev/nestjs-query graphql-ws`,\n        usage: dedent(\n            `\n            import dataProvider, {\n                GraphQLClient,\n                liveProvider,\n            } from \"@refinedev/nestjs-query\";\n\n            import { createClient } from \"graphql-ws\";\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(new GraphQLClient( \"API_URL\" ))}\n                        liveProvider={liveProvider(createClient({ url: \"WS_URL\" }))}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/nestjsx-crud\",\n        description: \"NestJSX CRUD data provider integration for refine\",\n        install: `npm install @refinedev/nestjsx-crud`,\n        usage: dedent(\n            `\n            import dataProvider from \"@refinedev/nestjsx-crud\";\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(\"API_URL\")}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/nhost\",\n        description:\n            \"NHost data provider and live provider integrations for refine\",\n        install: `npm install @refinedev/nhost @nhost/nhost-js @nhost/react-auth`,\n        usage: dedent(\n            `\n            import { NhostClient } from \"@nhost/nhost-js\";\n            import dataProvider, { graphqlWS } from \"@refinedev/nhost\";\n\n            const nhost = new NhostClient({ backendUrl: \"NHOST_API_URL\" });\n\n            const gqlWsClient = graphqlWS.createClient({\n                url: WS_URL,\n                connectionParams: () => ({\n                    headers: {\n                        Authorization: \\`Bearer \\${nhost.auth.getJWTToken()}\\`,\n                    },\n                })\n            });\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(nhost)}\n                        liveProvider={liveProvider(gqlWsClient)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/react-hook-form\",\n        description: \"React Hook Form integration for refine\",\n        install: `npm install @refinedev/react-hook-form react-hook-form`,\n        usage: dedent(\n            `\n            import { useForm } from \"@refinedev/react-hook-form\";\n\n            const EditPost = () => {\n                const {\n                    register,\n                    handleSubmit,\n                    formState,\n                    refineCore,\n                } = useForm({\n                    refineCoreProps: {\n                        resource: \"posts\",\n                        id: \"1\",\n                    },\n                });\n\n                return /* ... */\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/react-table\",\n        description: \"Tanstack React Table integration for refine\",\n        install: `npm install @refinedev/react-table @tanstack/react-table`,\n        usage: dedent(\n            `\n            import { useTable } from \"@refinedev/react-table\";\n\n            import { ColumnDef, flexRender } from \"@tanstack/react-table\";\n\n            const EditPost = () => {\n                const columns = React.useMemo<ColumnDef<IPost>[]>(\n                    () => [\n                        {\n                            id: \"id\",\n                            header: \"ID\",\n                            accessorKey: \"id\",\n                        },\n                        {\n                            id: \"title\",\n                            header: \"Title\",\n                            accessorKey: \"title\",\n                            meta: {\n                                filterOperator: \"contains\",\n                            },\n                        },\n                ], []);\n\n                const tableInstance = useTable({\n                    columns,\n                    refineCoreProps: {\n                        resource: \"posts\",\n                    }\n                });\n\n                return /* ... */\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/simple-rest\",\n        description: \"Data provider integration for REST APIs with refine\",\n        install: `npm install @refinedev/simple-rest`,\n        usage: dedent(\n            `\n            import dataProvider from \"@refinedev/simple-rest\";\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(\"API_URL\")}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/supabase\",\n        description:\n            \"Data provider and live provider integrations for Supabase with refine\",\n        install: `npm install @refinedev/supabase`,\n        usage: dedent(\n            `\n            import { dataProvider, liveProvider, createClient } from \"@refinedev/supabase\";\n\n            const supabaseClient = createClient(\"SUPABASE_URL\", \"SUPABASE_KEY\");\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={dataProvider(supabaseClient)}\n                        liveProvider={liveProvider(supabaseClient)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/strapi\",\n        description: \"Strapi integration of refine\",\n        install: `npm install @refinedev/strapi axios`,\n        usage: dedent(\n            `\n            import { DataProvider, AuthHelper } from \"@refinedev/strapi\";\n\n            const axiosInstance = axios.create();\n            const strapiAuthHelper = AuthHelper(\"API_URL\");\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={DataProvider(\"API_URL\", axiosInstance)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/strapi-v4\",\n        description: \"StrapiV4 integration of refine\",\n        install: `npm install @refinedev/strapi-v4 axios`,\n        usage: dedent(\n            `\n            import { DataProvider, AuthHelper } from \"@refinedev/strapi-v4\";\n\n            const axiosInstance = axios.create();\n            const strapiAuthHelper = AuthHelper(\"API_URL\");\n\n            const App = () => {\n                return (\n                    <Refine\n                        dataProvider={DataProvider(\"API_URL\", axiosInstance)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n    {\n        name: \"@refinedev/strapi-graphql\",\n        description: \"Strapi GraphQL integration of refine\",\n        install: `npm install @refinedev/strapi-graphql`,\n        usage: dedent(\n            `\n            import dataProvider, { GraphQLClient } from \"@refinedev/strapi-graphql\";\n\n            const client = new GraphQLClient(\"API_URL\");\n\n            const App = () => {\n                return (\n                    <Refine\n                    dataProvider={dataProvider(client)}\n                        /* ... */\n                    >\n                        {/* ... */}\n                    </Refine>\n                );\n            };\n            `.trim(),\n        ),\n    },\n];\n\nexport const getAvailablePackages = async (projectPath?: string) => {\n    const installedRefinePackages = await getPackagesFromPackageJSON(\n        projectPath,\n    );\n\n    return AVAILABLE_PACKAGES.filter(\n        (p) => !installedRefinePackages.includes(p.name),\n    );\n};\n","import preferredPM from \"preferred-pm\";\nimport execa from \"execa\";\n\nexport const updatePackage = async (\n    packages: string[],\n    projectPath: string = process.cwd(),\n) => {\n    try {\n        const { name: pm } = (await preferredPM(projectPath)) ?? {\n            name: \"npm\",\n        };\n\n        const { failed } = await execa(pm ?? \"npm\", [\n            \"install\",\n            ...packages.map((p) => `${p}@latest`),\n        ]);\n\n        return !failed;\n    } catch (error) {\n        return false;\n    }\n};\n","import execa from \"execa\";\n\nexport const getLatestPackageData = async (\n    packageName: string,\n): Promise<{ name: string; version?: string }> => {\n    try {\n        const { stdout } = await execa(\"npm\", [\n            \"view\",\n            packageName,\n            \"name\",\n            \"version\",\n            \"--json\",\n        ]);\n        const parsed = JSON.parse(stdout);\n\n        return parsed;\n    } catch (e) {\n        return { name: packageName };\n    }\n};\n","import { readJSON } from \"fs-extra\";\nimport path from \"path\";\n\nexport const getProjectIdFromPackageJson = async (\n    projectPath = process.cwd(),\n) => {\n    try {\n        const packageJson = await readJSON(\n            path.join(projectPath, \"package.json\"),\n            {\n                encoding: \"utf-8\",\n            },\n        );\n\n        const projectId = packageJson?.refine?.projectId as string;\n\n        if (projectId) {\n            return projectId;\n        }\n\n        return false;\n    } catch (e) {\n        return null;\n    }\n};\n","import execa from \"execa\";\n\nexport const setProjectIdToPackageJson = async (\n    projectId: string,\n    projectPath = process.cwd(),\n) => {\n    try {\n        execa.sync(\"npm\", [\"pkg\", \"set\", `refine.projectId=${projectId}`], {\n            cwd: projectPath,\n        });\n        return true;\n    } catch (e) {\n        return null;\n    }\n};\n","import execa from \"execa\";\nimport path from \"path\";\n\nexport const setProjectIdToRefineComponent = async (\n    projectId: string,\n    projectPath = process.cwd(),\n) => {\n    try {\n        const jscodeshiftExecutable = require.resolve(\".bin/jscodeshift\");\n\n        const execution = execa.sync(\n            jscodeshiftExecutable,\n            [\n                \"./\",\n                \"--extensions=ts,tsx,js,jsx\",\n                \"--parser=tsx\",\n                `--transform=${path.resolve(\n                    path.join(\n                        __dirname,\n                        \"..\",\n                        \"src\",\n                        \"project-id\",\n                        \"transform.ts\",\n                    ),\n                )}`,\n                `--ignore-pattern=**/.cache/**`,\n                `--ignore-pattern=**/node_modules/**`,\n                `--ignore-pattern=**/build/**`,\n                `--ignore-pattern=**/dist/**`,\n                `--ignore-pattern=**/.next/**`,\n                `--__projectId=${projectId}`,\n            ],\n            {\n                cwd: projectPath,\n                timeout: 1000 * 10,\n            },\n        );\n\n        if (execution.stderr) {\n            console.error(execution.stderr);\n        }\n    } catch (error) {\n        console.error(error);\n    }\n    return;\n};\n","import { setProjectIdToPackageJson } from \"./set-project-id-to-package-json\";\nimport { setProjectIdToRefineComponent } from \"./set-project-id-to-refine-component\";\n\nexport const updateProjectId = async (\n    projectId: string,\n    projectPath = process.cwd(),\n) => {\n    try {\n        await Promise.all([\n            setProjectIdToPackageJson(projectId, projectPath),\n            setProjectIdToRefineComponent(projectId, projectPath),\n        ]);\n\n        return true;\n    } catch (_) {\n        return false;\n    }\n};\n","import { readJSON, writeJSON } from \"fs-extra\";\nimport { FrontendApi } from \"@ory/client\";\nimport { createProxyMiddleware, Options } from \"http-proxy-middleware\";\nimport path from \"path\";\nimport { REFINE_API_URL, SERVER_PORT } from \"./constants\";\nimport { getProjectIdFromPackageJson } from \"./project-id/get-project-id-from-package-json\";\n\nimport type { Express, RequestHandler } from \"express\";\n\nlet currentProjectId: string | null | false = null;\nconst projectIdAppender: RequestHandler = async (req, res, next) => {\n    if (!currentProjectId) {\n        currentProjectId = await getProjectIdFromPackageJson();\n    }\n\n    if (currentProjectId) {\n        req.headers[\"x-project-id\"] = currentProjectId;\n    }\n\n    next();\n};\n\nconst restream: Options[\"onProxyReq\"] = function (proxyReq, req) {\n    if (req.body) {\n        const bodyData = JSON.stringify(req.body);\n        // incase if content-type is application/x-www-form-urlencoded -> we need to change to application/json\n        proxyReq.setHeader(\"Content-Type\", \"application/json\");\n        proxyReq.setHeader(\"Content-Length\", Buffer.byteLength(bodyData));\n        // stream the content\n        proxyReq.write(bodyData);\n    }\n};\n\nconst tokenize = async (token: string) => {\n    try {\n        const ORY_URL = `${REFINE_API_URL}/.auth`;\n\n        const ory = new FrontendApi({\n            isJsonMime: () => true,\n            basePath: ORY_URL,\n            baseOptions: {\n                withCredentials: true,\n            },\n        });\n\n        const { data } = await ory.toSession({\n            xSessionToken: token,\n            tokenizeAs: \"jwt_template_1\",\n        });\n\n        return data?.tokenized;\n    } catch (err) {\n        //\n    }\n\n    return undefined;\n};\n\nconst saveAuth = async (token?: string, jwt?: string) => {\n    try {\n        writeJSON(path.join(__dirname, \"..\", \".persist.json\"), {\n            token: token,\n            jwt: jwt,\n        });\n    } catch (error) {\n        //\n    }\n};\n\nconst loadAuth = async () => {\n    try {\n        const persist = await readJSON(\n            path.join(__dirname, \"..\", \".persist.json\"),\n        );\n        return persist as { token?: string; jwt?: string };\n    } catch (error) {\n        //\n    }\n\n    return {\n        token: undefined,\n        jwt: undefined,\n    };\n};\n\nconst handleLogoutToken: (\n    token?: string,\n) => NonNullable<Options[\"onProxyReq\"]> = (token) => {\n    return function (proxyReq, req) {\n        if (req.url.includes(\"self-service/logout/api\")) {\n            const bodyData = JSON.stringify({\n                session_token: token,\n            });\n            proxyReq.setHeader(\"Content-Length\", Buffer.byteLength(bodyData));\n            // stream the content\n            proxyReq.write(bodyData);\n        }\n    };\n};\n\nconst handleSignInCallbacks: (\n    onToken: (token?: string, jwt?: string) => void,\n) => NonNullable<Options[\"onProxyRes\"]> = (onToken) => {\n    return function (proxyRes, req, res) {\n        let body = \"\";\n        proxyRes.on(\"data\", (chunk) => {\n            body += chunk;\n        });\n        proxyRes.on(\"end\", () => {\n            let sessionToken: string | undefined = undefined;\n            try {\n                const parsed = JSON.parse(body);\n                sessionToken = parsed.session_token;\n            } catch (err) {\n                //\n            }\n            if (!sessionToken) {\n                if (body?.includes?.(\"an+account+with+the+same+identifier\")) {\n                    res.redirect(\n                        \"/after-login?error=An+account+with+the+same+identifier+exists+already\",\n                    );\n                    return;\n                }\n                res.redirect(\"/after-login?error=Invalid-session-token\");\n                return;\n            }\n\n            // After grabbing the session_token, convert it to JWT, then redirect to /after-login\n            tokenize(sessionToken).then((tokenized) => {\n                onToken(sessionToken, tokenized ?? \"\");\n                res.redirect(`/after-login`);\n            });\n        });\n    };\n};\n\nexport const serveProxy = async (app: Express) => {\n    let { token, jwt } = await loadAuth();\n\n    const authProxy = createProxyMiddleware({\n        target: REFINE_API_URL,\n        // secure: false,\n        changeOrigin: true,\n        pathRewrite: { \"^/api/.auth\": \"/.auth\" },\n        cookieDomainRewrite: {\n            \"refine.dev\": \"\",\n        },\n        logLevel: __DEVELOPMENT__ ? \"debug\" : \"silent\",\n        headers: {\n            \"auth-base-url-rewrite\": `http://localhost:${SERVER_PORT}/api/.auth`,\n        },\n        selfHandleResponse: true,\n        onProxyReq: (proxyReq, req, ...rest) => {\n            if (token) {\n                proxyReq.setHeader(\"X-Session-Token\", token ?? \"\");\n\n                handleLogoutToken(token)(proxyReq, req, ...rest);\n            }\n        },\n        onProxyRes: (proxyRes, req, res) => {\n            if (req.url.includes(\"self-service/methods/oidc/callback\")) {\n                return handleSignInCallbacks((_token, _jwt) => {\n                    token = _token;\n                    jwt = _jwt;\n                    saveAuth(token, jwt);\n                })(proxyRes, req, res);\n            } else {\n                res.writeHead(proxyRes.statusCode || 500, proxyRes.headers);\n                proxyRes.pipe(res, { end: true });\n            }\n        },\n    });\n\n    app.use(\"/api/.auth\", authProxy);\n\n    const refineApiProxy = createProxyMiddleware({\n        target: REFINE_API_URL,\n        secure: false,\n        changeOrigin: true,\n        logLevel: __DEVELOPMENT__ ? \"debug\" : \"silent\",\n        pathRewrite: { \"^/api/.refine\": \"/.refine\" },\n        onProxyReq: (proxyReq, ...rest) => {\n            if (jwt) {\n                proxyReq.setHeader(\"Authorization\", `Bearer ${jwt}`);\n                proxyReq.removeHeader(\"cookie\");\n            }\n\n            restream(proxyReq, ...rest);\n        },\n    });\n\n    app.use(\"/api/.refine\", projectIdAppender, refineApiProxy);\n};\n","import { Express } from \"express\";\nimport path from \"path\";\n\nexport const serveOpenInEditor = (app: Express, basePath: string) => {\n    app.get(\"/open-in-editor/*\", (req, res) => {\n        const { line, column } = req.query;\n\n        const filePath = req.path.replace(\"/open-in-editor\", \"\");\n\n        const vscodeUrl = `vscode://file/${path.join(basePath, filePath)}?${\n            line ? `line=${line}` : \"\"\n        }${column ? `&column=${column}` : \"\"}`;\n\n        res.redirect(vscodeUrl);\n    });\n};\n","#!/usr/bin/env node\nimport { server } from \"./index\";\n\nserver();\n"],"mappings":"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","names":["express","DevtoolsEvent","receive","send","express","path","serveClient","app","req","res","next","WebSocket","REFINE_API_URL","FEED_MD_URL","DevtoolsEvent","send","bold","cyanBright","serveWs","ws","WebSocket","error","client","reloadOnChange","bold","cyanBright","setupServer","app","server","error","defaultData","createDb","json","uniq","fetch","matter","marked","sanitizeHtml","splitSections","feed","section","contentToHtml","content","renderer","marked","args","html","sanitizeHtml","parseSection","parsed","matter","fetchFeed","fetch","FEED_MD_URL","getFeed","rawContent","fs","path","globby","getInstalledPackageJSONPath","packageName","filesFromGlobbySearch","globby","fileFromModule","pkgJsonPath","__require","path","getInstalledPackageData","packageName","packagePath","getInstalledPackageJSONPath","parsed","fs","path","readJSON","getPackagesFromPackageJSON","projectPath","packageJson","packageName","getChangelog","packageName","getDocumentation","packageName","getAllPackages","projectPath","refinePackages","getPackagesFromPackageJSON","packageName","currentInfo","getInstalledPackageData","getChangelog","getDocumentation","dedent","AVAILABLE_PACKAGES","dedent","getAvailablePackages","projectPath","installedRefinePackages","getPackagesFromPackageJSON","p","preferredPM","execa","updatePackage","packages","projectPath","pm","failed","p","execa","getLatestPackageData","packageName","stdout","readJSON","path","getProjectIdFromPackageJson","projectPath","_a","packageJson","projectId","execa","setProjectIdToPackageJson","projectId","projectPath","execa","path","setProjectIdToRefineComponent","projectId","projectPath","jscodeshiftExecutable","__require","execution","execa","path","error","updateProjectId","projectId","projectPath","setProjectIdToPackageJson","setProjectIdToRefineComponent","serveApi","app","db","json","_","res","req","offset","limit","traceItems","activity","_a","t","uniqueTraceItems","uniq","cachedInstalledPackages","force","getAllPackages","cachedAvailablePackages","getAvailablePackages","cachedLatestPackages","packageName","latest","getLatestPackageData","packages","updatePackage","cachedFeed","getFeed","projectId","getProjectIdFromPackageJson","updateProjectId","readJSON","writeJSON","FrontendApi","createProxyMiddleware","path","currentProjectId","projectIdAppender","req","res","next","getProjectIdFromPackageJson","restream","proxyReq","bodyData","tokenize","token","ORY_URL","REFINE_API_URL","ory","FrontendApi","data","saveAuth","jwt","writeJSON","path","loadAuth","readJSON","handleLogoutToken","handleSignInCallbacks","onToken","proxyRes","body","chunk","_a","sessionToken","tokenized","serveProxy","app","authProxy","createProxyMiddleware","rest","_token","_jwt","refineApiProxy","path","serveOpenInEditor","app","basePath","req","res","line","column","filePath","vscodeUrl","server","projectPath","app","express","ws","serveWs","db","createDb","client","receive","DevtoolsEvent","data","send","c","index","activity","record","name","_","reason","reloadOnChange","serveClient","setupServer","serveApi","serveProxy","serveOpenInEditor","server"]}