{"version":3,"sources":["../../src/bindings.tsx","../../src/convert-to-number-if-possible.ts","../../src/refine-routes.tsx","../../src/create-resource-routes.tsx","../../src/navigate-to-resource.tsx","../../src/unsaved-changes-notifier.tsx","../../src/use-prompt-workaround.ts","../../src/catch-all-navigate.tsx","../../src/document-title-handler.tsx","../../src/use-document-title.ts"],"sourcesContent":["import React, { ComponentProps } from \"react\";\nimport {\n    GoConfig,\n    ParseResponse,\n    RouterBindings,\n    matchResourceFromRoute,\n    ResourceContext,\n} from \"@refinedev/core\";\nimport { useCallback, useContext } from \"react\";\nimport { parse, stringify } from \"qs\";\nimport {\n    useNavigate,\n    useLocation,\n    Link,\n    matchPath,\n    useParams,\n} from \"react-router-dom\";\nimport { convertToNumberIfPossible } from \"./convert-to-number-if-possible\";\n\nexport const stringifyConfig = {\n    addQueryPrefix: true,\n    skipNulls: true,\n    arrayFormat: \"indices\" as const,\n    encode: false,\n    encodeValuesOnly: true,\n};\n\nexport const routerBindings: RouterBindings = {\n    go: () => {\n        const { search: existingSearch, hash: existingHash } = useLocation();\n        const navigate = useNavigate();\n\n        const fn = useCallback(\n            ({\n                to,\n                type,\n                query,\n                hash,\n                options: { keepQuery, keepHash } = {},\n            }: GoConfig) => {\n                /** Construct query params */\n                const urlQuery = {\n                    ...(keepQuery &&\n                        existingSearch &&\n                        parse(existingSearch, { ignoreQueryPrefix: true })),\n                    ...query,\n                };\n\n                if (urlQuery.to) {\n                    urlQuery.to = encodeURIComponent(`${urlQuery.to}`);\n                }\n\n                const hasUrlQuery = Object.keys(urlQuery).length > 0;\n\n                /** Get hash */\n                const urlHash = `#${(\n                    hash ||\n                    (keepHash && existingHash) ||\n                    \"\"\n                ).replace(/^#/, \"\")}`;\n\n                const hasUrlHash = urlHash.length > 1;\n\n                const urlTo = to || \"\";\n\n                const fullPath = `${urlTo}${\n                    hasUrlQuery ? stringify(urlQuery, stringifyConfig) : \"\"\n                }${hasUrlHash ? urlHash : \"\"}`;\n\n                if (type === \"path\") {\n                    return fullPath;\n                }\n\n                /** Navigate to the url */\n                return navigate(fullPath, {\n                    replace: type === \"replace\",\n                });\n            },\n            [existingHash, existingSearch, navigate],\n        );\n\n        return fn;\n    },\n    back: () => {\n        const navigate = useNavigate();\n\n        const fn = useCallback(() => {\n            navigate(-1);\n        }, [navigate]);\n\n        return fn;\n    },\n    parse: () => {\n        let params = useParams();\n        const { pathname, search } = useLocation();\n        const { resources } = useContext(ResourceContext);\n\n        const { resource, action, matchedRoute } = React.useMemo(() => {\n            return matchResourceFromRoute(pathname, resources);\n        }, [resources, pathname]);\n\n        // params is empty when useParams is used in a component that is not a child of a Route\n        if (Object.entries(params).length === 0 && matchedRoute) {\n            params = matchPath(matchedRoute, pathname)?.params || {};\n        }\n\n        const fn = useCallback(() => {\n            const parsedSearch = parse(search, { ignoreQueryPrefix: true });\n\n            const combinedParams = {\n                ...params,\n                ...parsedSearch,\n            };\n\n            const response: ParseResponse = {\n                ...(resource && { resource }),\n                ...(action && { action }),\n                ...(params?.id && { id: decodeURIComponent(params.id) }),\n                // ...(params?.action && { action: params.action }), // lets see if there is a need for this\n                pathname,\n                params: {\n                    ...combinedParams,\n                    current: convertToNumberIfPossible(\n                        combinedParams.current as string,\n                    ) as number | undefined,\n                    pageSize: convertToNumberIfPossible(\n                        combinedParams.pageSize as string,\n                    ) as number | undefined,\n                    to: combinedParams.to\n                        ? decodeURIComponent(combinedParams.to as string)\n                        : undefined,\n                },\n            };\n\n            return response;\n        }, [pathname, search, params, resource, action]);\n\n        return fn;\n    },\n    Link: React.forwardRef<\n        HTMLAnchorElement,\n        ComponentProps<NonNullable<RouterBindings[\"Link\"]>>\n    >(function RefineLink(props, ref) {\n        return <Link {...props} ref={ref} />;\n    }),\n};\n","export const convertToNumberIfPossible = (value: string | undefined) => {\n    if (typeof value === \"undefined\") {\n        return value;\n    }\n    const num = Number(value);\n    if (`${num}` === value) {\n        return num;\n    }\n    return value;\n};\n","import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\nimport { createResourceRoutes } from \"./create-resource-routes\";\nimport { Routes } from \"react-router-dom\";\n\ntype RefineRoutesProps = {\n    children?: (routes: JSX.Element[]) => JSX.Element;\n};\n\nexport const RefineRoutes = ({ children }: RefineRoutesProps) => {\n    const { resources: resourcesFromContext } = useResource();\n\n    const routes = React.useMemo(() => {\n        return createResourceRoutes(resourcesFromContext);\n    }, [resourcesFromContext]);\n\n    return children ? children(routes) : <Routes>{routes}</Routes>;\n};\n","import React from \"react\";\nimport { Action, ResourceProps } from \"@refinedev/core\";\n\nimport { Route } from \"react-router-dom\";\n\nexport const createResourcePathWithAction = (\n    resource: ResourceProps,\n    action: Action,\n) => {\n    const { name, list, create, show, edit } = resource;\n\n    if (typeof list === \"string\" && action === \"list\") {\n        return list;\n    }\n    if (typeof list === \"object\" && action === \"list\") {\n        return list.path;\n    }\n    if (typeof create === \"string\" && action === \"create\") {\n        return create;\n    }\n    if (typeof create === \"object\" && action === \"create\") {\n        return create.path;\n    }\n    if (typeof show === \"string\" && action === \"show\") {\n        return show;\n    }\n    if (typeof show === \"object\" && action === \"show\") {\n        return show.path;\n    }\n    if (typeof edit === \"string\" && action === \"edit\") {\n        return edit;\n    }\n    if (typeof edit === \"object\" && action === \"edit\") {\n        return edit.path;\n    }\n\n    /**\n     * Default path fallback\n     */\n    const nameSegment = `/${name}`;\n    const actionSegment = `${\n        [\"edit\", \"create\", \"clone\", \"show\"].includes(action) ? action : \"\"\n    }`;\n    const idSegment = `${\n        [\"edit\", \"show\", \"clone\"].includes(action) ? \":id\" : \"\"\n    }`;\n\n    return [nameSegment, actionSegment, idSegment].filter(Boolean).join(\"/\");\n};\n\nexport const createResourceRoutes = (resources: ResourceProps[]) => {\n    const routes = resources.flatMap((resource) => {\n        const actions: {\n            action: Action;\n            element: React.ComponentType<any>;\n            path: string;\n        }[] = [];\n\n        ([\"list\", \"show\", \"edit\", \"create\"] as const).forEach((action) => {\n            const item = resource[action];\n            if (typeof item !== \"undefined\" && typeof item !== \"string\") {\n                const element =\n                    typeof item === \"function\" ? item : item.component;\n                const path = createResourcePathWithAction(resource, action);\n\n                actions.push({ action, element: element, path });\n                if (action === \"create\") {\n                    actions.push({\n                        action: \"clone\",\n                        element: element,\n                        path,\n                    });\n                }\n            }\n        });\n\n        return actions.map(({ action, element: Component, path }) => {\n            const element = <Component />;\n\n            return (\n                <Route\n                    key={`${action}-${path}`}\n                    path={path}\n                    element={element}\n                />\n            );\n        });\n    });\n\n    return routes;\n};\n","import { useResource, useGetToPath } from \"@refinedev/core\";\nimport React, { PropsWithChildren } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\ntype NavigateToResourceProps = PropsWithChildren<{\n    resource?: string;\n    meta?: Record<string, unknown>;\n}>;\n\nexport const NavigateToResource: React.FC<NavigateToResourceProps> = ({\n    resource: resourceProp,\n    meta,\n}) => {\n    const getToPath = useGetToPath();\n    const { resource, resources } = useResource(resourceProp);\n\n    const toResource = resource || resources.find((r) => r.list);\n\n    if (toResource) {\n        const path = getToPath({\n            resource: toResource,\n            action: \"list\",\n            meta,\n        });\n\n        if (path) {\n            return <Navigate to={path} />;\n        }\n\n        console.warn(\"No resource is found to navigate to.\");\n        return null;\n    } else {\n        console.warn(\"No resource is found to navigate to.\");\n        return null;\n    }\n};\n","import React from \"react\";\nimport { useTranslate, useWarnAboutChange } from \"@refinedev/core\";\nimport { usePrompt } from \"./use-prompt-workaround\";\nimport { useLocation } from \"react-router-dom\";\n\ntype UnsavedChangesNotifierProps = {\n    translationKey?: string;\n    message?: string;\n};\n\nexport const UnsavedChangesNotifier: React.FC<UnsavedChangesNotifierProps> = ({\n    translationKey = \"warnWhenUnsavedChanges\",\n    message = \"Are you sure you want to leave? You have unsaved changes.\",\n}) => {\n    const translate = useTranslate();\n    const { pathname } = useLocation();\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    React.useEffect(() => {\n        return () => setWarnWhen?.(false);\n    }, [pathname]);\n\n    const warnMessage = React.useMemo(() => {\n        return translate(translationKey, message);\n    }, [translationKey, message, translate]);\n\n    usePrompt(warnMessage, warnWhen, () => {\n        setWarnWhen?.(false);\n    });\n\n    return null;\n};\n","/**\n * `useBlocker` and `usePrompt` is no longer part of react-router-dom for the routers other than `DataRouter`.\n *\n * The previous workaround (<v6.4) was to use `block` function in `UNSAFE_NavigationContext` which is now removed.\n *\n * We're using a workaround from the gist https://gist.github.com/MarksCode/64e438c82b0b2a1161e01c88ca0d0355 with some modifications\n * Thanks to @MarksCode(https://github.com/MarksCode) for the workaround.\n */\n\nimport React from \"react\";\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\nfunction useConfirmExit(confirmExit: () => boolean, when = true) {\n    const { navigator } = React.useContext(NavigationContext);\n\n    React.useEffect(() => {\n        if (!when) {\n            return;\n        }\n\n        const go = navigator.go;\n        const push = navigator.push;\n\n        navigator.push = (...args: Parameters<typeof push>) => {\n            const result = confirmExit();\n            if (result !== false) {\n                push(...args);\n            }\n        };\n\n        navigator.go = (...args: Parameters<typeof go>) => {\n            const result = confirmExit();\n            if (result !== false) {\n                go(...args);\n            }\n        };\n\n        return () => {\n            navigator.push = push;\n            navigator.go = go;\n        };\n    }, [navigator, confirmExit, when]);\n}\n\nexport function usePrompt(\n    message: string,\n    when = true,\n    onConfirm?: () => void,\n    legacy = false,\n) {\n    const warnWhenListener = React.useCallback(\n        (e: { preventDefault: () => void; returnValue: string }) => {\n            e.preventDefault();\n\n            e.returnValue = message;\n\n            return e.returnValue;\n        },\n        [message],\n    );\n\n    React.useEffect(() => {\n        if (when && !legacy) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return () => {\n            window.removeEventListener(\"beforeunload\", warnWhenListener);\n        };\n    }, [warnWhenListener, when, legacy]);\n\n    const confirmExit = React.useCallback(() => {\n        const confirm = window.confirm(message);\n        if (confirm && onConfirm) {\n            onConfirm();\n        }\n        return confirm;\n    }, [message]);\n\n    useConfirmExit(confirmExit, when);\n}\n","import React from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\n\n/**\n * A component that will navigate to the given path with `to` query parameter included with the current location.\n */\nexport const CatchAllNavigate: React.FC<{ to: string }> = ({ to }) => {\n    const { pathname, search } = useLocation();\n\n    const queryValue = `${pathname}${search}`;\n\n    const query =\n        queryValue.length > 1 ? `?to=${encodeURIComponent(queryValue)}` : \"\";\n\n    return <Navigate to={`${to}${query}`} />;\n};\n","import {\n    Action,\n    IResourceItem,\n    useParsed,\n    useTranslate,\n    generateDefaultDocumentTitle,\n    useUserFriendlyName,\n} from \"@refinedev/core\";\nimport React, { useLayoutEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\ntype Props = {\n    handler?: (options: {\n        resource?: IResourceItem;\n        action?: Action;\n        params?: Record<string, string | undefined>;\n        pathname?: string;\n        autoGeneratedTitle: string;\n    }) => string;\n};\n\nexport function DocumentTitleHandler({ handler }: Props) {\n    const location = useLocation();\n    const { action, id, params, pathname, resource } = useParsed();\n    const translate = useTranslate();\n    const getUserFriendlyName = useUserFriendlyName();\n\n    const identifier = resource?.identifier ?? resource?.name;\n    const resourceName =\n        resource?.label ??\n        resource?.meta?.label ??\n        getUserFriendlyName(\n            identifier,\n            action === \"list\" ? \"plural\" : \"singular\",\n        );\n\n    useLayoutEffect(() => {\n        const autoGeneratedTitle = generateDefaultDocumentTitle(\n            translate,\n            resource!,\n            action,\n            id + \"\",\n            resourceName,\n        );\n        if (handler) {\n            document.title = handler({\n                action,\n                resource,\n                params,\n                pathname,\n                autoGeneratedTitle,\n            });\n        } else {\n            document.title = autoGeneratedTitle;\n        }\n    }, [location]);\n\n    return <></>;\n}\n","import { useTranslate } from \"@refinedev/core\";\nimport { useEffect } from \"react\";\n\ntype Title = string | { i18nKey: string };\n\nexport const useDocumentTitle = (title?: Title) => {\n    const translate = useTranslate();\n\n    useEffect(() => {\n        if (!title) return;\n\n        if (typeof title === \"string\") {\n            document.title = translate(title);\n        } else {\n            document.title = translate(title.i18nKey);\n        }\n    }, [title]);\n\n    return (title: Title) => {\n        if (typeof title === \"string\") {\n            document.title = translate(title);\n        } else {\n            document.title = translate(title.i18nKey);\n        }\n    };\n};\n"],"mappings":"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","names":["React","matchResourceFromRoute","ResourceContext","useCallback","useContext","parse","stringify","useNavigate","useLocation","Link","matchPath","useParams","convertToNumberIfPossible","value","num","stringifyConfig","routerBindings","existingSearch","existingHash","useLocation","navigate","useNavigate","useCallback","to","type","query","hash","keepQuery","keepHash","urlQuery","parse","hasUrlQuery","urlHash","hasUrlHash","fullPath","stringify","_a","params","useParams","pathname","search","resources","useContext","ResourceContext","resource","action","matchedRoute","React","matchResourceFromRoute","matchPath","parsedSearch","combinedParams","convertToNumberIfPossible","props","ref","Link","React","useResource","React","Route","createResourcePathWithAction","resource","action","name","list","create","show","edit","nameSegment","actionSegment","idSegment","createResourceRoutes","resources","actions","item","element","path","Component","Routes","RefineRoutes","children","resourcesFromContext","useResource","routes","React","createResourceRoutes","useResource","useGetToPath","React","Navigate","NavigateToResource","resourceProp","meta","getToPath","resource","resources","toResource","r","path","React","useTranslate","useWarnAboutChange","React","NavigationContext","useConfirmExit","confirmExit","when","navigator","go","push","args","usePrompt","message","onConfirm","legacy","warnWhenListener","e","confirm","useLocation","UnsavedChangesNotifier","translationKey","message","translate","useTranslate","pathname","warnWhen","setWarnWhen","useWarnAboutChange","React","warnMessage","usePrompt","React","Navigate","useLocation","CatchAllNavigate","to","pathname","search","queryValue","query","useParsed","useTranslate","generateDefaultDocumentTitle","useUserFriendlyName","React","useLayoutEffect","useLocation","DocumentTitleHandler","handler","_a","location","action","id","params","pathname","resource","translate","getUserFriendlyName","identifier","resourceName","autoGeneratedTitle","useTranslate","useEffect","useDocumentTitle","title","translate"]}