{"version":3,"sources":["../../src/dataProvider/index.ts","../../src/utils/index.ts","../../src/utils/graphql.ts","../../src/liveProvider/index.ts","../../src/index.ts"],"sourcesContent":["import { BaseRecord, DataProvider, LogicalFilter } from \"@refinedev/core\";\n\nimport camelcase from \"camelcase\";\nimport * as gql from \"gql-query-builder\";\nimport VariableOptions from \"gql-query-builder/build/VariableOptions\";\nimport { GraphQLClient } from \"graphql-request\";\nimport gqlTag from \"graphql-tag\";\nimport { singular } from \"pluralize\";\n\nimport { generateFilters, generatePaging, generateSorting } from \"../utils\";\n\nimport { getOperationFields, isMutation } from \"../utils/graphql\";\n\nconst dataProvider = (client: GraphQLClient): Required<DataProvider> => {\n    return {\n        getList: async ({ resource, pagination, sorters, filters, meta }) => {\n            const operation = camelcase(resource);\n\n            const paging = generatePaging(pagination || {});\n\n            const queryVariables: VariableOptions = {};\n\n            let query;\n            let variables;\n\n            if (meta?.gqlQuery) {\n                query = meta?.gqlQuery;\n\n                variables = {\n                    filter: filters\n                        ? generateFilters(filters as LogicalFilter[])\n                        : {},\n                    sorting: sorters ? generateSorting(sorters) : [],\n                    paging,\n                };\n            } else {\n                if (filters) {\n                    queryVariables[\"filter\"] = {\n                        type: camelcase(`${singular(resource)}Filter`, {\n                            pascalCase: true,\n                        }),\n                        required: true,\n                        value: generateFilters(filters as LogicalFilter[]),\n                    };\n                }\n\n                if (sorters) {\n                    queryVariables[\"sorting\"] = {\n                        type: camelcase(`${singular(resource)}Sort`, {\n                            pascalCase: true,\n                        }),\n                        required: true,\n                        list: [true],\n                        value: generateSorting(sorters),\n                    };\n                }\n\n                if (paging) {\n                    queryVariables[\"paging\"] = {\n                        type: \"OffsetPaging\",\n                        required: true,\n                        value: paging,\n                    };\n                }\n\n                const gqlQuery = gql.query({\n                    operation,\n                    fields: [{ nodes: meta?.fields }, \"totalCount\"],\n                    variables: queryVariables,\n                });\n\n                query = gqlQuery.query;\n                variables = gqlQuery.variables;\n            }\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation].nodes,\n                total: response[operation].totalCount,\n            };\n        },\n\n        getMany: async ({ resource, ids, meta }) => {\n            const operation = camelcase(resource);\n\n            if (meta?.gqlQuery) {\n                const response = await client.request<BaseRecord>(\n                    meta.gqlQuery,\n                    {\n                        filter: {\n                            id: { in: ids },\n                        },\n                    },\n                );\n\n                return {\n                    data: response[operation].nodes,\n                };\n            }\n\n            const { query, variables } = gql.query({\n                operation,\n                fields: [{ nodes: meta?.fields || [\"id\"] }],\n                variables: {\n                    filter: {\n                        type: camelcase(`${singular(resource)}Filter`, {\n                            pascalCase: true,\n                        }),\n                        required: true,\n                        value: {\n                            id: { in: ids },\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation].nodes,\n            };\n        },\n\n        create: async ({ resource, variables, meta }) => {\n            const operation = `createOne${camelcase(singular(resource), {\n                pascalCase: true,\n            })}`;\n\n            const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n            if (gqlOperation) {\n                const response = await client.request<BaseRecord>(\n                    gqlOperation,\n                    { input: { [camelcase(singular(resource))]: variables } },\n                );\n\n                return {\n                    data: response[operation],\n                };\n            }\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `CreateOne${camelcase(singular(resource), {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            [camelcase(singular(resource))]: variables,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation],\n            };\n        },\n\n        createMany: async ({ resource, variables, meta }) => {\n            const pascalResource = camelcase(resource, { pascalCase: true });\n            const operation = `createMany${pascalResource}`;\n\n            const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n            if (gqlOperation) {\n                const response = await client.request<BaseRecord>(\n                    gqlOperation,\n                    {\n                        input: {\n                            [camelcase(resource)]: variables,\n                        },\n                    },\n                );\n\n                return {\n                    data: response[operation],\n                };\n            }\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `CreateMany${camelcase(resource, {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            [camelcase(resource)]: variables,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation],\n            };\n        },\n        update: async ({ resource, id, variables, meta }) => {\n            const operation = `updateOne${camelcase(singular(resource), {\n                pascalCase: true,\n            })}`;\n\n            const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n            if (gqlOperation) {\n                const response = await client.request<BaseRecord>(\n                    gqlOperation,\n                    {\n                        input: {\n                            id,\n                            update: variables,\n                        },\n                    },\n                );\n\n                return {\n                    data: response[operation],\n                };\n            }\n\n            const { query, variables: queryVariables } = gql.mutation({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    input: {\n                        type: `UpdateOne${camelcase(singular(resource), {\n                            pascalCase: true,\n                        })}Input`,\n                        required: true,\n                        value: {\n                            id,\n                            update: variables,\n                        },\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation],\n            };\n        },\n        updateMany: async ({ resource, ids, variables, meta }) => {\n            const pascalResource = camelcase(resource, {\n                pascalCase: true,\n            });\n\n            const mutationOperation = `updateMany${pascalResource}`;\n\n            const mutation = gqlTag`\n                mutation UpdateMany${pascalResource}($input: UpdateMany${pascalResource}Input!) {\n                    ${mutationOperation}(input: $input) {\n                        updatedCount\n                    }\n                }\n            `;\n\n            await client.request<BaseRecord>(mutation, {\n                input: { filter: { id: { in: ids } }, update: variables },\n            });\n\n            const operation = camelcase(resource);\n\n            let query, queryVariables;\n\n            if (meta?.fields) {\n                const gqlQuery = gql.query({\n                    operation,\n                    fields: [{ nodes: meta?.fields || [\"id\"] }],\n                    variables: {\n                        filter: {\n                            type: camelcase(`${singular(resource)}Filter`, {\n                                pascalCase: true,\n                            }),\n                            required: true,\n                            value: {\n                                id: { in: ids },\n                            },\n                        },\n                    },\n                });\n                query = gqlQuery.query;\n                queryVariables = gqlQuery.variables;\n            } else {\n                query = gqlTag`\n                    query GetMany${pascalResource}($filter: ${singular(\n                    pascalResource,\n                )}Filter!) {\n                        ${operation}(filter: $filter) {\n                            nodes {\n                                id\n                            }\n                        }\n                    }\n                `;\n\n                queryVariables = {\n                    filter: { id: { in: ids } },\n                };\n            }\n\n            const response = await client.request<BaseRecord>(\n                query,\n                queryVariables,\n            );\n\n            return {\n                data: response[operation].nodes,\n            };\n        },\n        getOne: async ({ resource, id, meta }) => {\n            const operation = camelcase(singular(resource));\n\n            const gqlOperation = meta?.gqlQuery ?? meta?.gqlMutation;\n\n            if (gqlOperation) {\n                let query = gqlOperation;\n                const variables = { id };\n\n                if (isMutation(gqlOperation)) {\n                    const stringFields = getOperationFields(gqlOperation);\n\n                    query = gqlTag`\n                        query Get${camelcase(singular(resource), {\n                            pascalCase: true,\n                        })}($id: ID!) {\n                            ${operation}(id: $id) {\n                            ${stringFields}\n                            }\n                        }\n                    `;\n                }\n\n                const response = await client.request<BaseRecord>(\n                    query,\n                    variables,\n                );\n\n                return {\n                    data: response[operation],\n                };\n            }\n\n            const { query, variables } = gql.query({\n                operation,\n                fields: meta?.fields || [\"id\"],\n                variables: {\n                    id: {\n                        type: \"ID\",\n                        required: true,\n                        value: id,\n                    },\n                },\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation],\n            };\n        },\n        deleteOne: async ({ resource, id, meta }) => {\n            const pascalResource = camelcase(singular(resource), {\n                pascalCase: true,\n            });\n\n            const operation = `deleteOne${pascalResource}`;\n\n            if (meta?.gqlMutation) {\n                const response = await client.request<BaseRecord>(\n                    meta.gqlMutation,\n                    { input: { id } },\n                );\n\n                return {\n                    data: response[operation],\n                };\n            }\n\n            const query = gqlTag`\n                    mutation DeleteOne${pascalResource}($input: DeleteOne${pascalResource}Input!) {\n                        ${operation}(input: $input) {\n                            id\n                        }\n                    }\n                `;\n\n            const response = await client.request<BaseRecord>(query, {\n                input: { id },\n            });\n\n            return {\n                data: response[operation],\n            };\n        },\n        deleteMany: async ({ resource, ids }) => {\n            const pascalResource = camelcase(resource, {\n                pascalCase: true,\n            });\n            const operation = `deleteMany${pascalResource}`;\n\n            const query = gqlTag`\n                mutation DeleteMany${pascalResource}($input: DeleteMany${pascalResource}Input!) {\n                    ${operation}(input: $input) {\n                        deletedCount\n                    }\n                }\n            `;\n\n            const variables = {\n                input: {\n                    filter: {\n                        id: { in: ids },\n                    },\n                },\n            };\n\n            await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: [],\n            };\n        },\n        getApiUrl: () => {\n            throw Error(\n                \"Not implemented on refine-nestjs-query data provider.\",\n            );\n        },\n        custom: async ({ url, method, headers, meta }) => {\n            if (url) {\n                client.setEndpoint(url);\n            }\n\n            if (headers) {\n                client.setHeaders(headers);\n            }\n\n            const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n            if (gqlOperation) {\n                const response: any = await client.request(\n                    gqlOperation,\n                    meta?.variables ?? {},\n                );\n\n                return { data: response };\n            }\n\n            if (meta?.rawQuery) {\n                const response = await client.request<BaseRecord>(\n                    meta.rawQuery,\n                    meta.variables,\n                );\n\n                return { data: response };\n            }\n\n            if (meta) {\n                if (meta.operation) {\n                    let query, variables;\n\n                    if (method === \"get\") {\n                        const gqlQuery = gql.query({\n                            operation: meta.operation,\n                            fields: meta.fields,\n                            variables: meta.variables,\n                        });\n\n                        query = gqlQuery.query;\n                        variables = gqlQuery.variables;\n                    } else {\n                        const gqlMutation = gql.mutation({\n                            operation: meta.operation,\n                            fields: meta.fields,\n                            variables: meta.variables,\n                        });\n\n                        query = gqlMutation.query;\n                        variables = gqlMutation.variables;\n                    }\n\n                    const response = await client.request<BaseRecord>(\n                        query,\n                        variables,\n                    );\n\n                    return {\n                        data: response[meta.operation],\n                    };\n                } else {\n                    throw Error(\"GraphQL operation name required.\");\n                }\n            } else {\n                throw Error(\n                    \"GraphQL needs operation, fields and variables values in meta object.\",\n                );\n            }\n        },\n    };\n};\n\nexport default dataProvider;\n","import {\n    CrudFilter,\n    CrudOperators,\n    CrudSorting,\n    LogicalFilter,\n    Pagination,\n} from \"@refinedev/core\";\n\nimport camelcase from \"camelcase\";\nimport * as gql from \"gql-query-builder\";\nimport VariableOptions from \"gql-query-builder/build/VariableOptions\";\nimport { Client } from \"graphql-ws\";\nimport set from \"lodash/set\";\nimport { singular } from \"pluralize\";\n\nimport { getOperationFields } from \"./graphql\";\n\nexport const generateSubscription = (\n    client: Client,\n    { callback, params, meta }: any,\n    type: string,\n) => {\n    const generatorMap: any = {\n        created: generateCreatedSubscription,\n        updated: generateUpdatedSubscription,\n        deleted: generateDeletedSubscription,\n    };\n\n    const { resource, filters, subscriptionType, id, ids } = params ?? {};\n\n    const generator = generatorMap[type];\n\n    const { operation, query, variables, operationName } = generator({\n        ids,\n        id,\n        resource,\n        filters,\n        meta,\n        subscriptionType,\n    });\n\n    const onNext = (payload: any) => {\n        callback(payload.data[operation]);\n    };\n\n    const unsubscribe = client.subscribe(\n        { query, variables, operationName },\n        {\n            next: onNext,\n            error: console.error,\n            complete: () => null,\n        },\n    );\n\n    return unsubscribe;\n};\n\nconst operatorMap: { [key: string]: string } = {\n    eq: \"eq\",\n    ne: \"neq\",\n    lt: \"lt\",\n    gt: \"gt\",\n    lte: \"lte\",\n    gte: \"gte\",\n    in: \"in\",\n    nin: \"notIn\",\n};\n\nconst operatorMapper = (\n    operator: CrudOperators,\n    value: any,\n): { [key: string]: any } => {\n    if (operator === \"contains\") {\n        return { iLike: `%${value}%` };\n    }\n\n    if (operator === \"ncontains\") {\n        return { notILike: `%${value}%` };\n    }\n\n    if (operator === \"startswith\") {\n        return { iLike: `${value}%` };\n    }\n\n    if (operator === \"nstartswith\") {\n        return { notILike: `${value}%` };\n    }\n\n    if (operator === \"endswith\") {\n        return { iLike: `%${value}` };\n    }\n\n    if (operator === \"nendswith\") {\n        return { notILike: `%${value}` };\n    }\n\n    if (operator === \"null\") {\n        return { is: null };\n    }\n\n    if (operator === \"nnull\") {\n        return { isNot: null };\n    }\n\n    if (operator === \"between\") {\n        if (!Array.isArray(value)) {\n            throw new Error(\"Between operator requires an array\");\n        }\n\n        if (value.length !== 2) {\n            return {};\n        }\n\n        return { between: { lower: value[0], upper: value[1] } };\n    }\n\n    return { [operatorMap[operator]]: value };\n};\n\nexport const generateFilters = (filters: LogicalFilter[]) => {\n    const result: { [key: string]: { [key: string]: string | number } } = {};\n\n    filters\n        .filter((f) => {\n            if (Array.isArray(f.value) && f.value.length === 0) {\n                return false;\n            }\n\n            return !!f.value;\n        })\n        .map((filter: LogicalFilter | CrudFilter) => {\n            if (filter.operator === \"and\" || filter.operator === \"or\") {\n                return set(result, filter.operator, [\n                    generateFilters(filter.value as LogicalFilter[]),\n                ]);\n            } else if (\"field\" in filter) {\n                return set(\n                    result,\n                    filter.field,\n                    operatorMapper(filter.operator, filter.value),\n                );\n            } else {\n                return {};\n            }\n        });\n\n    return result;\n};\n\nexport const generateSorting = (sorters: CrudSorting) => {\n    return sorters.map((sorter) => {\n        return {\n            field: sorter.field,\n            direction: sorter.order.toUpperCase(),\n        };\n    });\n};\n\nexport const generatePaging = (pagination: Pagination) => {\n    // maximum value of 32 bit signed integer\n    if (pagination.mode === \"off\") return { limit: 2147483647 };\n\n    if (pagination.mode !== \"server\") return undefined;\n\n    if (!pagination.current || !pagination.pageSize) return undefined;\n\n    return {\n        limit: pagination.pageSize,\n        offset: (pagination.current - 1) * pagination.pageSize,\n    };\n};\n\nexport const generateCreatedSubscription = ({\n    resource,\n    filters,\n    meta,\n}: any) => {\n    const gqlOperation = meta?.gqlQuery ?? meta?.gqlMutation;\n\n    if (gqlOperation) {\n        const singularResourceName = camelcase(singular(resource), {\n            pascalCase: true,\n        });\n\n        const operationName = `Created${singularResourceName}`;\n\n        const operation = `created${singularResourceName}`;\n\n        const query = `\n            subscription ${operationName}($input: Create${singularResourceName}SubscriptionFilterInput) {\n                ${operation}(input: $input) {\n                    ${getOperationFields(gqlOperation)}\n                }\n            }\n        `;\n\n        const variables: VariableOptions = {};\n\n        if (filters) {\n            variables[\"input\"] = {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            };\n        }\n\n        return { query, variables, operation, operationName };\n    }\n\n    const operation = `created${camelcase(singular(resource), {\n        pascalCase: true,\n    })}`;\n\n    const queryVariables: VariableOptions = {};\n\n    if (filters) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `create_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            },\n        };\n    }\n\n    const { query, variables } = gql.subscription({\n        operation,\n        fields: meta.fields,\n        variables: queryVariables,\n    });\n\n    return { query, variables, operation };\n};\n\nexport const generateUpdatedSubscription = ({\n    id,\n    resource,\n    filters,\n    meta,\n}: any) => {\n    const gqlOperation = meta?.gqlQuery ?? meta?.gqlMutation;\n\n    if (gqlOperation) {\n        const singularResourceName = camelcase(singular(resource), {\n            pascalCase: true,\n        });\n\n        const operationName = `Updated${singularResourceName}`;\n\n        const operation = `updatedOne${singularResourceName}`;\n\n        const query = `\n            subscription ${operationName}($input: UpdateOne${singularResourceName}SubscriptionFilterInput) {\n                ${operation}(input: $input) {\n                   ${getOperationFields(gqlOperation)}\n                }\n            }\n        `;\n\n        const variables: VariableOptions = {};\n\n        if (filters) {\n            variables[\"input\"] = {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            };\n        }\n\n        if (id) {\n            variables[\"input\"] = {\n                filter: {\n                    id: { eq: id },\n                },\n            };\n        }\n\n        return { query, variables, operation, operationName };\n    }\n\n    const operation = `updatedOne${camelcase(singular(resource), {\n        pascalCase: true,\n    })}`;\n\n    const queryVariables: VariableOptions = {};\n\n    if (filters) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `update_one_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            },\n        };\n    }\n\n    if (id) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `update_one_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: {\n                    id: { eq: id },\n                },\n            },\n        };\n    }\n\n    const { query, variables } = gql.subscription({\n        operation,\n        fields: meta.fields,\n        variables: queryVariables,\n    });\n\n    return { query, variables, operation };\n};\n\nexport const generateDeletedSubscription = ({\n    resource,\n    filters,\n    meta,\n}: any) => {\n    if (meta?.gqlQuery) {\n        const singularResourceName = camelcase(singular(resource), {\n            pascalCase: true,\n        });\n\n        const operationName = `Deleted${singularResourceName}`;\n\n        const operation = `deletedOne${singularResourceName}`;\n\n        const query = `\n            subscription ${operationName}($input: DeleteOne${singularResourceName}SubscriptionFilterInput) {\n                ${operation}(input: $input) {\n                    id\n                }\n            }\n        `;\n\n        const variables: VariableOptions = {};\n\n        if (filters) {\n            variables[\"input\"] = {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            };\n        }\n\n        return { query, variables, operation, operationName };\n    }\n\n    const operation = `deletedOne${camelcase(singular(resource), {\n        pascalCase: true,\n    })}`;\n\n    const queryVariables: VariableOptions = {};\n\n    if (filters) {\n        queryVariables[\"input\"] = {\n            type: camelcase(\n                `delete_one_${singular(resource)}_subscription_filter_input`,\n                {\n                    pascalCase: true,\n                },\n            ),\n            required: true,\n            value: {\n                filter: generateFilters(\n                    filters.filter(\n                        (filter: LogicalFilter) => !filter.field.includes(\".\"),\n                    ),\n                ),\n            },\n        };\n    }\n\n    const { query, variables } = gql.subscription({\n        operation,\n        fields: meta.fields.filter(\n            (field: string | object) => typeof field !== \"object\",\n        ),\n        variables: queryVariables,\n    });\n\n    return { query, variables, operation };\n};\n","import { FieldNode, DocumentNode, visit, SelectionSetNode } from \"graphql\";\n\nconst getChildNodesField = (node: FieldNode): FieldNode | undefined => {\n    return node?.selectionSet?.selections?.find(\n        (node) => node.kind === \"Field\" && node.name.value === \"nodes\",\n    ) as FieldNode;\n};\n\nexport const getOperationFields = (documentNode: DocumentNode) => {\n    const fieldLines: string[] = [];\n    let isInitialEnter = true;\n    let depth = 0;\n    let isNestedField = false;\n\n    visit(documentNode, {\n        Field: {\n            enter(node): SelectionSetNode | void {\n                if (isInitialEnter) {\n                    isInitialEnter = false;\n\n                    const childNodesField = getChildNodesField(node);\n\n                    const nodeToReturn = childNodesField ?? node;\n\n                    if (typeof nodeToReturn.selectionSet === \"undefined\") {\n                        throw new Error(\"Operation must have a selection set\");\n                    }\n\n                    return nodeToReturn.selectionSet;\n                }\n\n                fieldLines.push(\n                    `${\n                        depth > 0\n                            ? \"  \".repeat(isNestedField ? depth : depth - 1)\n                            : \"\"\n                    }${node.name.value}${node.selectionSet ? \" {\" : \"\"}`,\n                );\n\n                if (node.selectionSet) {\n                    depth++;\n                    isNestedField = true;\n                }\n            },\n            leave(node) {\n                if (node.selectionSet) {\n                    depth--;\n                    fieldLines.push(`${\"  \".repeat(depth)}}`);\n                    isNestedField = false;\n                }\n            },\n        },\n    });\n\n    return fieldLines.join(\"\\n\").trim();\n};\n\nexport const isMutation = (documentNode: DocumentNode) => {\n    let isMutation = false;\n\n    visit(documentNode, {\n        OperationDefinition: {\n            enter(node) {\n                if (node.operation === \"mutation\") {\n                    isMutation = true;\n                }\n            },\n        },\n    });\n\n    return isMutation;\n};\n","import { LiveProvider } from \"@refinedev/core\";\n\nimport { Client } from \"graphql-ws\";\n\nimport { generateSubscription } from \"../utils\";\n\ntype SubscriptionAction = \"created\" | \"updated\" | \"deleted\";\n\nexport const liveProvider = (client: Client): LiveProvider => {\n    const subscribeToResource = (\n        client: Client,\n        callback: Function,\n        params: any,\n        meta: any,\n        action: SubscriptionAction,\n        resource: string,\n        unsubscribes: Function[],\n    ) => {\n        const unsubscribe = generateSubscription(\n            client,\n            { callback, params, meta },\n            action,\n        );\n        unsubscribes.push(unsubscribe);\n    };\n\n    return {\n        subscribe({ callback, params, meta }) {\n            const { resource, subscriptionType } = params ?? {};\n\n            if (!meta || !subscriptionType || !resource) {\n                throw new Error(\n                    \"[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions\",\n                );\n            }\n\n            const unsubscribes: any[] = [];\n\n            if (params?.subscriptionType === \"useList\") {\n                [\"created\", \"updated\", \"deleted\"].forEach((action) =>\n                    subscribeToResource(\n                        client,\n                        callback,\n                        params,\n                        meta,\n                        action as SubscriptionAction,\n                        resource,\n                        unsubscribes,\n                    ),\n                );\n            }\n\n            if (params?.subscriptionType === \"useOne\") {\n                subscribeToResource(\n                    client,\n                    callback,\n                    params,\n                    meta,\n                    \"updated\",\n                    resource,\n                    unsubscribes,\n                );\n            }\n\n            const unsubscribe = () => {\n                unsubscribes.forEach((unsubscribe) => unsubscribe());\n            };\n\n            return unsubscribe;\n        },\n        unsubscribe(unsubscribe) {\n            unsubscribe();\n        },\n    };\n};\n","import dataProvider from \"./dataProvider\";\n\nexport * from \"./dataProvider\";\nexport * from \"./interfaces\";\nexport * from \"./liveProvider\";\nexport * as qqlQueryBuilder from \"gql-query-builder\";\nexport type {\n    BatchRequestDocument,\n    BatchRequestsExtendedOptions,\n    BatchRequestsOptions,\n    ClientError,\n    GraphQLWebSocketClient,\n    RawRequestExtendedOptions,\n    RawRequestOptions,\n    RequestDocument,\n    RequestExtendedOptions,\n    RequestOptions,\n    Variables,\n} from \"graphql-request\";\nexport {\n    batchRequests,\n    gql,\n    GraphQLClient,\n    rawRequest,\n    request,\n    resolveRequestDocument,\n} from \"graphql-request\";\nexport * as graphqlWS from \"graphql-ws\";\n\nexport default dataProvider;\n"],"mappings":"AAEA,OAAOA,MAAe,YACtB,UAAYC,MAAS,oBAGrB,OAAOC,MAAY,cACnB,OAAS,YAAAC,MAAgB,YCCzB,OAAOC,MAAe,YACtB,UAAYC,MAAS,oBAGrB,OAAOC,MAAS,aAChB,OAAS,YAAAC,MAAgB,YCbzB,OAAkC,SAAAC,MAA+B,UAEjE,IAAMC,EAAsBC,GAA2C,CAFvE,IAAAC,EAAAC,EAGI,OAAOA,GAAAD,EAAAD,GAAA,YAAAA,EAAM,eAAN,YAAAC,EAAoB,aAApB,YAAAC,EAAgC,KAClCF,GAASA,EAAK,OAAS,SAAWA,EAAK,KAAK,QAAU,QAE/D,EAEaG,EAAsBC,GAA+B,CAC9D,IAAMC,EAAuB,CAAC,EAC1BC,EAAiB,GACjBC,EAAQ,EACRC,EAAgB,GAEpB,OAAAV,EAAMM,EAAc,CAChB,MAAO,CACH,MAAMJ,EAA+B,CACjC,GAAIM,EAAgB,CAChBA,EAAiB,GAIjB,IAAMG,EAFkBV,EAAmBC,CAAI,GAEPA,EAExC,GAAI,OAAOS,EAAa,aAAiB,IACrC,MAAM,IAAI,MAAM,qCAAqC,EAGzD,OAAOA,EAAa,aAGxBJ,EAAW,KACP,GACIE,EAAQ,EACF,KAAK,OAAOC,EAAgBD,EAAQA,EAAQ,CAAC,EAC7C,KACPP,EAAK,KAAK,QAAQA,EAAK,aAAe,KAAO,IACpD,EAEIA,EAAK,eACLO,IACAC,EAAgB,GAExB,EACA,MAAMR,EAAM,CACJA,EAAK,eACLO,IACAF,EAAW,KAAK,GAAG,KAAK,OAAOE,CAAK,IAAI,EACxCC,EAAgB,GAExB,CACJ,CACJ,CAAC,EAEMH,EAAW,KAAK;AAAA,CAAI,EAAE,KAAK,CACtC,EAEaK,EAAcN,GAA+B,CACtD,IAAIM,EAAa,GAEjB,OAAAZ,EAAMM,EAAc,CAChB,oBAAqB,CACjB,MAAMJ,EAAM,CACJA,EAAK,YAAc,aACnBU,EAAa,GAErB,CACJ,CACJ,CAAC,EAEMA,CACX,EDtDO,IAAMC,EAAuB,CAChCC,EACA,CAAE,SAAAC,EAAU,OAAAC,EAAQ,KAAAC,CAAK,EACzBC,IACC,CACD,IAAMC,EAAoB,CACtB,QAASC,EACT,QAASC,EACT,QAASC,CACb,EAEM,CAAE,SAAAC,EAAU,QAAAC,EAAS,iBAAAC,EAAkB,GAAAC,EAAI,IAAAC,CAAI,EAAIX,GAAU,CAAC,EAE9DY,EAAYT,EAAaD,CAAI,EAE7B,CAAE,UAAAW,EAAW,MAAAC,EAAO,UAAAC,EAAW,cAAAC,CAAc,EAAIJ,EAAU,CAC7D,IAAAD,EACA,GAAAD,EACA,SAAAH,EACA,QAAAC,EACA,KAAAP,EACA,iBAAAQ,CACJ,CAAC,EAEKQ,EAAUC,GAAiB,CAC7BnB,EAASmB,EAAQ,KAAKL,CAAS,CAAC,CACpC,EAWA,OAToBf,EAAO,UACvB,CAAE,MAAAgB,EAAO,UAAAC,EAAW,cAAAC,CAAc,EAClC,CACI,KAAMC,EACN,MAAO,QAAQ,MACf,SAAU,IAAM,IACpB,CACJ,CAGJ,EAEME,EAAyC,CAC3C,GAAI,KACJ,GAAI,MACJ,GAAI,KACJ,GAAI,KACJ,IAAK,MACL,IAAK,MACL,GAAI,KACJ,IAAK,OACT,EAEMC,EAAiB,CACnBC,EACAC,IACyB,CACzB,GAAID,IAAa,WACb,MAAO,CAAE,MAAO,IAAIC,IAAS,EAGjC,GAAID,IAAa,YACb,MAAO,CAAE,SAAU,IAAIC,IAAS,EAGpC,GAAID,IAAa,aACb,MAAO,CAAE,MAAO,GAAGC,IAAS,EAGhC,GAAID,IAAa,cACb,MAAO,CAAE,SAAU,GAAGC,IAAS,EAGnC,GAAID,IAAa,WACb,MAAO,CAAE,MAAO,IAAIC,GAAQ,EAGhC,GAAID,IAAa,YACb,MAAO,CAAE,SAAU,IAAIC,GAAQ,EAGnC,GAAID,IAAa,OACb,MAAO,CAAE,GAAI,IAAK,EAGtB,GAAIA,IAAa,QACb,MAAO,CAAE,MAAO,IAAK,EAGzB,GAAIA,IAAa,UAAW,CACxB,GAAI,CAAC,MAAM,QAAQC,CAAK,EACpB,MAAM,IAAI,MAAM,oCAAoC,EAGxD,OAAIA,EAAM,SAAW,EACV,CAAC,EAGL,CAAE,QAAS,CAAE,MAAOA,EAAM,CAAC,EAAG,MAAOA,EAAM,CAAC,CAAE,CAAE,EAG3D,MAAO,CAAE,CAACH,EAAYE,CAAQ,CAAC,EAAGC,CAAM,CAC5C,EAEaC,EAAmBf,GAA6B,CACzD,IAAMgB,EAAgE,CAAC,EAEvE,OAAAhB,EACK,OAAQiB,GACD,MAAM,QAAQA,EAAE,KAAK,GAAKA,EAAE,MAAM,SAAW,EACtC,GAGJ,CAAC,CAACA,EAAE,KACd,EACA,IAAKC,GACEA,EAAO,WAAa,OAASA,EAAO,WAAa,KAC1CC,EAAIH,EAAQE,EAAO,SAAU,CAChCH,EAAgBG,EAAO,KAAwB,CACnD,CAAC,EACM,UAAWA,EACXC,EACHH,EACAE,EAAO,MACPN,EAAeM,EAAO,SAAUA,EAAO,KAAK,CAChD,EAEO,CAAC,CAEf,EAEEF,CACX,EAEaI,EAAmBC,GACrBA,EAAQ,IAAKC,IACT,CACH,MAAOA,EAAO,MACd,UAAWA,EAAO,MAAM,YAAY,CACxC,EACH,EAGQC,EAAkBC,GAA2B,CAEtD,GAAIA,EAAW,OAAS,MAAO,MAAO,CAAE,MAAO,UAAW,EAE1D,GAAIA,EAAW,OAAS,UAEpB,GAACA,EAAW,SAAW,CAACA,EAAW,UAEvC,MAAO,CACH,MAAOA,EAAW,SAClB,QAASA,EAAW,QAAU,GAAKA,EAAW,QAClD,CACJ,EAEa5B,EAA8B,CAAC,CACxC,SAAAG,EACA,QAAAC,EACA,KAAAP,CACJ,IAAW,CACP,IAAMgC,GAAehC,GAAA,YAAAA,EAAM,YAAYA,GAAA,YAAAA,EAAM,aAE7C,GAAIgC,EAAc,CACd,IAAMC,EAAuBC,EAAUC,EAAS7B,CAAQ,EAAG,CACvD,WAAY,EAChB,CAAC,EAEKS,EAAgB,UAAUkB,IAE1BrB,EAAY,UAAUqB,IAEtBpB,EAAQ;AAAA,2BACKE,mBAA+BkB;AAAA,kBACxCrB;AAAA,sBACIwB,EAAmBJ,CAAY;AAAA;AAAA;AAAA,UAKvClB,EAA6B,CAAC,EAEpC,OAAIP,IACAO,EAAU,MAAW,CACjB,OAAQQ,EACJf,EAAQ,OACHkB,GAA0B,CAACA,EAAO,MAAM,SAAS,GAAG,CACzD,CACJ,CACJ,GAGG,CAAE,MAAAZ,EAAO,UAAAC,EAAW,UAAAF,EAAW,cAAAG,CAAc,EAGxD,IAAMH,EAAY,UAAUsB,EAAUC,EAAS7B,CAAQ,EAAG,CACtD,WAAY,EAChB,CAAC,IAEK+B,EAAkC,CAAC,EAErC9B,IACA8B,EAAe,MAAW,CACtB,KAAMH,EACF,UAAUC,EAAS7B,CAAQ,8BAC3B,CACI,WAAY,EAChB,CACJ,EACA,SAAU,GACV,MAAO,CACH,OAAQgB,EACJf,EAAQ,OACHkB,GAA0B,CAACA,EAAO,MAAM,SAAS,GAAG,CACzD,CACJ,CACJ,CACJ,GAGJ,GAAM,CAAE,MAAAZ,EAAO,UAAAC,CAAU,EAAQ,eAAa,CAC1C,UAAAF,EACA,OAAQZ,EAAK,OACb,UAAWqC,CACf,CAAC,EAED,MAAO,CAAE,MAAAxB,EAAO,UAAAC,EAAW,UAAAF,CAAU,CACzC,EAEaR,EAA8B,CAAC,CACxC,GAAAK,EACA,SAAAH,EACA,QAAAC,EACA,KAAAP,CACJ,IAAW,CACP,IAAMgC,GAAehC,GAAA,YAAAA,EAAM,YAAYA,GAAA,YAAAA,EAAM,aAE7C,GAAIgC,EAAc,CACd,IAAMC,EAAuBC,EAAUC,EAAS7B,CAAQ,EAAG,CACvD,WAAY,EAChB,CAAC,EAEKS,EAAgB,UAAUkB,IAE1BrB,EAAY,aAAaqB,IAEzBpB,EAAQ;AAAA,2BACKE,sBAAkCkB;AAAA,kBAC3CrB;AAAA,qBACGwB,EAAmBJ,CAAY;AAAA;AAAA;AAAA,UAKtClB,EAA6B,CAAC,EAEpC,OAAIP,IACAO,EAAU,MAAW,CACjB,OAAQQ,EACJf,EAAQ,OACHkB,GAA0B,CAACA,EAAO,MAAM,SAAS,GAAG,CACzD,CACJ,CACJ,GAGAhB,IACAK,EAAU,MAAW,CACjB,OAAQ,CACJ,GAAI,CAAE,GAAIL,CAAG,CACjB,CACJ,GAGG,CAAE,MAAAI,EAAO,UAAAC,EAAW,UAAAF,EAAW,cAAAG,CAAc,EAGxD,IAAMH,EAAY,aAAasB,EAAUC,EAAS7B,CAAQ,EAAG,CACzD,WAAY,EAChB,CAAC,IAEK+B,EAAkC,CAAC,EAErC9B,IACA8B,EAAe,MAAW,CACtB,KAAMH,EACF,cAAcC,EAAS7B,CAAQ,8BAC/B,CACI,WAAY,EAChB,CACJ,EACA,SAAU,GACV,MAAO,CACH,OAAQgB,EACJf,EAAQ,OACHkB,GAA0B,CAACA,EAAO,MAAM,SAAS,GAAG,CACzD,CACJ,CACJ,CACJ,GAGAhB,IACA4B,EAAe,MAAW,CACtB,KAAMH,EACF,cAAcC,EAAS7B,CAAQ,8BAC/B,CACI,WAAY,EAChB,CACJ,EACA,SAAU,GACV,MAAO,CACH,OAAQ,CACJ,GAAI,CAAE,GAAIG,CAAG,CACjB,CACJ,CACJ,GAGJ,GAAM,CAAE,MAAAI,EAAO,UAAAC,CAAU,EAAQ,eAAa,CAC1C,UAAAF,EACA,OAAQZ,EAAK,OACb,UAAWqC,CACf,CAAC,EAED,MAAO,CAAE,MAAAxB,EAAO,UAAAC,EAAW,UAAAF,CAAU,CACzC,EAEaP,EAA8B,CAAC,CACxC,SAAAC,EACA,QAAAC,EACA,KAAAP,CACJ,IAAW,CACP,GAAIA,GAAA,MAAAA,EAAM,SAAU,CAChB,IAAMiC,EAAuBC,EAAUC,EAAS7B,CAAQ,EAAG,CACvD,WAAY,EAChB,CAAC,EAEKS,EAAgB,UAAUkB,IAE1BrB,EAAY,aAAaqB,IAEzBpB,EAAQ;AAAA,2BACKE,sBAAkCkB;AAAA,kBAC3CrB;AAAA;AAAA;AAAA;AAAA,UAMJE,EAA6B,CAAC,EAEpC,OAAIP,IACAO,EAAU,MAAW,CACjB,OAAQQ,EACJf,EAAQ,OACHkB,GAA0B,CAACA,EAAO,MAAM,SAAS,GAAG,CACzD,CACJ,CACJ,GAGG,CAAE,MAAAZ,EAAO,UAAAC,EAAW,UAAAF,EAAW,cAAAG,CAAc,EAGxD,IAAMH,EAAY,aAAasB,EAAUC,EAAS7B,CAAQ,EAAG,CACzD,WAAY,EAChB,CAAC,IAEK+B,EAAkC,CAAC,EAErC9B,IACA8B,EAAe,MAAW,CACtB,KAAMH,EACF,cAAcC,EAAS7B,CAAQ,8BAC/B,CACI,WAAY,EAChB,CACJ,EACA,SAAU,GACV,MAAO,CACH,OAAQgB,EACJf,EAAQ,OACHkB,GAA0B,CAACA,EAAO,MAAM,SAAS,GAAG,CACzD,CACJ,CACJ,CACJ,GAGJ,GAAM,CAAE,MAAAZ,EAAO,UAAAC,CAAU,EAAQ,eAAa,CAC1C,UAAAF,EACA,OAAQZ,EAAK,OAAO,OACfsC,GAA2B,OAAOA,GAAU,QACjD,EACA,UAAWD,CACf,CAAC,EAED,MAAO,CAAE,MAAAxB,EAAO,UAAAC,EAAW,UAAAF,CAAU,CACzC,EDlZA,IAAM2B,EAAgBC,IACX,CACH,QAAS,MAAO,CAAE,SAAAC,EAAU,WAAAC,EAAY,QAAAC,EAAS,QAAAC,EAAS,KAAAC,CAAK,IAAM,CACjE,IAAMC,EAAYC,EAAUN,CAAQ,EAE9BO,EAASC,EAAeP,GAAc,CAAC,CAAC,EAExCQ,EAAkC,CAAC,EAErCC,EACAC,EAEJ,GAAIP,GAAA,MAAAA,EAAM,SACNM,EAAQN,GAAA,YAAAA,EAAM,SAEdO,EAAY,CACR,OAAQR,EACFS,EAAgBT,CAA0B,EAC1C,CAAC,EACP,QAASD,EAAUW,EAAgBX,CAAO,EAAI,CAAC,EAC/C,OAAAK,CACJ,MACG,CACCJ,IACAM,EAAe,OAAY,CACvB,KAAMH,EAAU,GAAGQ,EAASd,CAAQ,UAAW,CAC3C,WAAY,EAChB,CAAC,EACD,SAAU,GACV,MAAOY,EAAgBT,CAA0B,CACrD,GAGAD,IACAO,EAAe,QAAa,CACxB,KAAMH,EAAU,GAAGQ,EAASd,CAAQ,QAAS,CACzC,WAAY,EAChB,CAAC,EACD,SAAU,GACV,KAAM,CAAC,EAAI,EACX,MAAOa,EAAgBX,CAAO,CAClC,GAGAK,IACAE,EAAe,OAAY,CACvB,KAAM,eACN,SAAU,GACV,MAAOF,CACX,GAGJ,IAAMQ,EAAe,QAAM,CACvB,UAAAV,EACA,OAAQ,CAAC,CAAE,MAAOD,GAAA,YAAAA,EAAM,MAAO,EAAG,YAAY,EAC9C,UAAWK,CACf,CAAC,EAEDC,EAAQK,EAAS,MACjBJ,EAAYI,EAAS,UAGzB,IAAMC,EAAW,MAAMjB,EAAO,QAAoBW,EAAOC,CAAS,EAElE,MAAO,CACH,KAAMK,EAASX,CAAS,EAAE,MAC1B,MAAOW,EAASX,CAAS,EAAE,UAC/B,CACJ,EAEA,QAAS,MAAO,CAAE,SAAAL,EAAU,IAAAiB,EAAK,KAAAb,CAAK,IAAM,CACxC,IAAMC,EAAYC,EAAUN,CAAQ,EAEpC,GAAII,GAAA,MAAAA,EAAM,SAUN,MAAO,CACH,MAVa,MAAML,EAAO,QAC1BK,EAAK,SACL,CACI,OAAQ,CACJ,GAAI,CAAE,GAAIa,CAAI,CAClB,CACJ,CACJ,GAGmBZ,CAAS,EAAE,KAC9B,EAGJ,GAAM,CAAE,MAAAK,EAAO,UAAAC,CAAU,EAAQ,QAAM,CACnC,UAAAN,EACA,OAAQ,CAAC,CAAE,OAAOD,GAAA,YAAAA,EAAM,SAAU,CAAC,IAAI,CAAE,CAAC,EAC1C,UAAW,CACP,OAAQ,CACJ,KAAME,EAAU,GAAGQ,EAASd,CAAQ,UAAW,CAC3C,WAAY,EAChB,CAAC,EACD,SAAU,GACV,MAAO,CACH,GAAI,CAAE,GAAIiB,CAAI,CAClB,CACJ,CACJ,CACJ,CAAC,EAID,MAAO,CACH,MAHa,MAAMlB,EAAO,QAAoBW,EAAOC,CAAS,GAG/CN,CAAS,EAAE,KAC9B,CACJ,EAEA,OAAQ,MAAO,CAAE,SAAAL,EAAU,UAAAW,EAAW,KAAAP,CAAK,IAAM,CAC7C,IAAMC,EAAY,YAAYC,EAAUQ,EAASd,CAAQ,EAAG,CACxD,WAAY,EAChB,CAAC,IAEKkB,GAAed,GAAA,YAAAA,EAAM,eAAeA,GAAA,YAAAA,EAAM,UAEhD,GAAIc,EAMA,MAAO,CACH,MANa,MAAMnB,EAAO,QAC1BmB,EACA,CAAE,MAAO,CAAE,CAACZ,EAAUQ,EAASd,CAAQ,CAAC,CAAC,EAAGW,CAAU,CAAE,CAC5D,GAGmBN,CAAS,CAC5B,EAGJ,GAAM,CAAE,MAAAK,EAAO,UAAWD,CAAe,EAAQ,WAAS,CACtD,UAAAJ,EACA,QAAQD,GAAA,YAAAA,EAAM,SAAU,CAAC,IAAI,EAC7B,UAAW,CACP,MAAO,CACH,KAAM,YAAYE,EAAUQ,EAASd,CAAQ,EAAG,CAC5C,WAAY,EAChB,CAAC,SACD,SAAU,GACV,MAAO,CACH,CAACM,EAAUQ,EAASd,CAAQ,CAAC,CAAC,EAAGW,CACrC,CACJ,CACJ,CACJ,CAAC,EAOD,MAAO,CACH,MANa,MAAMZ,EAAO,QAC1BW,EACAD,CACJ,GAGmBJ,CAAS,CAC5B,CACJ,EAEA,WAAY,MAAO,CAAE,SAAAL,EAAU,UAAAW,EAAW,KAAAP,CAAK,IAAM,CAEjD,IAAMC,EAAY,aADKC,EAAUN,EAAU,CAAE,WAAY,EAAK,CAAC,IAGzDkB,GAAed,GAAA,YAAAA,EAAM,eAAeA,GAAA,YAAAA,EAAM,UAEhD,GAAIc,EAUA,MAAO,CACH,MAVa,MAAMnB,EAAO,QAC1BmB,EACA,CACI,MAAO,CACH,CAACZ,EAAUN,CAAQ,CAAC,EAAGW,CAC3B,CACJ,CACJ,GAGmBN,CAAS,CAC5B,EAGJ,GAAM,CAAE,MAAAK,EAAO,UAAWD,CAAe,EAAQ,WAAS,CACtD,UAAAJ,EACA,QAAQD,GAAA,YAAAA,EAAM,SAAU,CAAC,IAAI,EAC7B,UAAW,CACP,MAAO,CACH,KAAM,aAAaE,EAAUN,EAAU,CACnC,WAAY,EAChB,CAAC,SACD,SAAU,GACV,MAAO,CACH,CAACM,EAAUN,CAAQ,CAAC,EAAGW,CAC3B,CACJ,CACJ,CACJ,CAAC,EAOD,MAAO,CACH,MANa,MAAMZ,EAAO,QAC1BW,EACAD,CACJ,GAGmBJ,CAAS,CAC5B,CACJ,EACA,OAAQ,MAAO,CAAE,SAAAL,EAAU,GAAAmB,EAAI,UAAAR,EAAW,KAAAP,CAAK,IAAM,CACjD,IAAMC,EAAY,YAAYC,EAAUQ,EAASd,CAAQ,EAAG,CACxD,WAAY,EAChB,CAAC,IAEKkB,GAAed,GAAA,YAAAA,EAAM,eAAeA,GAAA,YAAAA,EAAM,UAEhD,GAAIc,EAWA,MAAO,CACH,MAXa,MAAMnB,EAAO,QAC1BmB,EACA,CACI,MAAO,CACH,GAAAC,EACA,OAAQR,CACZ,CACJ,CACJ,GAGmBN,CAAS,CAC5B,EAGJ,GAAM,CAAE,MAAAK,EAAO,UAAWD,CAAe,EAAQ,WAAS,CACtD,UAAAJ,EACA,QAAQD,GAAA,YAAAA,EAAM,SAAU,CAAC,IAAI,EAC7B,UAAW,CACP,MAAO,CACH,KAAM,YAAYE,EAAUQ,EAASd,CAAQ,EAAG,CAC5C,WAAY,EAChB,CAAC,SACD,SAAU,GACV,MAAO,CACH,GAAAmB,EACA,OAAQR,CACZ,CACJ,CACJ,CACJ,CAAC,EAOD,MAAO,CACH,MANa,MAAMZ,EAAO,QAC1BW,EACAD,CACJ,GAGmBJ,CAAS,CAC5B,CACJ,EACA,WAAY,MAAO,CAAE,SAAAL,EAAU,IAAAiB,EAAK,UAAAN,EAAW,KAAAP,CAAK,IAAM,CACtD,IAAMgB,EAAiBd,EAAUN,EAAU,CACvC,WAAY,EAChB,CAAC,EAEKqB,EAAoB,aAAaD,IAEjCE,EAAWC;AAAA,qCACQH,uBAAoCA;AAAA,sBACnDC;AAAA;AAAA;AAAA;AAAA,cAMV,MAAMtB,EAAO,QAAoBuB,EAAU,CACvC,MAAO,CAAE,OAAQ,CAAE,GAAI,CAAE,GAAIL,CAAI,CAAE,EAAG,OAAQN,CAAU,CAC5D,CAAC,EAED,IAAMN,EAAYC,EAAUN,CAAQ,EAEhCU,EAAOD,EAEX,GAAIL,GAAA,MAAAA,EAAM,OAAQ,CACd,IAAMW,EAAe,QAAM,CACvB,UAAAV,EACA,OAAQ,CAAC,CAAE,OAAOD,GAAA,YAAAA,EAAM,SAAU,CAAC,IAAI,CAAE,CAAC,EAC1C,UAAW,CACP,OAAQ,CACJ,KAAME,EAAU,GAAGQ,EAASd,CAAQ,UAAW,CAC3C,WAAY,EAChB,CAAC,EACD,SAAU,GACV,MAAO,CACH,GAAI,CAAE,GAAIiB,CAAI,CAClB,CACJ,CACJ,CACJ,CAAC,EACDP,EAAQK,EAAS,MACjBN,EAAiBM,EAAS,eAE1BL,EAAQa;AAAA,mCACWH,cAA2BN,EAC1CM,CACJ;AAAA,0BACUf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQVI,EAAiB,CACb,OAAQ,CAAE,GAAI,CAAE,GAAIQ,CAAI,CAAE,CAC9B,EAQJ,MAAO,CACH,MANa,MAAMlB,EAAO,QAC1BW,EACAD,CACJ,GAGmBJ,CAAS,EAAE,KAC9B,CACJ,EACA,OAAQ,MAAO,CAAE,SAAAL,EAAU,GAAAmB,EAAI,KAAAf,CAAK,IAAM,CACtC,IAAMC,EAAYC,EAAUQ,EAASd,CAAQ,CAAC,EAExCkB,GAAed,GAAA,YAAAA,EAAM,YAAYA,GAAA,YAAAA,EAAM,aAE7C,GAAIc,EAAc,CACd,IAAIR,EAAQQ,EACNP,EAAY,CAAE,GAAAQ,CAAG,EAEvB,GAAIK,EAAWN,CAAY,EAAG,CAC1B,IAAMO,EAAeC,EAAmBR,CAAY,EAEpDR,EAAQa;AAAA,mCACOjB,EAAUQ,EAASd,CAAQ,EAAG,CACrC,WAAY,EAChB,CAAC;AAAA,8BACKK;AAAA,8BACAoB;AAAA;AAAA;AAAA,sBAWd,MAAO,CACH,MANa,MAAM1B,EAAO,QAC1BW,EACAC,CACJ,GAGmBN,CAAS,CAC5B,EAGJ,GAAM,CAAE,MAAAK,EAAO,UAAAC,CAAU,EAAQ,QAAM,CACnC,UAAAN,EACA,QAAQD,GAAA,YAAAA,EAAM,SAAU,CAAC,IAAI,EAC7B,UAAW,CACP,GAAI,CACA,KAAM,KACN,SAAU,GACV,MAAOe,CACX,CACJ,CACJ,CAAC,EAID,MAAO,CACH,MAHa,MAAMpB,EAAO,QAAoBW,EAAOC,CAAS,GAG/CN,CAAS,CAC5B,CACJ,EACA,UAAW,MAAO,CAAE,SAAAL,EAAU,GAAAmB,EAAI,KAAAf,CAAK,IAAM,CACzC,IAAMgB,EAAiBd,EAAUQ,EAASd,CAAQ,EAAG,CACjD,WAAY,EAChB,CAAC,EAEKK,EAAY,YAAYe,IAE9B,GAAIhB,GAAA,MAAAA,EAAM,YAMN,MAAO,CACH,MANa,MAAML,EAAO,QAC1BK,EAAK,YACL,CAAE,MAAO,CAAE,GAAAe,CAAG,CAAE,CACpB,GAGmBd,CAAS,CAC5B,EAGJ,IAAMK,EAAQa;AAAA,wCACcH,sBAAmCA;AAAA,0BACjDf;AAAA;AAAA;AAAA;AAAA,kBAUd,MAAO,CACH,MALa,MAAMN,EAAO,QAAoBW,EAAO,CACrD,MAAO,CAAE,GAAAS,CAAG,CAChB,CAAC,GAGkBd,CAAS,CAC5B,CACJ,EACA,WAAY,MAAO,CAAE,SAAAL,EAAU,IAAAiB,CAAI,IAAM,CACrC,IAAMG,EAAiBd,EAAUN,EAAU,CACvC,WAAY,EAChB,CAAC,EACKK,EAAY,aAAae,IAEzBV,EAAQa;AAAA,qCACWH,uBAAoCA;AAAA,sBACnDf;AAAA;AAAA;AAAA;AAAA,cAMJM,EAAY,CACd,MAAO,CACH,OAAQ,CACJ,GAAI,CAAE,GAAIM,CAAI,CAClB,CACJ,CACJ,EAEA,aAAMlB,EAAO,QAAoBW,EAAOC,CAAS,EAE1C,CACH,KAAM,CAAC,CACX,CACJ,EACA,UAAW,IAAM,CACb,MAAM,MACF,uDACJ,CACJ,EACA,OAAQ,MAAO,CAAE,IAAAgB,EAAK,OAAAC,EAAQ,QAAAC,EAAS,KAAAzB,CAAK,IAAM,CAC1CuB,GACA5B,EAAO,YAAY4B,CAAG,EAGtBE,GACA9B,EAAO,WAAW8B,CAAO,EAG7B,IAAMX,GAAed,GAAA,YAAAA,EAAM,eAAeA,GAAA,YAAAA,EAAM,UAEhD,GAAIc,EAMA,MAAO,CAAE,KALa,MAAMnB,EAAO,QAC/BmB,GACAd,GAAA,YAAAA,EAAM,YAAa,CAAC,CACxB,CAEwB,EAG5B,GAAIA,GAAA,MAAAA,EAAM,SAMN,MAAO,CAAE,KALQ,MAAML,EAAO,QAC1BK,EAAK,SACLA,EAAK,SACT,CAEwB,EAG5B,GAAIA,EACA,GAAIA,EAAK,UAAW,CAChB,IAAIM,EAAOC,EAEX,GAAIiB,IAAW,MAAO,CAClB,IAAMb,EAAe,QAAM,CACvB,UAAWX,EAAK,UAChB,OAAQA,EAAK,OACb,UAAWA,EAAK,SACpB,CAAC,EAEDM,EAAQK,EAAS,MACjBJ,EAAYI,EAAS,cAClB,CACH,IAAMe,EAAkB,WAAS,CAC7B,UAAW1B,EAAK,UAChB,OAAQA,EAAK,OACb,UAAWA,EAAK,SACpB,CAAC,EAEDM,EAAQoB,EAAY,MACpBnB,EAAYmB,EAAY,UAQ5B,MAAO,CACH,MANa,MAAM/B,EAAO,QAC1BW,EACAC,CACJ,GAGmBP,EAAK,SAAS,CACjC,MAEA,OAAM,MAAM,kCAAkC,MAGlD,OAAM,MACF,sEACJ,CAER,CACJ,GAGG2B,EAAQjC,EGlgBR,IAAMkC,GAAgBC,GAAiC,CAC1D,IAAMC,EAAsB,CACxBD,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,IACC,CACD,IAAMC,EAAcC,EAChBT,EACA,CAAE,SAAAE,EAAU,OAAAC,EAAQ,KAAAC,CAAK,EACzBC,CACJ,EACAE,EAAa,KAAKC,CAAW,CACjC,EAEA,MAAO,CACH,UAAU,CAAE,SAAAN,EAAU,OAAAC,EAAQ,KAAAC,CAAK,EAAG,CAClC,GAAM,CAAE,SAAAE,EAAU,iBAAAI,CAAiB,EAAIP,GAAU,CAAC,EAElD,GAAI,CAACC,GAAQ,CAACM,GAAoB,CAACJ,EAC/B,MAAM,IAAI,MACN,iHACJ,EAGJ,IAAMC,EAAsB,CAAC,EAE7B,OAAIJ,GAAA,YAAAA,EAAQ,oBAAqB,WAC7B,CAAC,UAAW,UAAW,SAAS,EAAE,QAASE,GACvCJ,EACID,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,CACJ,CACJ,GAGAJ,GAAA,YAAAA,EAAQ,oBAAqB,UAC7BF,EACID,EACAE,EACAC,EACAC,EACA,UACAE,EACAC,CACJ,EAGgB,IAAM,CACtBA,EAAa,QAASC,GAAgBA,EAAY,CAAC,CACvD,CAGJ,EACA,YAAYA,EAAa,CACrBA,EAAY,CAChB,CACJ,CACJ,ECrEA,UAAYG,OAAqB,oBAcjC,OACI,iBAAAC,GACA,OAAAC,GACA,iBAAAC,GACA,cAAAC,GACA,WAAAC,GACA,0BAAAC,OACG,kBACP,UAAYC,OAAe,aAE3B,IAAOC,GAAQC","names":["camelcase","gql","gqlTag","singular","camelcase","gql","set","singular","visit","getChildNodesField","node","_a","_b","getOperationFields","documentNode","fieldLines","isInitialEnter","depth","isNestedField","nodeToReturn","isMutation","generateSubscription","client","callback","params","meta","type","generatorMap","generateCreatedSubscription","generateUpdatedSubscription","generateDeletedSubscription","resource","filters","subscriptionType","id","ids","generator","operation","query","variables","operationName","onNext","payload","operatorMap","operatorMapper","operator","value","generateFilters","result","f","filter","set","generateSorting","sorters","sorter","generatePaging","pagination","gqlOperation","singularResourceName","camelcase","singular","getOperationFields","queryVariables","field","dataProvider","client","resource","pagination","sorters","filters","meta","operation","camelcase","paging","generatePaging","queryVariables","query","variables","generateFilters","generateSorting","singular","gqlQuery","response","ids","gqlOperation","id","pascalResource","mutationOperation","mutation","gqlTag","isMutation","stringFields","getOperationFields","url","method","headers","gqlMutation","dataProvider_default","liveProvider","client","subscribeToResource","callback","params","meta","action","resource","unsubscribes","unsubscribe","generateSubscription","subscriptionType","qqlQueryBuilder","batchRequests","gql","GraphQLClient","rawRequest","request","resolveRequestDocument","graphqlWS","src_default","dataProvider_default"]}