{"version":3,"sources":["../../../devtools-shared/src/index.ts","../../../devtools-shared/src/event-types.ts","../../../devtools-shared/src/scopes.ts","../../../devtools-shared/src/context.tsx","../../../devtools-shared/src/send.ts","../../../devtools-shared/src/receive.ts","../../../devtools-internal/src/index.ts","../../../devtools-internal/src/get-trace.ts","../../../devtools-internal/src/clean-stack.ts","../../../devtools-internal/src/constants.ts","../../../devtools-internal/src/is-refine-stack.ts","../../../devtools-internal/src/get-package-name-from-filename.ts","../../../devtools-internal/src/get-resource-path.ts","../../../devtools-internal/src/get-xray.ts","../../../devtools-internal/src/use-query-subscription.tsx","../../../devtools-internal/src/listeners.ts","../../../devtools-internal/src/create-identifier.ts","../../src/components/pages/error/index.tsx","../../src/hooks/auth/usePermissions/index.ts","../../src/definitions/table/index.ts","../../src/definitions/helpers/userFriendlySeconds/index.ts","../../src/definitions/helpers/importCSVMapper/index.ts","../../src/definitions/helpers/userFriendlyResourceName/index.ts","../../src/definitions/helpers/handleUseParams/index.tsx","../../src/definitions/helpers/pickNotDeprecated/index.ts","../../src/definitions/helpers/keys/index.ts","../../src/definitions/helpers/queryKeys/index.ts","../../src/definitions/helpers/hasPermission/index.ts","../../src/definitions/helpers/router/is-parameter.ts","../../src/definitions/helpers/router/split-to-segments.ts","../../src/definitions/helpers/router/is-segment-counts-same.ts","../../src/definitions/helpers/router/remove-leading-trailing-slashes.ts","../../src/definitions/helpers/router/check-by-segments.ts","../../src/definitions/helpers/router/get-default-action-path.ts","../../src/definitions/helpers/router/get-parent-resource.ts","../../src/definitions/helpers/router/get-parent-prefix-for-resource.ts","../../src/definitions/helpers/router/get-action-routes-from-resource.ts","../../src/definitions/helpers/router/pick-matched-route.ts","../../src/definitions/helpers/router/match-resource-from-route.ts","../../src/definitions/helpers/routeGenerator/index.ts","../../src/definitions/helpers/treeView/createTreeView/index.ts","../../src/definitions/helpers/humanizeString/index.ts","../../src/contexts/refine/index.tsx","../../src/components/layoutWrapper/defaultLayout/index.tsx","../../src/definitions/helpers/handleRefineOptions/index.ts","../../src/definitions/helpers/redirectPage/index.ts","../../src/definitions/helpers/sequentialPromises/index.ts","../../src/definitions/helpers/pick-resource/index.ts","../../src/definitions/helpers/pickDataProvider/index.ts","../../src/definitions/helpers/handleMultiple/index.ts","../../src/definitions/helpers/useInfinitePagination/index.ts","../../src/definitions/helpers/legacy-resource-transform/index.ts","../../src/definitions/helpers/router/pick-route-params.ts","../../src/definitions/helpers/router/prepare-route-params.ts","../../src/definitions/helpers/router/compose-route.ts","../../src/contexts/auth/index.tsx","../../src/definitions/helpers/useActiveAuthProvider/index.ts","../../src/definitions/helpers/handlePaginationParams/index.ts","../../src/definitions/helpers/useMediaQuery/index.ts","../../src/definitions/helpers/safe-translate/index.ts","../../src/definitions/helpers/generateDocumentTitle/index.ts","../../src/hooks/refine/useMutationMode.ts","../../src/hooks/refine/useWarnAboutChange/index.ts","../../src/contexts/unsavedWarn/index.tsx","../../src/hooks/refine/useSyncWithLocation.ts","../../src/hooks/refine/useTitle.tsx","../../src/hooks/refine/useRefineContext.ts","../../src/definitions/helpers/useUserFriendlyName/index.ts","../../src/definitions/helpers/flatten-object-keys/index.ts","../../src/definitions/helpers/property-path-to-array/index.ts","../../src/definitions/upload/file2Base64/index.ts","../../src/hooks/useKeys/index.tsx","../../src/hooks/auth/useGetIdentity/index.ts","../../src/hooks/auth/useLogout/index.ts","../../src/hooks/auth/useInvalidateAuthStore/index.ts","../../src/hooks/auth/useLogin/index.ts","../../src/hooks/auth/useRegister/index.ts","../../src/hooks/auth/useForgotPassword/index.ts","../../src/hooks/auth/useUpdatePassword/index.ts","../../src/hooks/auth/useIsAuthenticated/index.ts","../../src/hooks/auth/useOnError/index.ts","../../src/hooks/auth/useIsExistAuthentication/index.ts","../../src/hooks/data/useList.ts","../../src/hooks/useLoadingOvertime/index.ts","../../src/hooks/data/useOne.ts","../../src/hooks/data/useMany.ts","../../src/hooks/data/useUpdate.ts","../../src/contexts/undoableQueue/undoableQueueContext.tsx","../../src/hooks/data/useCreate.ts","../../src/hooks/data/useDelete.ts","../../src/hooks/data/useCreateMany.ts","../../src/hooks/data/useUpdateMany.ts","../../src/hooks/data/useDeleteMany.ts","../../src/hooks/data/useApiUrl.ts","../../src/hooks/data/useCustom.ts","../../src/hooks/data/useCustomMutation.ts","../../src/hooks/data/useDataProvider.tsx","../../src/contexts/data/index.tsx","../../src/hooks/data/useInfiniteList.ts","../../src/contexts/live/index.tsx","../../src/hooks/invalidate/index.tsx","../../src/hooks/resource/useResource/index.ts","../../src/contexts/resource/index.tsx","../../src/hooks/deepMemo/index.tsx","../../src/hooks/memoized/index.tsx","../../src/contexts/router-picker/index.tsx","../../src/hooks/router/use-parsed/index.tsx","../../src/contexts/router/index.tsx","../../src/hooks/router/use-parse/index.tsx","../../src/hooks/resource/useResourceWithRoute/index.ts","../../src/hooks/live/useResourceSubscription/index.ts","../../src/hooks/live/useLiveMode/index.ts","../../src/hooks/live/useSubscription/index.ts","../../src/hooks/live/usePublish/index.ts","../../src/hooks/notification/useCancelNotification/index.tsx","../../src/hooks/notification/useNotification/index.ts","../../src/contexts/notification/index.tsx","../../src/hooks/notification/useHandleNotification/index.ts","../../src/hooks/translate/useSetLocale.ts","../../src/contexts/translation/index.tsx","../../src/hooks/translate/useTranslate.ts","../../src/hooks/translate/useGetLocale.ts","../../src/hooks/export/index.ts","../../src/hooks/form/useForm.ts","../../src/hooks/redirection/index.ts","../../src/hooks/router/use-go/index.tsx","../../src/hooks/router/use-get-to-path/index.ts","../../src/hooks/router/use-back/index.tsx","../../src/hooks/navigation/index.ts","../../src/hooks/show/useShow.ts","../../src/hooks/import/index.tsx","../../src/hooks/modal/useModal/index.tsx","../../src/hooks/router/use-to-path/index.ts","../../src/hooks/router/use-link/index.tsx","../../src/hooks/legacy-router/useRouterContext.ts","../../src/contexts/legacy-router/index.tsx","../../src/hooks/accessControl/useCan/index.ts","../../src/contexts/accessControl/index.tsx","../../src/definitions/helpers/sanitize-resource/index.ts","../../src/hooks/accessControl/useCanWithoutCache.ts","../../src/hooks/useSelect/index.ts","../../src/hooks/useTable/index.ts","../../src/hooks/auditLog/useLog/index.ts","../../src/contexts/auditLog/index.tsx","../../src/hooks/auditLog/useLogList/index.ts","../../src/hooks/breadcrumb/index.ts","../../src/hooks/menu/useMenu.tsx","../../src/definitions/helpers/menu/create-resource-key.ts","../../src/definitions/helpers/menu/create-tree.ts","../../src/hooks/useMeta/index.ts","../../src/components/pages/login/index.tsx","../../src/components/pages/auth/index.tsx","../../src/components/pages/auth/components/login/index.tsx","../../src/components/pages/auth/components/register/index.tsx","../../src/components/pages/auth/components/forgotPassword/index.tsx","../../src/components/pages/auth/components/updatePassword/index.tsx","../../src/components/pages/ready/index.tsx","../../src/components/pages/welcome/index.tsx","../../src/components/containers/refine/index.tsx","../../src/components/telemetry/index.tsx","../../src/hooks/useTelemetryData/index.ts","../../src/definitions/helpers/check-router-prop-misuse/index.ts","../../src/hooks/router/use-router-misuse-warning/index.ts","../../src/components/undoableQueue/index.tsx","../../src/components/layoutWrapper/index.tsx","../../src/components/authenticated/index.tsx","../../src/components/routeChangeHandler/index.tsx","../../src/components/canAccess/index.tsx","../../src/components/gh-banner/index.tsx","../../src/components/gh-banner/styles.ts","../../src/components/autoSaveIndicator/index.tsx"],"sourcesContent":["export { DevtoolsEvent, DevtoolsEventPayloads } from \"./event-types\";\nexport { TraceType } from \"./trace\";\nexport { Feed, FeedSection } from \"./feed\";\nexport {\n    PackageType,\n    PackageLatestVersionType,\n    AvailablePackageType,\n} from \"./package\";\nexport { RefineHook, Scopes, hooksByScope, scopes } from \"./scopes\";\n\nexport { DevToolsContextProvider, DevToolsContext } from \"./context\";\n\nexport { send } from \"./send\";\nexport { receive } from \"./receive\";\n","import {\n    Mutation,\n    MutationKey,\n    MutationStatus,\n    QueryKey,\n    QueryState,\n    QueryStatus,\n} from \"@tanstack/react-query\";\nimport { TraceType } from \"./trace\";\n\nexport enum DevtoolsEvent {\n    RELOAD = \"devtools:reload\",\n    DEVTOOLS_INIT = \"devtools:init\",\n    DEVTOOLS_HANDSHAKE = \"devtools:handshake\",\n    DEVTOOLS_ALREADY_CONNECTED = \"devtools:already-connected\",\n    ACTIVITY = \"devtools:send-activity\",\n    DEVTOOLS_ACTIVITY_UPDATE = \"devtools:activity-update\",\n    DEVTOOLS_CONNECTED_APP = \"devtools:connected-app\",\n    DEVTOOLS_DISCONNECTED_APP = \"devtools:disconnected-app\",\n    DEVTOOLS_HIGHLIGHT_IN_MONITOR = \"devtools:highlight-in-monitor\",\n    DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION = \"devtools:highlight-in-monitor-action\",\n    DEVTOOLS_LOGIN_SUCCESS = \"devtools:login-success\",\n    DEVTOOLS_RELOAD_AFTER_LOGIN = \"devtools:reload-after-login\",\n}\n\ntype Timestamps = {\n    createdAt: number;\n    updatedAt: number;\n};\n\ntype ActivityPayload =\n    | {\n          type: \"mutation\";\n          identifier: string;\n          key?: MutationKey;\n          status?: MutationStatus;\n          trace?: TraceType[];\n          state: Mutation<any, any, any, any>[\"state\"];\n          variables?: Mutation<any, any, any, any>[\"state\"][\"variables\"];\n          hookName: string;\n          resourcePath: string | null;\n          legacyKey: boolean;\n      }\n    | {\n          type: \"query\";\n          identifier: string;\n          key?: QueryKey;\n          status?: QueryStatus;\n          trace?: TraceType[];\n          state: QueryState<any, any>;\n          hookName: string;\n          resourcePath: string | null;\n          legacyKey: boolean;\n      };\n\nexport type DevtoolsEventPayloads = {\n    [DevtoolsEvent.RELOAD]: {};\n    [DevtoolsEvent.DEVTOOLS_INIT]: { url: string };\n    [DevtoolsEvent.DEVTOOLS_HANDSHAKE]: { url: string };\n    [DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED]: { url: string };\n    [DevtoolsEvent.ACTIVITY]: ActivityPayload;\n    [DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE]: {\n        updatedActivities: (ActivityPayload & Timestamps)[];\n    };\n    [DevtoolsEvent.DEVTOOLS_CONNECTED_APP]: { url: string | null };\n    [DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP]: {};\n    [DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR]: { name: string };\n    [DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION]: { name: string };\n    [DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS]: {};\n    [DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN]: {};\n};\n","export type RefineHook =\n    | \"useCan\"\n    | \"useLog\"\n    | \"useLogList\"\n    | \"useCreate\"\n    | \"useCreateMany\"\n    | \"useCustom\"\n    | \"useCustomMutation\"\n    | \"useDelete\"\n    | \"useDeleteMany\"\n    | \"useInfiniteList\"\n    | \"useList\"\n    | \"useMany\"\n    | \"useOne\"\n    | \"useUpdate\"\n    | \"useUpdateMany\"\n    | \"useForgotPassword\"\n    | \"useGetIdentity\"\n    | \"useIsAuthenticated\"\n    | \"useLogin\"\n    | \"useLogout\"\n    | \"useOnError\"\n    | \"usePermissions\"\n    | \"useRegister\"\n    | \"useUpdatePassword\";\n\nexport type Scopes = \"data\" | \"audit-log\" | \"access-control\" | \"auth\";\n\nexport const scopes: Record<RefineHook, Scopes> = {\n    useCan: \"access-control\",\n    useLog: \"audit-log\",\n    useLogList: \"audit-log\",\n    useCreate: \"data\",\n    useCreateMany: \"data\",\n    useCustom: \"data\",\n    useCustomMutation: \"data\",\n    useDelete: \"data\",\n    useDeleteMany: \"data\",\n    useInfiniteList: \"data\",\n    useList: \"data\",\n    useMany: \"data\",\n    useOne: \"data\",\n    useUpdate: \"data\",\n    useUpdateMany: \"data\",\n    useForgotPassword: \"auth\",\n    useGetIdentity: \"auth\",\n    useIsAuthenticated: \"auth\",\n    useLogin: \"auth\",\n    useLogout: \"auth\",\n    useOnError: \"auth\",\n    usePermissions: \"auth\",\n    useRegister: \"auth\",\n    useUpdatePassword: \"auth\",\n};\n\nexport const hooksByScope = Object.entries(scopes).reduce(\n    (acc, [hook, scope]) => {\n        if (!acc[scope]) {\n            acc[scope] = [];\n        }\n\n        acc[scope].push(hook as RefineHook);\n\n        return acc;\n    },\n    {} as Record<Scopes, RefineHook[]>,\n);\n","import React from \"react\";\nimport { DevtoolsEvent } from \"./event-types\";\nimport { send } from \"./send\";\nimport { receive } from \"./receive\";\n\ntype DevToolsContextValue = {\n    __devtools: boolean;\n    port: number;\n    url: string;\n    secure: boolean;\n    ws: WebSocket | null;\n    devtoolsUrl?: string;\n};\n\nexport const DevToolsContext = React.createContext<DevToolsContextValue>({\n    __devtools: false,\n    port: 5002,\n    url: \"localhost\",\n    secure: false,\n    ws: null,\n});\n\ntype Props = React.PropsWithChildren<\n    Partial<Pick<DevToolsContextValue, \"port\" | \"__devtools\">>\n>;\n\nexport const DevToolsContextProvider: React.FC<Props> = ({\n    __devtools,\n    port,\n    children,\n}) => {\n    const [values, setValues] = React.useState<DevToolsContextValue>({\n        __devtools: __devtools ?? false,\n        port: port ?? 5002,\n        url: \"localhost\",\n        secure: false,\n        ws: null,\n    });\n\n    const [ws, setWs] = React.useState<WebSocket | null>(null);\n\n    React.useEffect(() => {\n        const wsInstance = new WebSocket(\n            `${values.secure ? \"wss\" : \"ws\"}://localhost:${values.port}`,\n        );\n\n        const unsubscribe = receive(\n            wsInstance,\n            DevtoolsEvent.DEVTOOLS_HANDSHAKE,\n            (data) => {\n                setValues((v) => ({\n                    ...v,\n                    devtoolsUrl: data.url,\n                }));\n                unsubscribe();\n            },\n        );\n\n        wsInstance.addEventListener(\"open\", () => {\n            if (!values.__devtools) {\n                send(wsInstance, DevtoolsEvent.DEVTOOLS_INIT, {\n                    url: window.location.origin,\n                });\n            }\n        });\n\n        setWs(wsInstance);\n\n        return () => {\n            unsubscribe();\n\n            wsInstance.close(1000, window.location.origin);\n        };\n    }, []);\n\n    const contextValues = React.useMemo<DevToolsContextValue>(\n        () => ({\n            ...values,\n            ws,\n        }),\n        [values, ws],\n    );\n\n    return (\n        <DevToolsContext.Provider value={contextValues}>\n            {children}\n        </DevToolsContext.Provider>\n    );\n};\n","import { DevtoolsEvent, DevtoolsEventPayloads } from \"./event-types\";\n\nexport async function send<T extends DevtoolsEvent>(\n    ws: WebSocket,\n    event: T,\n    payload: DevtoolsEventPayloads[T],\n) {\n    // check if the socket is open\n    // if not, wait for it to open\n    if (ws.readyState !== ws.OPEN) {\n        await new Promise<void>((resolve) => {\n            const listener = () => {\n                ws.send(JSON.stringify({ event, payload }));\n                resolve();\n                ws.removeEventListener(\"open\", listener);\n            };\n\n            ws.addEventListener(\"open\", listener);\n        });\n        return;\n    } else {\n        ws.send(JSON.stringify({ event, payload }));\n        return;\n    }\n}\n","// receive ws message by adding a listener to the ws object\n\nimport { DevtoolsEvent, DevtoolsEventPayloads } from \"./event-types\";\n\nexport function receive<T extends DevtoolsEvent>(\n    ws: WebSocket,\n    event: T,\n    callback: (payload: DevtoolsEventPayloads[T]) => void,\n) {\n    const listener = (e: MessageEvent) => {\n        const { event: receivedEvent, payload } = JSON.parse(e.data);\n        if (event === receivedEvent) {\n            callback(payload);\n        }\n    };\n\n    ws.addEventListener(\"message\", listener);\n\n    return () => {\n        ws.removeEventListener(\"message\", listener);\n    };\n}\n","export { getTrace } from \"./get-trace\";\nexport { getXRay } from \"./get-xray\";\nexport { useQuerySubscription } from \"./use-query-subscription\";\n","import ErrorStackParser from \"error-stack-parser\";\nimport { cleanStack } from \"./clean-stack\";\nimport { isRefineStack } from \"./is-refine-stack\";\nimport { getPackageNameFromFilename } from \"./get-package-name-from-filename\";\nimport { TraceType } from \"@refinedev/devtools-shared\";\n\nexport function getTrace() {\n    if (__DEV_CONDITION__ !== \"development\") {\n        return [];\n    } else {\n        try {\n            const error = new Error();\n            const stack = ErrorStackParser.parse(error);\n            const clean = cleanStack(stack);\n            const traces = clean\n                .map(\n                    (frame) =>\n                        ({\n                            file: frame.fileName,\n                            line: frame.lineNumber,\n                            column: frame.columnNumber,\n                            function: frame.functionName,\n                            isRefine: isRefineStack(frame.fileName),\n                            packageName: getPackageNameFromFilename(\n                                frame.fileName,\n                            ),\n                        } as TraceType),\n                )\n                .filter((trace) => trace.function);\n            return traces.slice(1);\n        } catch (error) {\n            return [];\n        }\n    }\n}\n","import type { StackFrame } from \"error-stack-parser\";\n\nconst unrelatedFunctionName = \"renderWithHooks\";\n\nexport const cleanStack = (stack: StackFrame[]) => {\n    const firstUnrelatedIndex = stack.findIndex(\n        (frame) => frame.functionName === unrelatedFunctionName,\n    );\n\n    if (firstUnrelatedIndex !== -1) {\n        return stack.slice(0, firstUnrelatedIndex);\n    }\n\n    return stack;\n};\n","export const REFINE_PACKAGE_FILEPATH_REGEXP =\n    __DEV_CONDITION__ !== \"development\"\n        ? /node_modules\\/refinedev\\/(?<name>.*?)\\//\n        : /\\/refine\\/packages\\/(?<name>.*?)\\//;\n","import { REFINE_PACKAGE_FILEPATH_REGEXP } from \"./constants\";\n\nexport const isRefineStack = (filename?: string) => {\n    if (!filename) return false;\n\n    const match = filename.match(REFINE_PACKAGE_FILEPATH_REGEXP);\n\n    return !!match;\n};\n","import { REFINE_PACKAGE_FILEPATH_REGEXP } from \"./constants\";\n\nexport const getPackageNameFromFilename = (filename?: string) => {\n    if (!filename) return;\n\n    const match = filename.match(REFINE_PACKAGE_FILEPATH_REGEXP);\n\n    const name = match?.groups?.name;\n\n    if (!name) return;\n\n    return `@refinedev/${name}`;\n};\n","import {\n    DevtoolsEvent,\n    DevtoolsEventPayloads,\n    RefineHook,\n    scopes,\n} from \"@refinedev/devtools-shared\";\n\nexport type Activity =\n    DevtoolsEventPayloads[DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE][\"updatedActivities\"][number];\n\nexport const getResourcePath = (\n    hookName: RefineHook,\n    legacyKey: boolean,\n): string | null => {\n    if (scopes[hookName] === \"auth\") {\n        return null;\n    }\n    if (hookName === \"useCan\") {\n        if (legacyKey) {\n            return \"key[1].resource\";\n        } else {\n            return \"key[1]\";\n        }\n    }\n    if (scopes[hookName] === \"audit-log\") {\n        if (hookName === \"useLog\") {\n            return \"variables.resource\";\n        }\n        return \"key[1]\";\n    }\n    if (scopes[hookName] === \"data\") {\n        if (hookName === \"useCustom\" || hookName === \"useCustomMutation\") {\n            return null;\n        }\n        switch (hookName) {\n            case \"useList\":\n            case \"useInfiniteList\":\n            case \"useOne\":\n            case \"useMany\":\n                if (legacyKey) {\n                    return \"key[1]\";\n                } else {\n                    return \"key[2]\";\n                }\n            case \"useCreate\":\n            case \"useCreateMany\":\n            case \"useDelete\":\n            case \"useDeleteMany\":\n            case \"useUpdate\":\n            case \"useUpdateMany\":\n                return \"variables.resource\";\n        }\n    }\n    return null;\n};\n","import { RefineHook, TraceType } from \"@refinedev/devtools-shared\";\nimport { getTrace } from \"./get-trace\";\nimport { getResourcePath } from \"./get-resource-path\";\n\nexport type XRayResponse = {\n    hookName: string;\n    trace: TraceType[];\n    resourcePath: string | null;\n    legacyKey: boolean;\n};\n\nexport function getXRay(hookName: string, legacyKey: boolean): XRayResponse {\n    if (__DEV_CONDITION__ !== \"development\") {\n        return {\n            hookName: \"\",\n            trace: [],\n            resourcePath: null,\n            legacyKey: false,\n        };\n    } else {\n        const trace = getTrace().slice(1);\n\n        const resourcePath = getResourcePath(hookName as RefineHook, legacyKey);\n\n        return {\n            hookName,\n            trace,\n            resourcePath,\n            legacyKey,\n        };\n    }\n}\n","import { DevToolsContext } from \"@refinedev/devtools-shared\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport React, { useContext } from \"react\";\nimport { createQueryListener, createMutationListener } from \"./listeners\";\n\nexport const useQuerySubscription =\n    __DEV_CONDITION__ !== \"development\"\n        ? () => ({})\n        : (queryClient: QueryClient) => {\n              const { ws } = useContext(DevToolsContext);\n              const queryCacheSubscription = React.useRef<() => void>();\n              const mutationCacheSubscription = React.useRef<() => void>();\n\n              React.useEffect(() => {\n                  if (!ws) return () => 0;\n\n                  const queryCache = queryClient.getQueryCache();\n\n                  const queryListener = createQueryListener(ws);\n\n                  queryCache.getAll().forEach(queryListener);\n\n                  queryCacheSubscription.current = queryCache.subscribe(\n                      ({ query, type }) =>\n                          (type === \"added\" || type === \"updated\") &&\n                          queryListener(query),\n                  );\n\n                  return () => {\n                      queryCacheSubscription.current?.();\n                  };\n              }, [ws, queryClient]);\n\n              React.useEffect(() => {\n                  if (!ws) return () => 0;\n\n                  const mutationCache = queryClient.getMutationCache();\n\n                  const mutationListener = createMutationListener(ws);\n\n                  mutationCache.getAll().forEach(mutationListener);\n\n                  mutationCacheSubscription.current = mutationCache.subscribe(\n                      ({ mutation, type }) =>\n                          (type === \"added\" || type === \"updated\") &&\n                          mutationListener(mutation),\n                  );\n\n                  return () => {\n                      mutationCacheSubscription.current?.();\n                  };\n              }, [ws, queryClient]);\n\n              return {};\n          };\n","import { DevtoolsEvent, send } from \"@refinedev/devtools-shared\";\nimport { Mutation, Query } from \"@tanstack/react-query\";\n\nimport { createIdentifier } from \"./create-identifier\";\nimport { XRayResponse } from \"./get-xray\";\n\nexport const createMutationListener =\n    (ws: WebSocket) => (mutation?: Mutation) => {\n        if (!mutation?.meta?.trace) return;\n\n        const meta: XRayResponse = mutation?.meta as any;\n\n        new Promise<void>((resolve) => {\n            send(ws, DevtoolsEvent.ACTIVITY, {\n                type: \"mutation\",\n                identifier: createIdentifier(\n                    mutation?.options.mutationKey,\n                    mutation?.meta?.trace as any,\n                ),\n                key: mutation?.options.mutationKey as any,\n                status: mutation?.state.status,\n                state: mutation?.state,\n                variables: mutation?.state?.variables,\n                ...meta,\n            });\n            resolve();\n        });\n\n        // console.table({\n        //     type: \"mutation\",\n        //     key: mutation?.options.mutationKey,\n        //     id: mutation?.mutationId,\n        //     status: mutation?.state.status,\n        //     trace: mutation?.meta?.trace,\n        //     state: mutation?.state,\n        //     variables: mutation?.state?.variables,\n        // });\n    };\n\nexport const createQueryListener = (ws: WebSocket) => (query: Query) => {\n    if (!query?.meta?.trace) return;\n\n    const meta: XRayResponse = query?.meta as any;\n\n    new Promise<void>((resolve) => {\n        send(ws, DevtoolsEvent.ACTIVITY, {\n            type: \"query\",\n            identifier: createIdentifier(\n                query.queryKey,\n                query.meta?.trace as any,\n            ),\n            key: query.queryKey as any,\n            status: query.state.status,\n            state: query.state,\n            ...meta,\n        });\n        resolve();\n    });\n\n    // console.table({\n    //     type: \"query\",\n    //     key: query.queryKey,\n    //     status: query.state.status,\n    //     trace: query.meta?.trace,\n    //     state: query.state,\n    // });\n};\n","import { TraceType } from \"@refinedev/devtools-shared\";\nimport { MutationKey, QueryKey } from \"@tanstack/react-query\";\n\nexport const createIdentifier = (\n    key?: QueryKey | MutationKey,\n    trace?: TraceType[],\n) => {\n    const simpleTrace = trace?.map(\n        (t) =>\n            `${t.file}:${t.line}:${t.column}#${t.function}-${t.packageName}-${\n                t.isRefine ? 1 : 0\n            }`,\n    );\n    const str = JSON.stringify([...(key ?? []), ...(simpleTrace ?? [])]);\n\n    return str;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useNavigation,\n    useTranslate,\n    useResource,\n    useGo,\n    useRouterType,\n} from \"@hooks\";\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/packages/documentation/routers/} for more details.\n */\nexport const ErrorComponent: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const translate = useTranslate();\n    const { push } = useNavigation();\n    const go = useGo();\n    const routerType = useRouterType();\n\n    const { resource, action } = useResource();\n\n    useEffect(() => {\n        if (resource && action) {\n            setErrorMessage(\n                translate(\n                    \"pages.error.info\",\n                    {\n                        action: action,\n                        resource: resource.name,\n                    },\n                    `You may have forgotten to add the \"${action}\" component to \"${resource.name}\" resource.`,\n                ),\n            );\n        }\n    }, [resource, action]);\n\n    return (\n        <>\n            <h1>\n                {translate(\n                    \"pages.error.404\",\n                    undefined,\n                    \"Sorry, the page you visited does not exist.\",\n                )}\n            </h1>\n            {errorMessage && <p>{errorMessage}</p>}\n            <button\n                onClick={() => {\n                    if (routerType === \"legacy\") {\n                        push(\"/\");\n                    } else {\n                        go({ to: \"/\" });\n                    }\n                }}\n            >\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\n            </button>\n        </>\n    );\n};\n","import {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useKeys } from \"@hooks/useKeys\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { PermissionResponse } from \"../../../interfaces\";\n\nexport type UsePermissionsLegacyProps<TData = any> = {\n    v3LegacyAuthProviderCompatible: true;\n    options?: UseQueryOptions<TData>;\n};\n\nexport type UsePermissionsProps<TData = PermissionResponse> = {\n    v3LegacyAuthProviderCompatible?: false;\n    options?: UseQueryOptions<TData>;\n};\n\nexport type UsePermissionsCombinedProps<TData = any> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    options?: UseQueryOptions<TData> | UseQueryOptions<PermissionResponse>;\n};\n\nexport type UsePermissionsLegacyReturnType<TData = any> = UseQueryResult<\n    TData,\n    unknown\n>;\n\nexport type UsePermissionsReturnType<TData = PermissionResponse> =\n    UseQueryResult<TData, unknown>;\n\nexport type UsePermissionsCombinedReturnType<TData = any> =\n    | UseQueryResult<TData, unknown>\n    | UseQueryResult<PermissionResponse, unknown>;\n\nexport function usePermissions<TData = any>(\n    props: UsePermissionsLegacyProps<TData>,\n): UsePermissionsLegacyReturnType<TData>;\n\nexport function usePermissions<TData = PermissionResponse>(\n    props?: UsePermissionsProps<TData>,\n): UsePermissionsReturnType<TData>;\n\nexport function usePermissions<TData = any>(\n    props?: UsePermissionsCombinedProps<TData>,\n): UsePermissionsCombinedReturnType<TData>;\n\n/**\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/usePermissions} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport function usePermissions<TData = any>({\n    v3LegacyAuthProviderCompatible = false,\n    options,\n}: UsePermissionsProps<TData> | UsePermissionsLegacyProps<TData> = {}):\n    | UsePermissionsReturnType\n    | UsePermissionsLegacyReturnType<TData> {\n    const { getPermissions: legacyGetPermission } = useLegacyAuthContext();\n    const { getPermissions } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery<TData>({\n        queryKey: keys().auth().action(\"permissions\").get(preferLegacyKeys),\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        queryFn:\n            (getPermissions as (params?: unknown) => Promise<TData>) ??\n            (() => Promise.resolve(undefined)),\n        enabled: !v3LegacyAuthProviderCompatible && !!getPermissions,\n        ...(v3LegacyAuthProviderCompatible ? {} : options),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? {} : options?.meta),\n            ...getXRay(\"usePermissions\", preferLegacyKeys),\n        },\n    });\n\n    const legacyQueryResponse = useQuery<TData>({\n        queryKey: [\n            ...keys().auth().action(\"permissions\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        queryFn: legacyGetPermission ?? (() => Promise.resolve(undefined)),\n        enabled: v3LegacyAuthProviderCompatible && !!legacyGetPermission,\n        ...(v3LegacyAuthProviderCompatible ? options : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? options?.meta : {}),\n            ...getXRay(\"usePermissions\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible ? legacyQueryResponse : queryResponse;\n}\n","import qs, { IStringifyOptions } from \"qs\";\nimport unionWith from \"lodash-es/unionWith\";\nimport differenceWith from \"lodash-es/differenceWith\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    CrudFilters,\n    CrudSorting,\n    CrudFilter,\n    CrudSort,\n    CrudOperators,\n    SortOrder,\n} from \"../../interfaces\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\n\nexport const parseTableParams = (url: string) => {\n    const { current, pageSize, sorter, sorters, filters } = qs.parse(\n        url.substring(1), // remove first ? character\n    );\n\n    return {\n        parsedCurrent: current && Number(current),\n        parsedPageSize: pageSize && Number(pageSize),\n        parsedSorter: (pickNotDeprecated(sorters, sorter) as CrudSorting) ?? [],\n        parsedFilters: (filters as CrudFilters) ?? [],\n    };\n};\n\nexport const parseTableParamsFromQuery = (params: any) => {\n    const url = qs.stringify(params);\n    return parseTableParams(`/${url}`);\n};\n\n/**\n * @internal This function is used to stringify table params from the useTable hook.\n */\nexport const stringifyTableParams = (params: {\n    pagination?: { current?: number; pageSize?: number };\n    sorters: CrudSorting;\n    filters: CrudFilters;\n    [key: string]: any;\n}): string => {\n    const options: IStringifyOptions = {\n        skipNulls: true,\n        arrayFormat: \"indices\",\n        encode: false,\n    };\n    const { pagination, sorter, sorters, filters, ...rest } = params;\n\n    const queryString = qs.stringify(\n        {\n            ...rest,\n            ...(pagination ? pagination : {}),\n            sorters: pickNotDeprecated(sorters, sorter),\n            filters,\n        },\n        options,\n    );\n\n    return queryString;\n};\n\nexport const compareFilters = (\n    left: CrudFilter,\n    right: CrudFilter,\n): boolean => {\n    if (\n        left.operator !== \"and\" &&\n        left.operator !== \"or\" &&\n        right.operator !== \"and\" &&\n        right.operator !== \"or\"\n    ) {\n        return (\n            (\"field\" in left ? left.field : undefined) ==\n                (\"field\" in right ? right.field : undefined) &&\n            left.operator == right.operator\n        );\n    }\n\n    return (\n        (\"key\" in left ? left.key : undefined) ==\n            (\"key\" in right ? right.key : undefined) &&\n        left.operator == right.operator\n    );\n};\n\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\n    left.field == right.field;\n// Keep only one CrudFilter per type according to compareFilters\n// Items in the array that is passed first to unionWith have higher priority\n// CrudFilter items with undefined values are necessary to signify no filter\n// After union, don't keep CrudFilter items with undefined value in the result\n// Items in the arrays with higher priority are put at the end.\nexport const unionFilters = (\n    permanentFilter: CrudFilters,\n    newFilters: CrudFilters,\n    prevFilters: CrudFilters = [],\n): CrudFilters => {\n    const isKeyRequired = newFilters.filter(\n        (f) => (f.operator === \"or\" || f.operator === \"and\") && !f.key,\n    );\n\n    if (isKeyRequired.length > 1) {\n        warnOnce(\n            true,\n            `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \\nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`,\n        );\n    }\n\n    return unionWith(\n        permanentFilter,\n        newFilters,\n        prevFilters,\n        compareFilters,\n    ).filter(\n        (crudFilter) =>\n            crudFilter.value !== undefined &&\n            crudFilter.value !== null &&\n            (crudFilter.operator !== \"or\" ||\n                (crudFilter.operator === \"or\" &&\n                    crudFilter.value.length !== 0)) &&\n            (crudFilter.operator !== \"and\" ||\n                (crudFilter.operator === \"and\" &&\n                    crudFilter.value.length !== 0)),\n    );\n};\n\nexport const unionSorters = (\n    permanentSorter: CrudSorting,\n    newSorters: CrudSorting,\n): CrudSorting =>\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\n        (crudSorter) =>\n            crudSorter.order !== undefined && crudSorter.order !== null,\n    );\n// Prioritize filters in the permanentFilter and put it at the end of result array\nexport const setInitialFilters = (\n    permanentFilter: CrudFilters,\n    defaultFilter: CrudFilters,\n): CrudFilters => [\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\n    ...permanentFilter,\n];\n\nexport const setInitialSorters = (\n    permanentSorter: CrudSorting,\n    defaultSorter: CrudSorting,\n): CrudSorting => [\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\n    ...permanentSorter,\n];\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    if (!sorter) {\n        return undefined;\n    }\n\n    const sortItem = sorter.find((item) => item.field === columnName);\n\n    if (sortItem) {\n        return sortItem.order as SortOrder;\n    }\n\n    return undefined;\n};\n\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    const filter = filters?.find((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { operator, field } = filter;\n            return field === columnName && operator === operatorType;\n        }\n        return undefined;\n    });\n\n    if (filter) {\n        return filter.value || [];\n    }\n\n    return undefined;\n};\n","export const userFriendlySecond = (miliseconds: number): number => {\n    return miliseconds / 1000; //convert to seconds\n};\n","import zip from \"lodash-es/zip\";\nimport fromPairs from \"lodash-es/fromPairs\";\nimport { MapDataFn } from \"../../../interfaces\";\n\nexport const importCSVMapper = <TItem = any, TVariables = any>(\n    data: any[][],\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\n): TVariables[] => {\n    const [headers, ...body] = data;\n    return body\n        .map((entry) => fromPairs(zip(headers, entry)))\n        .map((item: any, index, array: any) =>\n            mapData.call(undefined, item, index, array),\n        );\n};\n","import pluralize from \"pluralize\";\nimport { humanizeString } from \"@definitions\";\n\n/**\n * A method that the internal uses\n * @internal\n * @deprecated use `useUserFriendlyName` instead.\n */\nexport const userFriendlyResourceName = (\n    resource = \"\",\n    type: \"singular\" | \"plural\",\n): string => {\n    const humanizeResource = humanizeString(resource);\n    if (type === \"singular\") {\n        return pluralize.singular(humanizeResource);\n    }\n    return pluralize.plural(humanizeResource);\n};\n","export const handleUseParams = (params: any = {}): any => {\n    if (params?.id) {\n        return {\n            ...params,\n            id: decodeURIComponent(params.id),\n        };\n    }\n    return params;\n};\n","/*\n * Returns first value that is not undefined.\n * @internal This is an internal helper function. Please do not use externally.\n */\nexport const pickNotDeprecated = <T extends unknown[]>(\n    ...args: T\n): T[never] => {\n    return args.find((arg) => typeof arg !== \"undefined\");\n};\n","import { BaseKey } from \"src/interfaces\";\n\ntype ParametrizedDataActions = \"list\" | \"infinite\";\ntype IdRequiredDataActions = \"one\";\ntype IdsRequiredDataActions = \"many\";\ntype DataMutationActions =\n    | \"custom\"\n    | \"customMutation\"\n    | \"create\"\n    | \"createMany\"\n    | \"update\"\n    | \"updateMany\"\n    | \"delete\"\n    | \"deleteMany\";\n\ntype AuthActionType =\n    | \"login\"\n    | \"logout\"\n    | \"identity\"\n    | \"register\"\n    | \"forgotPassword\"\n    | \"check\"\n    | \"onError\"\n    | \"permissions\"\n    | \"updatePassword\";\n\ntype AuditActionType = \"list\" | \"log\" | \"rename\";\n\ntype IdType = BaseKey;\ntype IdsType = IdType[];\n\ntype ParamsType = any;\n\ntype KeySegment = string | IdType | IdsType | ParamsType;\n\nexport function arrayFindIndex<T>(array: T[], slice: T[]): number {\n    return array.findIndex(\n        (item, index) =>\n            index <= array.length - slice.length &&\n            slice.every(\n                (sliceItem, sliceIndex) =>\n                    array[index + sliceIndex] === sliceItem,\n            ),\n    );\n}\n\nexport function arrayReplace<T>(\n    array: T[],\n    partToBeReplaced: T[],\n    newPart: T[],\n): T[] {\n    const newArray: T[] = [...array];\n    const startIndex = arrayFindIndex(array, partToBeReplaced);\n\n    if (startIndex !== -1) {\n        newArray.splice(startIndex, partToBeReplaced.length, ...newPart);\n    }\n\n    return newArray;\n}\n\nexport function stripUndefined(segments: KeySegment[]) {\n    return segments.filter((segment) => segment !== undefined);\n}\n\nfunction convertToLegacy(segments: KeySegment[]) {\n    // for `list`, `many` and `one`\n    if (segments[0] === \"data\") {\n        // [data, dpName, resource, action, ...];\n        const newSegments = segments.slice(1);\n\n        if (newSegments[2] === \"many\") {\n            newSegments[2] = \"getMany\";\n        } else if (newSegments[2] === \"infinite\") {\n            newSegments[2] = \"list\";\n        } else if (newSegments[2] === \"one\") {\n            newSegments[2] = \"detail\";\n        } else if (newSegments[1] === \"custom\") {\n            const newParams = {\n                ...newSegments[2],\n            };\n            delete newParams.method;\n            delete newParams.url;\n\n            return [\n                newSegments[0],\n                newSegments[1],\n                newSegments[2].method,\n                newSegments[2].url,\n                newParams,\n            ];\n        }\n\n        return newSegments;\n    }\n    // for `audit` -> `logList`\n    if (segments[0] === \"audit\") {\n        // [audit, resource, action, params] (for log and list)\n        // or\n        // [audit, action, params] (for rename)\n        if (segments[2] === \"list\") {\n            return [\"logList\", segments[1], segments[3]];\n        }\n    }\n    // for `access` -> `useCan`\n    if (segments[0] === \"access\") {\n        // [access, resource, action, params]\n        if (segments.length === 4) {\n            return [\n                \"useCan\",\n                {\n                    resource: segments[1],\n                    action: segments[2],\n                    ...segments[3], // params: { params, enabled }\n                },\n            ];\n        }\n    }\n    // for `auth`\n    if (segments[0] === \"auth\") {\n        if (arrayFindIndex(segments, [\"auth\", \"login\"]) !== -1) {\n            return [\"useLogin\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"logout\"]) !== -1) {\n            return [\"useLogout\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"identity\"]) !== -1) {\n            return [\"getUserIdentity\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"register\"]) !== -1) {\n            return [\"useRegister\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"forgotPassword\"]) !== -1) {\n            return [\"useForgotPassword\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"check\"]) !== -1) {\n            return [\"useAuthenticated\", segments[2]]; // [auth, check, params]\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"onError\"]) !== -1) {\n            return [\"useCheckError\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"permissions\"]) !== -1) {\n            return [\"usePermissions\"];\n        }\n        if (arrayFindIndex(segments, [\"auth\", \"updatePassword\"]) !== -1) {\n            return [\"useUpdatePassword\"];\n        }\n    }\n    return segments;\n}\n\nclass BaseKeyBuilder {\n    segments: KeySegment[] = [];\n\n    constructor(segments: KeySegment[] = []) {\n        this.segments = segments;\n    }\n\n    key() {\n        return this.segments;\n    }\n\n    legacy() {\n        return convertToLegacy(this.segments);\n    }\n\n    get(legacy?: boolean) {\n        return legacy ? this.legacy() : this.segments;\n    }\n}\n\nclass ParamsKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    params(paramsValue?: ParamsType) {\n        return new BaseKeyBuilder([...this.segments, paramsValue]);\n    }\n}\n\nclass DataIdRequiringKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    id(idValue?: IdType) {\n        return new ParamsKeyBuilder([\n            ...this.segments,\n            idValue ? String(idValue) : undefined,\n        ]);\n    }\n}\n\nclass DataIdsRequiringKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    ids(...idsValue: IdsType) {\n        return new ParamsKeyBuilder([\n            ...this.segments,\n            ...(idsValue.length ? [idsValue.map((el) => String(el))] : []),\n        ]);\n    }\n}\n\nclass DataResourceKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(actionType: ParametrizedDataActions): ParamsKeyBuilder;\n    action(actionType: IdRequiredDataActions): DataIdRequiringKeyBuilder;\n    action(actionType: IdsRequiredDataActions): DataIdsRequiringKeyBuilder;\n    action(\n        actionType:\n            | ParametrizedDataActions\n            | IdRequiredDataActions\n            | IdsRequiredDataActions,\n    ):\n        | ParamsKeyBuilder\n        | DataIdRequiringKeyBuilder\n        | DataIdsRequiringKeyBuilder {\n        if (actionType === \"one\") {\n            return new DataIdRequiringKeyBuilder([\n                ...this.segments,\n                actionType,\n            ]);\n        } else if (actionType === \"many\") {\n            return new DataIdsRequiringKeyBuilder([\n                ...this.segments,\n                actionType,\n            ]);\n        } else if ([\"list\", \"infinite\"].includes(actionType)) {\n            return new ParamsKeyBuilder([...this.segments, actionType]);\n        } else {\n            throw new Error(\"Invalid action type\");\n        }\n    }\n}\n\nclass DataKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    resource(resourceName?: string) {\n        return new DataResourceKeyBuilder([...this.segments, resourceName]);\n    }\n\n    mutation(mutationName: DataMutationActions) {\n        return new ParamsKeyBuilder([\n            ...(mutationName === \"custom\" ? this.segments : [this.segments[0]]),\n            mutationName,\n        ]);\n    }\n}\n\nclass AuthKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(actionType: AuthActionType) {\n        return new ParamsKeyBuilder([...this.segments, actionType]);\n    }\n}\n\nclass AccessResourceKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(resourceName: string) {\n        return new ParamsKeyBuilder([...this.segments, resourceName]);\n    }\n}\n\nclass AccessKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    resource(resourceName?: string) {\n        return new AccessResourceKeyBuilder([...this.segments, resourceName]);\n    }\n}\n\nclass AuditActionKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    action(actionType: Extract<AuditActionType, \"list\">) {\n        return new ParamsKeyBuilder([...this.segments, actionType]);\n    }\n}\n\nclass AuditKeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    resource(resourceName?: string) {\n        return new AuditActionKeyBuilder([...this.segments, resourceName]);\n    }\n\n    action(actionType: Extract<AuditActionType, \"rename\" | \"log\">) {\n        return new ParamsKeyBuilder([...this.segments, actionType]);\n    }\n}\n\nexport class KeyBuilder extends BaseKeyBuilder {\n    constructor(segments: KeySegment[]) {\n        super(segments);\n    }\n\n    data(name?: string) {\n        return new DataKeyBuilder([\"data\", name || \"default\"]);\n    }\n\n    auth() {\n        return new AuthKeyBuilder([\"auth\"]);\n    }\n\n    access() {\n        return new AccessKeyBuilder([\"access\"]);\n    }\n\n    audit() {\n        return new AuditKeyBuilder([\"audit\"]);\n    }\n}\n\nexport const keys = () => new KeyBuilder([]);\n","import { IQueryKeys } from \"src/interfaces\";\nimport { QueryKey } from \"@tanstack/react-query\";\n\nimport { MetaQuery } from \"src/interfaces\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\nimport { keys as newKeys } from \"../keys\";\n\n/**\n * @deprecated `queryKeys` is deprecated. Please use `keys` instead.\n */\nexport const queryKeys = (\n    resource?: string,\n    dataProviderName?: string,\n    meta?: MetaQuery,\n    /**\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery | undefined,\n): IQueryKeys => {\n    const providerName = dataProviderName || \"default\";\n    const keys: IQueryKeys = {\n        all: [providerName],\n        resourceAll: [providerName, resource || \"\"],\n        list: (config) => [\n            ...keys.resourceAll,\n            \"list\",\n            {\n                ...config,\n                ...(pickNotDeprecated(meta, metaData) || {}),\n            } as QueryKey,\n        ],\n        many: (ids) =>\n            [\n                ...keys.resourceAll,\n                \"getMany\",\n                (ids && ids.map(String)) as QueryKey,\n                { ...(pickNotDeprecated(meta, metaData) || {}) } as QueryKey,\n            ].filter((item) => item !== undefined),\n        detail: (id) => [\n            ...keys.resourceAll,\n            \"detail\",\n            id?.toString(),\n            { ...(pickNotDeprecated(meta, metaData) || {}) } as QueryKey,\n        ],\n        logList: (meta) =>\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\n                (item) => item !== undefined,\n            ),\n    };\n    return keys;\n};\n\nexport const queryKeysReplacement = (preferLegacyKeys?: boolean) => {\n    return (\n        resource?: string,\n        dataProviderName?: string,\n        meta?: MetaQuery,\n        /**\n         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n         */\n        metaData?: MetaQuery | undefined,\n    ): IQueryKeys => {\n        const providerName = dataProviderName || \"default\";\n\n        const keys: IQueryKeys = {\n            all: newKeys().data(providerName).get(preferLegacyKeys),\n            resourceAll: newKeys()\n                .data(dataProviderName)\n                .resource(resource ?? \"\")\n                .get(preferLegacyKeys),\n            list: (config) =>\n                newKeys()\n                    .data(dataProviderName)\n                    .resource(resource ?? \"\")\n                    .action(\"list\")\n                    .params({\n                        ...config,\n                        ...(pickNotDeprecated(meta, metaData) || {}),\n                    })\n                    .get(preferLegacyKeys),\n            many: (ids) =>\n                newKeys()\n                    .data(dataProviderName)\n                    .resource(resource ?? \"\")\n                    .action(\"many\")\n                    .ids(...(ids ?? []))\n                    .params({\n                        ...(pickNotDeprecated(meta, metaData) || {}),\n                    })\n                    .get(preferLegacyKeys),\n            detail: (id) =>\n                newKeys()\n                    .data(dataProviderName)\n                    .resource(resource ?? \"\")\n                    .action(\"one\")\n                    .id(id ?? \"\")\n                    .params({\n                        ...(pickNotDeprecated(meta, metaData) || {}),\n                    })\n                    .get(preferLegacyKeys),\n            logList: (meta) =>\n                [\n                    ...newKeys()\n                        .audit()\n                        .resource(resource)\n                        .action(\"list\")\n                        .params(meta)\n                        .get(preferLegacyKeys),\n                    metaData as QueryKey,\n                ].filter((item) => item !== undefined),\n        };\n\n        return keys;\n    };\n};\n","export const hasPermission = (\n    permissions: string[] | undefined,\n    action: string | undefined,\n): boolean => {\n    if (!permissions || !action) {\n        return false;\n    }\n    return !!permissions.find((i) => i === action);\n};\n","/**\n * Check if a segment is a parameter. (e.g. :id)\n */\nexport const isParameter = (segment: string) => {\n    return segment.startsWith(\":\");\n};\n","/**\n * Split a path to segments.\n */\nexport const splitToSegments = (path: string) => {\n    const segments = path.split(\"/\").filter((segment) => segment !== \"\");\n    return segments;\n};\n","import { splitToSegments } from \"./split-to-segments\";\n\n/**\n * Checks if the both routes have the same number of segments.\n */\nexport const isSegmentCountsSame = (route: string, resourceRoute: string) => {\n    const routeSegments = splitToSegments(route);\n    const resourceRouteSegments = splitToSegments(resourceRoute);\n\n    return routeSegments.length === resourceRouteSegments.length;\n};\n","/**\n * Remove leading and trailing slashes from a route.\n */\nexport const removeLeadingTrailingSlashes = (route: string) => {\n    return route.replace(/^\\/|\\/$/g, \"\");\n};\n","import { isParameter } from \"./is-parameter\";\nimport { isSegmentCountsSame } from \"./is-segment-counts-same\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\nimport { splitToSegments } from \"./split-to-segments\";\n\n/**\n * This function if the route and resourceRoute match by segments.\n * - First, trailing and leading slashes are removed\n * - Then, the route and resourceRoute are split to segments and checked if they have the same number of segments\n * - Then, each segment is checked if it is a parameter or if it matches the resourceRoute segment\n * - If all segments match, the function returns true, otherwise false\n */\nexport const checkBySegments = (route: string, resourceRoute: string) => {\n    const stdRoute = removeLeadingTrailingSlashes(route);\n    const stdResourceRoute = removeLeadingTrailingSlashes(resourceRoute);\n    // we need to check if the route and resourceRoute have the same number of segments\n    // if not, we can't match them\n    if (!isSegmentCountsSame(stdRoute, stdResourceRoute)) {\n        return false;\n    }\n\n    const routeSegments = splitToSegments(stdRoute);\n    const resourceRouteSegments = splitToSegments(stdResourceRoute);\n\n    return resourceRouteSegments.every((segment, index) => {\n        return isParameter(segment) || segment === routeSegments[index];\n    });\n};\n","import { Action } from \"src/interfaces\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\n\n/**\n * This helper function returns the default path for a given action and resource.\n * It also applies the parentPrefix if provided.\n * This is used by the legacy router and the new router if the resource doesn't provide a custom path.\n */\nexport const getDefaultActionPath = (\n    resourceName: string,\n    action: Action,\n    parentPrefix?: string,\n): string => {\n    const cleanParentPrefix = removeLeadingTrailingSlashes(parentPrefix || \"\");\n\n    let path = `${cleanParentPrefix}${\n        cleanParentPrefix ? \"/\" : \"\"\n    }${resourceName}`;\n\n    if (action === \"list\") {\n        path = `${path}`;\n    } else if (action === \"create\") {\n        path = `${path}/create`;\n    } else if (action === \"edit\") {\n        path = `${path}/edit/:id`;\n    } else if (action === \"show\") {\n        path = `${path}/show/:id`;\n    } else if (action === \"clone\") {\n        path = `${path}/clone/:id`;\n    }\n\n    return `/${path.replace(/^\\//, \"\")}`;\n};\n","import { IResourceItem } from \"src/interfaces\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\n/**\n * Returns the parent resource of the given resource.\n * Works both with the deprecated `parentName` and the new `parent` property.\n */\nexport const getParentResource = (\n    resource: IResourceItem,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    const parentName = pickNotDeprecated(\n        resource.meta?.parent,\n        resource.options?.parent,\n        resource.parentName,\n    );\n\n    if (!parentName) {\n        return undefined;\n    }\n\n    const parentResource = resources.find(\n        (resource) => (resource.identifier ?? resource.name) === parentName,\n    );\n\n    /**\n     * If the parent resource is not found, we return a resource object with the name of the parent resource.\n     * Because we still want to have nesting and prefixing for the resource even if the parent is not explicitly defined.\n     */\n    return parentResource ?? { name: parentName };\n};\n","import { ResourceProps } from \"src/interfaces/bindings/resource\";\nimport { getParentResource } from \"./get-parent-resource\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\n\n/**\n * Returns the parent prefix for a resource\n * - If `legacy` is provided, the computation is based on the `route` option of the resource\n */\nexport const getParentPrefixForResource = (\n    resource: ResourceProps,\n    resources: ResourceProps[],\n    /**\n     * Uses legacy route if true (`options.route`)\n     */\n    legacy?: boolean,\n): string | undefined => {\n    const parents: ResourceProps[] = [];\n\n    let parent = getParentResource(resource, resources);\n\n    while (parent) {\n        parents.push(parent);\n        parent = getParentResource(parent, resources);\n    }\n\n    if (parents.length === 0) {\n        return undefined;\n    }\n\n    return `/${parents\n        .reverse()\n        .map((parent) => {\n            const v = legacy\n                ? parent.options?.route ?? parent.name\n                : parent.name;\n            return removeLeadingTrailingSlashes(v);\n        })\n        .join(\"/\")}`;\n};\n","import { Action, IResourceItem } from \"src/interfaces\";\nimport { getDefaultActionPath } from \"./get-default-action-path\";\nimport { getParentPrefixForResource } from \"./get-parent-prefix-for-resource\";\n\nexport type ResourceActionRoute = {\n    action: Action;\n    resource: IResourceItem;\n    route: string;\n};\n\n/**\n * This function returns all the routes for available actions for a resource.\n * - If the action is a function, it means we're fallbacking to default path for the action\n * - If the action is a string, it means we don't have the component, but we have the route\n * - If the action is an object, it means we have the component and the route\n * - It will return an array of objects with the action, the resource and the route\n */\nexport const getActionRoutesFromResource = (\n    resource: IResourceItem,\n    resources: IResourceItem[],\n    /**\n     * Uses legacy route if true (`options.route`)\n     */\n    legacy?: boolean,\n) => {\n    const actions: ResourceActionRoute[] = [];\n\n    const actionList: Action[] = [\"list\", \"show\", \"edit\", \"create\", \"clone\"];\n\n    const parentPrefix = getParentPrefixForResource(\n        resource,\n        resources,\n        legacy,\n    );\n\n    actionList.forEach((action) => {\n        const item =\n            legacy && action === \"clone\" ? resource.create : resource[action];\n\n        let route: string | undefined = undefined;\n\n        if (typeof item === \"function\" || legacy) {\n            // means we're fallbacking to default path for the action\n            route = getDefaultActionPath(\n                legacy\n                    ? resource.meta?.route ??\n                          resource.options?.route ??\n                          resource.name\n                    : resource.name,\n                action,\n                legacy ? parentPrefix : undefined,\n            );\n        } else if (typeof item === \"string\") {\n            // means we don't have the component, but we have the route\n            route = item;\n        } else if (typeof item === \"object\") {\n            // means we have the component and the route\n            route = item.path;\n        }\n\n        if (route) {\n            actions.push({\n                action,\n                resource,\n                route: `/${route.replace(/^\\//, \"\")}`,\n            });\n        }\n    });\n\n    return actions;\n};\n","import { ResourceActionRoute } from \"./get-action-routes-from-resource\";\nimport { isParameter } from \"./is-parameter\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\nimport { splitToSegments } from \"./split-to-segments\";\n\n/**\n * Picks the most eligible route from the given matched routes.\n * - If there's only one route, it returns it.\n * - If there's more than one route, it picks the best non-greedy match.\n */\nexport const pickMatchedRoute = (\n    routes: ResourceActionRoute[],\n): ResourceActionRoute | undefined => {\n    // these routes are all matched, we should pick the least parametrized one\n\n    // no routes, no match\n    if (routes.length === 0) {\n        return undefined;\n    }\n\n    // no need to calculate the route segments if there's only one route\n    if (routes.length === 1) {\n        return routes[0];\n    }\n\n    // remove trailing and leading slashes\n    // split them to segments\n    const sanitizedRoutes = routes.map((route) => ({\n        ...route,\n        splitted: splitToSegments(removeLeadingTrailingSlashes(route.route)),\n    }));\n\n    // at this point, before calling this function, we already checked for segment lenghts and expect all of them to be the same\n    const segmentsCount = sanitizedRoutes[0]?.splitted.length ?? 0;\n\n    let eligibleRoutes: Array<(typeof sanitizedRoutes)[number]> = [\n        ...sanitizedRoutes,\n    ];\n\n    // loop through the segments\n    for (let i = 0; i < segmentsCount; i++) {\n        const nonParametrizedRoutes = eligibleRoutes.filter(\n            (route) => !isParameter(route.splitted[i]),\n        );\n\n        if (nonParametrizedRoutes.length === 0) {\n            // keep the eligible routes as they are\n            continue;\n        }\n        if (nonParametrizedRoutes.length === 1) {\n            // no need to continue, we found the route\n            eligibleRoutes = nonParametrizedRoutes;\n            break;\n        }\n\n        // we have more than one non-parametrized route, we need to check the next segment\n        eligibleRoutes = nonParametrizedRoutes;\n    }\n\n    return eligibleRoutes[0];\n};\n","import { Action, IResourceItem } from \"../../../interfaces\";\nimport { checkBySegments } from \"./check-by-segments\";\nimport { getActionRoutesFromResource } from \"./get-action-routes-from-resource\";\nimport { pickMatchedRoute } from \"./pick-matched-route\";\n\n/**\n * Match the resource from the route\n * - It will calculate all possible routes for resources and their actions\n * - It will check if the route matches any of the possible routes\n * - It will return the most eligible resource and action\n */\nexport const matchResourceFromRoute = (\n    route: string,\n    resources: IResourceItem[],\n): {\n    found: boolean;\n    resource?: IResourceItem;\n    action?: Action;\n    matchedRoute?: string;\n} => {\n    const allActionRoutes = resources.flatMap((resource) => {\n        return getActionRoutesFromResource(resource, resources);\n    });\n\n    const allFound = allActionRoutes.filter((actionRoute) => {\n        return checkBySegments(route, actionRoute.route);\n    });\n\n    const mostEligible = pickMatchedRoute(allFound);\n\n    return {\n        found: !!mostEligible,\n        resource: mostEligible?.resource,\n        action: mostEligible?.action,\n        matchedRoute: mostEligible?.route,\n    };\n};\n","import { ResourceProps } from \"src/interfaces/bindings/resource\";\nimport { getParentPrefixForResource } from \"../router\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\n/**\n * generates route for the resource based on parents and custom routes\n * @deprecated this is a **legacy** function and works only with the old resource definition\n */\nexport const routeGenerator = (\n    item: ResourceProps,\n    resourcesFromProps: ResourceProps[],\n): string | undefined => {\n    let route;\n\n    const parentPrefix = getParentPrefixForResource(\n        item,\n        resourcesFromProps,\n        true,\n    );\n\n    if (parentPrefix) {\n        const meta = pickNotDeprecated(item.meta, item.options);\n        route = `${parentPrefix}/${meta?.route ?? item.name}`;\n    } else {\n        route = item.options?.route ?? item.name;\n    }\n\n    return `/${route.replace(/^\\//, \"\")}`;\n};\n","import { pickNotDeprecated } from \"@definitions/helpers/pickNotDeprecated\";\nimport { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\n\n/**\n * @deprecated This helper is deprecated. Please use `createTree` instead.\n */\nexport const createTreeView = (\n    resources: IResourceItem[] | IMenuItem[],\n): ITreeMenu[] | ITreeMenu[] => {\n    const tree = [];\n    const resourcesRouteObject: { [key: string]: any } = {};\n    const resourcesNameObject: { [key: string]: any } = {};\n    let parent: IResourceItem | IMenuItem;\n    let child: ITreeMenu;\n\n    for (let i = 0; i < resources.length; i++) {\n        parent = resources[i];\n\n        const route =\n            parent.route ??\n            pickNotDeprecated(parent?.meta, parent.options)?.route ??\n            \"\";\n\n        resourcesRouteObject[route] = parent;\n        resourcesRouteObject[route][\"children\"] = [];\n\n        resourcesNameObject[parent.name] = parent;\n        resourcesNameObject[parent.name][\"children\"] = [];\n    }\n\n    for (const name in resourcesRouteObject) {\n        if (resourcesRouteObject.hasOwnProperty(name)) {\n            child = resourcesRouteObject[name];\n\n            if (child.parentName && resourcesNameObject[child.parentName]) {\n                resourcesNameObject[child.parentName][\"children\"].push(child);\n            } else {\n                tree.push(child);\n            }\n        }\n    }\n\n    return tree;\n};\n","export const humanizeString = (text: string): string => {\n    text = text.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\");\n    text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\");\n\n    text = text\n        .toLowerCase()\n        .replace(/[_-]+/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return text;\n};\n// https://www.npmjs.com/package/humanize-string\n","import React from \"react\";\nimport pluralize from \"pluralize\";\nimport { humanizeString } from \"../../definitions/helpers/humanizeString\";\n\nimport {\n    IRefineContextOptions,\n    IRefineContext,\n    IRefineContextProvider,\n} from \"./IRefineContext\";\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\n\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\n\nexport const defaultRefineOptions: IRefineContextOptions = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    warnWhenUnsavedChanges: false,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\",\n    },\n    overtime: {\n        interval: 1000,\n    },\n    textTransformers: {\n        humanize: humanizeString,\n        plural: pluralize.plural,\n        singular: pluralize.singular,\n    },\n    disableServerSideValidation: false,\n};\n\nexport const RefineContext = React.createContext<IRefineContext>({\n    hasDashboard: false,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: false,\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    Title: undefined,\n    Sider: undefined,\n    Header: undefined,\n    Footer: undefined,\n    Layout: DefaultLayout,\n    OffLayoutArea: undefined,\n    liveMode: \"off\",\n    onLiveEvent: undefined,\n    options: defaultRefineOptions,\n});\n\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\n    hasDashboard,\n    mutationMode,\n    warnWhenUnsavedChanges,\n    syncWithLocation,\n    undoableTimeout,\n    children,\n    DashboardPage,\n    Title,\n    Layout = DefaultLayout,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n    LoginPage = DefaultLoginPage,\n    catchAll,\n    liveMode = \"off\",\n    onLiveEvent,\n    options,\n}) => {\n    return (\n        <RefineContext.Provider\n            value={{\n                hasDashboard,\n                mutationMode,\n                warnWhenUnsavedChanges,\n                syncWithLocation,\n                Title,\n                undoableTimeout,\n                Layout,\n                Header,\n                Sider,\n                Footer,\n                OffLayoutArea,\n                DashboardPage,\n                LoginPage,\n                catchAll,\n                liveMode,\n                onLiveEvent,\n                options,\n            }}\n        >\n            {children}\n        </RefineContext.Provider>\n    );\n};\n","import React from \"react\";\n\nimport { LayoutProps } from \"../../../interfaces\";\n\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\n    return <div>{children}</div>;\n};\n","import { QueryClient, QueryClientConfig } from \"@tanstack/react-query\";\n\nimport { defaultRefineOptions } from \"@contexts/refine\";\nimport {\n    IRefineContextOptions,\n    IRefineOptions,\n    LiveModeProps,\n    MutationMode,\n} from \"src/interfaces\";\n\ntype HandleRefineOptionsProps = {\n    options?: IRefineOptions;\n    mutationMode?: MutationMode;\n    syncWithLocation?: boolean;\n    warnWhenUnsavedChanges?: boolean;\n    undoableTimeout?: number;\n    liveMode?: LiveModeProps[\"liveMode\"];\n    disableTelemetry?: boolean;\n    reactQueryClientConfig?: QueryClientConfig;\n    reactQueryDevtoolConfig?: any | false;\n};\n\ntype HandleRefineOptionsReturnValues = {\n    optionsWithDefaults: IRefineContextOptions;\n    disableTelemetryWithDefault: boolean;\n    reactQueryWithDefaults: {\n        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;\n        devtoolConfig: false | any;\n    };\n};\n\nexport const handleRefineOptions = ({\n    options,\n    disableTelemetry,\n    liveMode,\n    mutationMode,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    syncWithLocation,\n    undoableTimeout,\n    warnWhenUnsavedChanges,\n}: HandleRefineOptionsProps = {}): HandleRefineOptionsReturnValues => {\n    const optionsWithDefaults: IRefineContextOptions = {\n        breadcrumb: options?.breadcrumb,\n        mutationMode:\n            options?.mutationMode ??\n            mutationMode ??\n            defaultRefineOptions.mutationMode,\n        undoableTimeout:\n            options?.undoableTimeout ??\n            undoableTimeout ??\n            defaultRefineOptions.undoableTimeout,\n        syncWithLocation:\n            options?.syncWithLocation ??\n            syncWithLocation ??\n            defaultRefineOptions.syncWithLocation,\n        warnWhenUnsavedChanges:\n            options?.warnWhenUnsavedChanges ??\n            warnWhenUnsavedChanges ??\n            defaultRefineOptions.warnWhenUnsavedChanges,\n        liveMode:\n            options?.liveMode ?? liveMode ?? defaultRefineOptions.liveMode,\n        redirect: {\n            afterCreate:\n                options?.redirect?.afterCreate ??\n                defaultRefineOptions.redirect.afterCreate,\n            afterClone:\n                options?.redirect?.afterClone ??\n                defaultRefineOptions.redirect.afterClone,\n            afterEdit:\n                options?.redirect?.afterEdit ??\n                defaultRefineOptions.redirect.afterEdit,\n        },\n        overtime: options?.overtime ?? defaultRefineOptions.overtime,\n        textTransformers: {\n            humanize:\n                options?.textTransformers?.humanize ??\n                defaultRefineOptions.textTransformers.humanize,\n            plural:\n                options?.textTransformers?.plural ??\n                defaultRefineOptions.textTransformers.plural,\n            singular:\n                options?.textTransformers?.singular ??\n                defaultRefineOptions.textTransformers.singular,\n        },\n        disableServerSideValidation:\n            options?.disableServerSideValidation ??\n            defaultRefineOptions.disableServerSideValidation,\n        projectId: options?.projectId,\n        useNewQueryKeys: options?.useNewQueryKeys,\n    };\n\n    const disableTelemetryWithDefault =\n        options?.disableTelemetry ?? disableTelemetry ?? false;\n\n    const reactQueryWithDefaults = {\n        clientConfig:\n            options?.reactQuery?.clientConfig ?? reactQueryClientConfig ?? {},\n        devtoolConfig:\n            options?.reactQuery?.devtoolConfig ?? reactQueryDevtoolConfig ?? {},\n    };\n\n    return {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    };\n};\n","import { Action, IRefineContextOptions, RedirectAction } from \"src/interfaces\";\n\ntype RedirectPageProps = {\n    redirectFromProps?: RedirectAction;\n    action: Action;\n    redirectOptions: IRefineContextOptions[\"redirect\"];\n};\n\nexport const redirectPage = ({\n    redirectFromProps,\n    action,\n    redirectOptions,\n}: RedirectPageProps): RedirectAction => {\n    if (redirectFromProps || redirectFromProps === false) {\n        return redirectFromProps;\n    }\n\n    switch (action) {\n        case \"clone\":\n            return redirectOptions.afterClone;\n        case \"create\":\n            return redirectOptions.afterCreate;\n        case \"edit\":\n            return redirectOptions.afterEdit;\n        default:\n            return false;\n    }\n};\n","type EachResolve<TResolve, Response> = (\n    result: TResolve,\n    index: number,\n) => Response;\ntype EachReject<TReject, Response> = (\n    error: TReject,\n    index: number,\n) => Response;\n\nexport const sequentialPromises = async <\n    TResolve = unknown,\n    TReject = unknown,\n    TResolveResponse = unknown,\n    TRejectResponse = unknown,\n>(\n    promises: (() => Promise<TResolve>)[],\n    onEachResolve: EachResolve<TResolve, TResolveResponse>,\n    onEachReject: EachReject<TReject, TRejectResponse>,\n): Promise<(TResolveResponse | TRejectResponse)[]> => {\n    const results = [];\n    // @ts-expect-error Remove this when we enable `downLevelIterations`\n    for (const [index, promise] of promises.entries()) {\n        try {\n            const result = await promise();\n\n            results.push(onEachResolve(result, index));\n        } catch (error) {\n            results.push(onEachReject(error as TReject, index));\n        }\n    }\n    return results;\n};\n","import { IResourceItem } from \"src/interfaces/bindings/resource\";\nimport { removeLeadingTrailingSlashes } from \"../router/remove-leading-trailing-slashes\";\n\n/**\n * Picks the resource based on the provided identifier.\n * Identifier fallbacks to `name` if `identifier` is not explicitly provided to the resource.\n * If legacy is true, then resource is matched by `route` first and then by `name`.\n */\nexport const pickResource = (\n    identifier?: string,\n    resources: IResourceItem[] = [],\n    /**\n     * If true, the identifier will be checked for `route` and `name` properties\n     */\n    legacy = false,\n): IResourceItem | undefined => {\n    if (!identifier) {\n        return undefined;\n    }\n\n    if (legacy) {\n        const resourceByRoute = resources.find(\n            (r) =>\n                removeLeadingTrailingSlashes(r.route ?? \"\") ===\n                removeLeadingTrailingSlashes(identifier),\n        );\n\n        const resource = resourceByRoute\n            ? resourceByRoute\n            : resources.find((r) => r.name === identifier);\n\n        return resource;\n    }\n\n    let resource = resources.find((r) => r.identifier === identifier);\n    if (!resource) {\n        resource = resources.find((r) => r.name === identifier);\n    }\n\n    return resource;\n};\n","import { IResourceItem } from \"src/interfaces/bindings/resource\";\nimport { pickResource } from \"../pick-resource\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\n/**\n * Picks the data provider name based on the provided name or fallbacks to resource definition, or `default`.\n */\nexport const pickDataProvider = (\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) => {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    /**\n     * In this helper, we don't do `route` based matching therefore there's no need to check for `legacy` behaviors.\n     */\n    const resource = pickResource(resourceName, resources);\n\n    const meta = pickNotDeprecated(resource?.meta, resource?.options);\n\n    if (meta?.dataProviderName) {\n        return meta.dataProviderName;\n    }\n\n    return \"default\";\n};\n","export const handleMultiple = async <TData = unknown>(\n    promises: Promise<{ data: TData }>[],\n): Promise<{ data: TData[] }> => {\n    return {\n        data: (await Promise.all(promises)).map((res) => res.data),\n    };\n};\n","import { GetListResponse } from \"../../../interfaces\";\n\nexport const getNextPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.next) {\n        return cursor.next;\n    }\n\n    const current = pagination?.current || 1;\n\n    const pageSize = pagination?.pageSize || 10;\n    const totalPages = Math.ceil((lastPage.total || 0) / pageSize);\n\n    return current < totalPages ? Number(current) + 1 : undefined;\n};\n\nexport const getPreviousPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.prev) {\n        return cursor.prev;\n    }\n\n    const current = pagination?.current || 1;\n\n    return current === 1 ? undefined : current - 1;\n};\n","import {\n    IResourceItem,\n    ResourceProps,\n} from \"../../../interfaces/bindings/resource\";\n\nimport { routeGenerator } from \"../routeGenerator\";\n\n/**\n * For the legacy definition of resources, we did a basic transformation for provided resources\n * - This is meant to provide an easier way to access properties.\n * - In the new definition, we don't need to do transformations and properties can be accessed via helpers or manually.\n * This is kept for backward compability\n */\nexport const legacyResourceTransform = (resources: ResourceProps[]) => {\n    const _resources: IResourceItem[] = [];\n\n    resources.forEach((resource) => {\n        _resources.push({\n            ...resource,\n            label: resource.meta?.label ?? resource.options?.label,\n            route: routeGenerator(resource, resources),\n            canCreate: !!resource.create,\n            canEdit: !!resource.edit,\n            canShow: !!resource.show,\n            canDelete: resource.canDelete,\n        });\n    });\n\n    return _resources;\n};\n","import { splitToSegments } from \"./split-to-segments\";\nimport { removeLeadingTrailingSlashes } from \"./remove-leading-trailing-slashes\";\nimport { isParameter } from \"./is-parameter\";\n\n/**\n * Picks the route parameters from the given route.\n * (e.g. /users/:id/posts/:postId => ['id', 'postId'])\n */\nexport const pickRouteParams = (route: string) => {\n    const segments = splitToSegments(removeLeadingTrailingSlashes(route));\n\n    return segments.flatMap((s) => {\n        if (isParameter(s)) {\n            return [s.slice(1)];\n        }\n\n        return [];\n    });\n};\n","/**\n * Prepares the route params by checking the existing params and meta data.\n * Meta data is prioritized over params.\n * Params are prioritized over predetermined id, action and resource.\n * This means, we can use `meta` for user supplied params (both manually or from the query string)\n */\nexport const prepareRouteParams = <\n    TRouteParams extends Record<string, unknown> = Record<string, unknown>,\n>(\n    routeParams: (keyof TRouteParams)[],\n    meta: Record<string, unknown> = {},\n): Partial<TRouteParams> => {\n    return routeParams.reduce((acc, key) => {\n        const value = meta[key as string];\n        if (typeof value !== \"undefined\") {\n            acc[key] = value as TRouteParams[keyof TRouteParams];\n        }\n        return acc;\n    }, {} as Partial<TRouteParams>);\n};\n","import { MetaQuery, ParseResponse } from \"src/interfaces\";\nimport { pickRouteParams } from \"./pick-route-params\";\nimport { prepareRouteParams } from \"./prepare-route-params\";\n\n/**\n * This function will compose a route with the given params and meta.\n * - A route can have parameters like (eg: /users/:id)\n * - First we pick the route params from the route (eg: [id])\n * - Then we prepare the route params with the given params and meta (eg: { id: 1 })\n * - Then we replace the route params with the prepared route params (eg: /users/1)\n */\nexport const composeRoute = (\n    designatedRoute: string,\n    resourceMeta: MetaQuery = {},\n    parsed: ParseResponse = {},\n    meta: Record<string, unknown> = {},\n): string => {\n    // pickRouteParams (from the route)\n    const routeParams = pickRouteParams(designatedRoute);\n    // prepareRouteParams (from route params, params and meta)\n    const preparedRouteParams = prepareRouteParams(routeParams, {\n        ...resourceMeta,\n        ...(typeof parsed?.id !== \"undefined\" ? { id: parsed.id } : {}),\n        ...(typeof parsed?.action !== \"undefined\"\n            ? { action: parsed.action }\n            : {}),\n        ...(typeof parsed?.resource !== \"undefined\"\n            ? { resource: parsed.resource }\n            : {}),\n        ...parsed?.params,\n        ...meta,\n    });\n    // replace route params with prepared route params\n    return designatedRoute.replace(/:([^\\/]+)/g, (match, key) => {\n        const fromParams = preparedRouteParams[key];\n        if (typeof fromParams !== \"undefined\") {\n            return `${fromParams}`;\n        }\n        return match;\n    });\n};\n","import React, { PropsWithChildren } from \"react\";\n\nimport { useNavigation } from \"@hooks\";\nimport { ILegacyAuthContext, IAuthBindingsContext } from \"../../interfaces\";\n\n/**\n * @deprecated `LegacyAuthContext` is deprecated with refine@4, use `AuthBindingsContext` instead, however, we still support `LegacyAuthContext` for backward compatibility.\n */\nexport const LegacyAuthContext = React.createContext<ILegacyAuthContext>({});\n\n/**\n * @deprecated `LegacyAuthContextProvider` is deprecated with refine@4, use `AuthBindingsContextProvider` instead, however, we still support `LegacyAuthContextProvider` for backward compatibility.\n */\nexport const LegacyAuthContextProvider: React.FC<\n    ILegacyAuthContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, isProvided, ...authOperations }) => {\n    const { replace } = useNavigation();\n\n    const loginFunc = async (params: any) => {\n        try {\n            const result = await authOperations.login?.(params);\n\n            return result;\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const registerFunc = async (params: any) => {\n        try {\n            const result = await authOperations.register?.(params);\n\n            return result;\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const logoutFunc = async (params: any) => {\n        try {\n            const redirectPath = await authOperations.logout?.(params);\n\n            return redirectPath;\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const checkAuthFunc = async (params: any) => {\n        try {\n            await authOperations.checkAuth?.(params);\n            return Promise.resolve();\n        } catch (error) {\n            if ((error as { redirectPath?: string })?.redirectPath) {\n                replace((error as { redirectPath: string }).redirectPath);\n            }\n\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <LegacyAuthContext.Provider\n            value={{\n                ...authOperations,\n                login: loginFunc,\n                logout: logoutFunc,\n                checkAuth: checkAuthFunc,\n                register: registerFunc,\n                isProvided,\n            }}\n        >\n            {children}\n        </LegacyAuthContext.Provider>\n    );\n};\n\nexport const AuthBindingsContext = React.createContext<\n    Partial<IAuthBindingsContext>\n>({});\n\nexport const AuthBindingsContextProvider: React.FC<\n    PropsWithChildren<IAuthBindingsContext>\n> = ({ children, isProvided, ...authBindings }) => {\n    const handleLogin = async (params: unknown) => {\n        try {\n            const result = await authBindings.login?.(params);\n\n            return result;\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in login: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleRegister = async (params: unknown) => {\n        try {\n            const result = await authBindings.register?.(params);\n\n            return result;\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in register: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleLogout = async (params: unknown) => {\n        try {\n            const result = await authBindings.logout?.(params);\n\n            return result;\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in logout: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleCheck = async (params: unknown) => {\n        try {\n            const result = await authBindings.check?.(params);\n\n            return Promise.resolve(result);\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in check: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleForgotPassword = async (params: unknown) => {\n        try {\n            const result = await authBindings.forgotPassword?.(params);\n\n            return Promise.resolve(result);\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in forgotPassword: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    const handleUpdatePassword = async (params: unknown) => {\n        try {\n            const result = await authBindings.updatePassword?.(params);\n            return Promise.resolve(result);\n        } catch (error) {\n            console.warn(\n                \"Unhandled Error in updatePassword: refine always expects a resolved promise.\",\n                error,\n            );\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AuthBindingsContext.Provider\n            value={{\n                ...authBindings,\n                login: handleLogin as IAuthBindingsContext[\"login\"],\n                logout: handleLogout as IAuthBindingsContext[\"logout\"],\n                check: handleCheck as IAuthBindingsContext[\"check\"],\n                register: handleRegister as IAuthBindingsContext[\"register\"],\n                forgotPassword:\n                    handleForgotPassword as IAuthBindingsContext[\"forgotPassword\"],\n                updatePassword:\n                    handleUpdatePassword as IAuthBindingsContext[\"updatePassword\"],\n                isProvided,\n            }}\n        >\n            {children}\n        </AuthBindingsContext.Provider>\n    );\n};\n\n/**\n * @deprecated `useLegacyAuthContext` is deprecated with refine@4, use `useAuthBindingsContext` instead, however, we still support `useLegacyAuthContext` for backward compatibility.\n */\nexport const useLegacyAuthContext = () => {\n    const context = React.useContext(LegacyAuthContext);\n\n    return context;\n};\n\nexport const useAuthBindingsContext = () => {\n    const context = React.useContext(AuthBindingsContext);\n\n    return context;\n};\n","import { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\n/**\n * @returns authProvider or legacyAuthProvider if provided, otherwise null\n * @internal\n * NOTE: Will be removed in v5\n */\nexport const useActiveAuthProvider = () => {\n    const legacyAuthProvider = useLegacyAuthContext();\n    const authProvider = useAuthBindingsContext();\n\n    if (authProvider.isProvided) {\n        return { isLegacy: false, ...authProvider };\n    }\n\n    if (legacyAuthProvider.isProvided) {\n        // legacyAuthProvider interface is different from authProvider interface\n        // we need to convert it to authProvider interface for simple usage\n        // in the future, we will remove legacyAuthProvider\n        return {\n            isLegacy: true,\n            ...legacyAuthProvider,\n            check: legacyAuthProvider.checkAuth,\n            onError: legacyAuthProvider.checkError,\n            getIdentity: legacyAuthProvider.getUserIdentity,\n        };\n    }\n\n    return null;\n};\n","import { Pagination } from \"../../../interfaces\";\nimport { pickNotDeprecated } from \"../pickNotDeprecated\";\n\ntype HandlePaginationParamsProps = {\n    hasPagination?: boolean;\n    pagination?: Pagination;\n    configPagination?: Pagination;\n};\n\nexport const handlePaginationParams = ({\n    hasPagination,\n    pagination,\n    configPagination,\n}: HandlePaginationParamsProps = {}): Required<Pagination> => {\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const mode = pagination?.mode ?? hasPaginationString;\n\n    const current =\n        pickNotDeprecated(pagination?.current, configPagination?.current) ?? 1;\n\n    const pageSize =\n        pickNotDeprecated(pagination?.pageSize, configPagination?.pageSize) ??\n        10;\n\n    return {\n        current,\n        pageSize,\n        mode,\n    };\n};\n","import { useState, useEffect } from \"react\";\n\nexport const useMediaQuery = (query: string) => {\n    const [matches, setMatches] = useState(false);\n\n    useEffect(() => {\n        const media = window.matchMedia(query);\n        if (media.matches !== matches) {\n            setMatches(media.matches);\n        }\n        const listener = () => setMatches(media.matches);\n        window.addEventListener(\"resize\", listener);\n        return () => window.removeEventListener(\"resize\", listener);\n    }, [matches, query]);\n\n    return matches;\n};\n","import type { useTranslate } from \"@hooks/translate\";\n\nexport const safeTranslate = (\n    translate: ReturnType<typeof useTranslate>,\n    key: string,\n    defaultMessage?: string,\n    options?: any,\n) => {\n    const translated = options\n        ? translate(key, options, defaultMessage)\n        : translate(key, defaultMessage);\n\n    const fallback = defaultMessage ?? key;\n\n    if (translated === key || typeof translated === \"undefined\") {\n        return fallback;\n    }\n\n    return translated;\n};\n","import { IResourceItem } from \"@contexts/resource\";\nimport { userFriendlyResourceName } from \"../userFriendlyResourceName\";\nimport type { useTranslate } from \"@hooks/translate\";\nimport { safeTranslate } from \"../safe-translate\";\n\n/**\n * Generates document title for the given resource and action.\n */\nexport function generateDefaultDocumentTitle(\n    translate: ReturnType<typeof useTranslate>,\n    resource?: IResourceItem,\n    action?: string,\n    id?: string,\n    resourceName?: string,\n) {\n    const actionPrefixMatcher = {\n        create: \"Create new \",\n        clone: `#${id ?? \"\"} Clone `,\n        edit: `#${id ?? \"\"} Edit `,\n        show: `#${id ?? \"\"} Show `,\n        list: \"\",\n    };\n\n    const identifier = resource?.identifier ?? resource?.name;\n\n    const resourceNameFallback =\n        resource?.label ??\n        resource?.meta?.label ??\n        userFriendlyResourceName(\n            identifier,\n            action === \"list\" ? \"plural\" : \"singular\",\n        );\n\n    const resourceNameWithFallback = resourceName ?? resourceNameFallback;\n\n    const defaultTitle = safeTranslate(\n        translate,\n        \"documentTitle.default\",\n        \"refine\",\n    );\n    const suffix = safeTranslate(\n        translate,\n        \"documentTitle.suffix\",\n        \" | refine\",\n    );\n    let autoGeneratedTitle = defaultTitle;\n\n    if (action && identifier) {\n        autoGeneratedTitle = safeTranslate(\n            translate,\n            `documentTitle.${identifier}.${action}`,\n            `${\n                actionPrefixMatcher[\n                    action as keyof typeof actionPrefixMatcher\n                ] ?? \"\"\n            }${resourceNameWithFallback}${suffix}`,\n            { id },\n        );\n    }\n\n    return autoGeneratedTitle;\n}\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseMutationModeType = () => {\n    mutationMode: IRefineContextOptions[\"mutationMode\"];\n    undoableTimeout: IRefineContextOptions[\"undoableTimeout\"];\n};\n\n/**\n * Mutation mode determines which mode the mutation runs with.\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\n * Each mode corresponds to a different type of user experience.\n *\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\n */\nexport const useMutationMode: UseMutationModeType = () => {\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\n\n    return { mutationMode, undoableTimeout };\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\nimport {\n    IRefineContextOptions,\n    IUnsavedWarnContext,\n} from \"../../../interfaces\";\n\ntype UseWarnAboutChangeType = () => {\n    warnWhenUnsavedChanges: IRefineContextOptions[\"warnWhenUnsavedChanges\"];\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\n};\n\n/**\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config#warnwhenunsavedchanges} for more details.\n */\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\n\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\n\n    return {\n        warnWhenUnsavedChanges,\n        warnWhen: Boolean(warnWhen),\n        setWarnWhen: setWarnWhen ?? (() => undefined),\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\n\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\n\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [warnWhen, setWarnWhen] = useState(false);\n\n    return (\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\n            {children}\n        </UnsavedWarnContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseSyncWithLocationType = () => {\n    syncWithLocation: IRefineContextOptions[\"syncWithLocation\"];\n};\n\n/**\n * List query parameter values can be edited manually by typing directly in the URL.\n * To activate this feature `syncWithLocation` needs to be set to `true`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config/#syncwithlocation} for more details.\n */\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\n    const { syncWithLocation } = useContext(RefineContext);\n\n    return { syncWithLocation };\n};\n","import { useContext } from \"react\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { TitleProps } from \"../../interfaces\";\n\n/**\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\n * In this way, it becomes easier for us to access this component in various parts of the application.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/refine/useTitle} for more details.\n */\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\n    const { Title } = useContext(RefineContext);\n\n    return Title;\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useRefineContext = () => {\n    const {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    } = useContext(RefineContext);\n\n    return {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    };\n};\n","import { useRefineContext } from \"@hooks/refine\";\n\n/**\n * A method that the internal uses\n * @internal\n */\nexport const useUserFriendlyName = () => {\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n\n    const getFriendlyName = (\n        name = \"\",\n        type: \"singular\" | \"plural\",\n    ): string => {\n        const humanizeName = textTransformers.humanize(name);\n        if (type === \"singular\") {\n            return textTransformers.singular(humanizeName);\n        }\n        return textTransformers.plural(humanizeName);\n    };\n\n    return getFriendlyName;\n};\n","const isNested = (obj: any) => typeof obj === \"object\" && obj !== null;\nconst isArray = (obj: any) => Array.isArray(obj);\n\nexport const flattenObjectKeys = (obj: any, prefix = \"\") => {\n    if (!isNested(obj)) {\n        return {\n            [prefix]: obj,\n        };\n    }\n\n    return Object.keys(obj).reduce((acc, key) => {\n        const currentPrefix = prefix.length ? prefix + \".\" : \"\";\n\n        if (isNested(obj[key]) && Object.keys(obj[key]).length) {\n            if (isArray(obj[key]) && obj[key].length) {\n                obj[key].forEach((item: unknown[], index: number) => {\n                    Object.assign(\n                        acc,\n                        flattenObjectKeys(\n                            item,\n                            currentPrefix + key + \".\" + index,\n                        ),\n                    );\n                });\n            } else {\n                Object.assign(\n                    acc,\n                    flattenObjectKeys(obj[key], currentPrefix + key),\n                );\n            }\n            // Even if it's a nested object, it should be treated as a key as well\n            acc[currentPrefix + key] = obj[key];\n        } else {\n            acc[currentPrefix + key] = obj[key];\n        }\n        return acc;\n    }, {} as Record<string, unknown>);\n};\n","export const propertyPathToArray = (propertyPath: string) => {\n    return propertyPath\n        .split(\".\")\n        .map((item) => (!isNaN(Number(item)) ? Number(item) : item));\n};\n","export const file2Base64 = (file: any): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n};\n","import { useRefineContext } from \"..\";\nimport { keys } from \"@definitions/index\";\n\nexport const useKeys = () => {\n    const {\n        options: { useNewQueryKeys },\n    } = useRefineContext();\n\n    return {\n        keys,\n        preferLegacyKeys: !useNewQueryKeys,\n    };\n};\n","import {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { IdentityResponse } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseGetIdentityLegacyProps<TData> = {\n    v3LegacyAuthProviderCompatible: true;\n    queryOptions?: UseQueryOptions<TData>;\n};\n\nexport type UseGetIdentityProps<TData = IdentityResponse> = {\n    v3LegacyAuthProviderCompatible?: false;\n    queryOptions?: UseQueryOptions<TData>;\n};\n\nexport type UseGetIdentityCombinedProps<TData = any> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    queryOptions?: UseQueryOptions<TData> | UseQueryOptions<IdentityResponse>;\n};\n\nexport type UseGetIdentityLegacyReturnType<TData> = UseQueryResult<\n    TData,\n    unknown\n>;\n\nexport type UseGetIdentityReturnType<TData = IdentityResponse> = UseQueryResult<\n    TData,\n    unknown\n>;\n\nexport type UsePermissionsCombinedReturnType<TData = any> =\n    | UseQueryResult<TData, unknown>\n    | UseQueryResult<IdentityResponse, unknown>;\n\nexport function useGetIdentity<TData = any>(\n    props: UseGetIdentityLegacyProps<TData>,\n): UseGetIdentityLegacyReturnType<TData>;\n\nexport function useGetIdentity<TData = IdentityResponse>(\n    props?: UseGetIdentityProps<TData>,\n): UseGetIdentityReturnType<TData>;\n\nexport function useGetIdentity<TData = any>(\n    props?: UseGetIdentityCombinedProps<TData>,\n): UsePermissionsCombinedReturnType<TData>;\n\n/**\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useGetIdentity} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport function useGetIdentity<TData = any>({\n    v3LegacyAuthProviderCompatible = false,\n    queryOptions,\n}: UseGetIdentityProps<TData> | UseGetIdentityLegacyProps<TData> = {}):\n    | UseGetIdentityReturnType<TData>\n    | UseGetIdentityLegacyReturnType<TData> {\n    const { getUserIdentity: legacyGetUserIdentity } = useLegacyAuthContext();\n    const { getIdentity } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery<TData>({\n        queryKey: keys().auth().action(\"identity\").get(preferLegacyKeys),\n        // Enabled check for `getIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        queryFn:\n            (getIdentity as (params?: unknown) => Promise<TData>) ??\n            (() => Promise.resolve({})),\n        enabled: !v3LegacyAuthProviderCompatible && !!getIdentity,\n        retry: false,\n        ...(v3LegacyAuthProviderCompatible === true ? {} : queryOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : queryOptions?.meta),\n            ...getXRay(\"useGetIdentity\", preferLegacyKeys),\n        },\n    });\n\n    const legacyQueryResponse = useQuery<TData>({\n        queryKey: [\n            ...keys().auth().action(\"identity\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        queryFn: legacyGetUserIdentity ?? (() => Promise.resolve({})),\n        enabled: v3LegacyAuthProviderCompatible && !!legacyGetUserIdentity,\n        retry: false,\n        ...(v3LegacyAuthProviderCompatible ? queryOptions : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? queryOptions?.meta : {}),\n            ...getXRay(\"useGetIdentity\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible ? legacyQueryResponse : queryResponse;\n}\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useGo, useNavigation, useNotification, useRouterType } from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport {\n    RefineError,\n    OpenNotificationParams,\n    TLogoutData,\n} from \"../../../interfaces\";\nimport { AuthActionResponse } from \"src/interfaces/bindings/auth\";\nimport { useInvalidateAuthStore } from \"../useInvalidateAuthStore\";\nimport { useKeys } from \"@hooks/useKeys\";\n\ntype Variables = {\n    redirectPath?: string | false;\n};\n\nexport type UseLogoutLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLogoutData,\n            Error | RefineError,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseLogoutProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLogoutCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TLogoutData,\n            Error | RefineError,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLogoutLegacyReturnType<TVariables> = UseMutationResult<\n    TLogoutData,\n    Error | RefineError,\n    (TVariables & Variables) | void,\n    unknown\n>;\n\nexport type UseLogoutReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    (TVariables & Variables) | void,\n    unknown\n>;\n\nexport type UseLogoutCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TLogoutData,\n    Error | RefineError,\n    (TVariables & Variables) | void,\n    unknown\n>;\n\nexport function useLogout<TVariables = {}>(\n    props: UseLogoutLegacyProps<TVariables>,\n): UseLogoutLegacyReturnType<TVariables>;\n\nexport function useLogout<TVariables = {}>(\n    props?: UseLogoutProps<TVariables>,\n): UseLogoutReturnType<TVariables>;\n\nexport function useLogout<TVariables = {}>(\n    props?: UseLogoutCombinedProps<TVariables>,\n): UseLogoutCombinedReturnType<TVariables>;\n\n/**\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useLogout} for more details.\n *\n */\nexport function useLogout<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}: UseLogoutProps<TVariables> | UseLogoutLegacyProps<TVariables> = {}):\n    | UseLogoutLegacyReturnType<TVariables>\n    | UseLogoutReturnType<TVariables> {\n    const invalidateAuthStore = useInvalidateAuthStore();\n    const routerType = useRouterType();\n    const go = useGo();\n    const { push } = useNavigation();\n    const { open, close } = useNotification();\n    const { logout: legacyLogoutFromContext } = useLegacyAuthContext();\n    const { logout: logoutFromContext } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        (TVariables & Variables) | void,\n        unknown\n    >({\n        mutationKey: keys().auth().action(\"logout\").get(preferLegacyKeys),\n        mutationFn: logoutFromContext,\n        onSuccess: async (data, variables) => {\n            const { success, error, redirectTo } = data;\n            const { redirectPath } = variables ?? {};\n\n            const redirect = redirectPath ?? redirectTo;\n\n            if (success) {\n                close?.(\"useLogout-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (redirect !== false) {\n                if (routerType === \"legacy\") {\n                    push(redirect ?? \"/login\");\n                } else {\n                    if (redirect) {\n                        go({ to: redirect });\n                    }\n                }\n            }\n\n            await invalidateAuthStore();\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useLogout\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TLogoutData,\n        Error | RefineError,\n        (TVariables & Variables) | void,\n        unknown\n    >({\n        mutationKey: [\n            ...keys().auth().action(\"logout\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        mutationFn: legacyLogoutFromContext,\n        onSuccess: async (data, variables) => {\n            const redirectPath = variables?.redirectPath ?? data;\n\n            if (redirectPath === false) {\n                return;\n            }\n\n            if (redirectPath) {\n                if (routerType === \"legacy\") {\n                    push(redirectPath);\n                } else {\n                    go({ to: redirectPath });\n                }\n                return;\n            }\n\n            if (routerType === \"legacy\") {\n                push(\"/login\");\n            } else {\n                go({ to: \"/login\" });\n            }\n\n            await invalidateAuthStore();\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions?.meta : {}),\n            ...getXRay(\"useLogout\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: error?.name || \"Logout Error\",\n        description: error?.message || \"Something went wrong during logout\",\n    };\n};\n","import { useKeys } from \"@hooks/useKeys\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport const useInvalidateAuthStore = () => {\n    const queryClient = useQueryClient();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const invalidate = async () => {\n        await Promise.all(\n            ([\"check\", \"identity\", \"permissions\"] as const).map((action) =>\n                queryClient.invalidateQueries(\n                    keys().auth().action(action).get(preferLegacyKeys),\n                ),\n            ),\n        );\n    };\n\n    return invalidate;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\nimport qs from \"qs\";\n\nimport {\n    useNavigation,\n    useRouterContext,\n    useNotification,\n    useRouterType,\n    useParsed,\n    useGo,\n} from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\nimport {\n    RefineError,\n    OpenNotificationParams,\n    TLoginData,\n} from \"../../../interfaces\";\nimport { AuthActionResponse } from \"src/interfaces/bindings/auth\";\nimport { useInvalidateAuthStore } from \"../useInvalidateAuthStore\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseLoginLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLoginData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseLoginProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLoginCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TLoginData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseLoginLegacyReturnType<TVariables> = UseMutationResult<\n    TLoginData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseLoginReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseLoginCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TLoginData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useLogin<TVariables = {}>(\n    props: UseLoginLegacyProps<TVariables>,\n): UseLoginLegacyReturnType<TVariables>;\n\nexport function useLogin<TVariables = {}>(\n    props?: UseLoginProps<TVariables>,\n): UseLoginReturnType<TVariables>;\n\nexport function useLogin<TVariables = {}>(\n    props?: UseLoginCombinedProps<TVariables>,\n): UseLoginCombinedReturnType<TVariables>;\n\n/**\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useLogin} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useLogin<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}: UseLoginProps<TVariables> | UseLoginLegacyProps<TVariables> = {}):\n    | UseLoginLegacyReturnType<TVariables>\n    | UseLoginReturnType<TVariables> {\n    const invalidateAuthStore = useInvalidateAuthStore();\n    const routerType = useRouterType();\n\n    const go = useGo();\n    const { replace } = useNavigation();\n\n    const parsed = useParsed();\n\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n\n    const { close, open } = useNotification();\n    const { login: legacyLoginFromContext } = useLegacyAuthContext();\n    const { login: loginFromContext } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const to = React.useMemo(() => {\n        if (routerType === \"legacy\") {\n            const legacySearch = qs.parse(search, {\n                ignoreQueryPrefix: true,\n            });\n            return legacySearch.to;\n        } else {\n            return parsed.params?.to;\n        }\n    }, [routerType, parsed.params, search]);\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: keys().auth().action(\"login\").get(preferLegacyKeys),\n        mutationFn: loginFromContext,\n        onSuccess: async ({ success, redirectTo, error }) => {\n            if (success) {\n                close?.(\"login-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (to && success) {\n                if (routerType === \"legacy\") {\n                    replace(to as string);\n                } else {\n                    go({ to: to as string, type: \"replace\" });\n                }\n            } else if (redirectTo) {\n                if (routerType === \"legacy\") {\n                    replace(redirectTo);\n                } else {\n                    go({ to: redirectTo, type: \"replace\" });\n                }\n            } else {\n                if (routerType === \"legacy\") {\n                    replace(\"/\");\n                }\n            }\n\n            await invalidateAuthStore();\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useLogin\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TLoginData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: [\n            ...keys().auth().action(\"login\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        mutationFn: legacyLoginFromContext,\n        onSuccess: async (redirectPathFromAuth) => {\n            if (to) {\n                replace(to as string);\n            }\n\n            if (redirectPathFromAuth !== false && !to) {\n                if (typeof redirectPathFromAuth === \"string\") {\n                    if (routerType === \"legacy\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        go({ to: redirectPathFromAuth, type: \"replace\" });\n                    }\n                } else {\n                    if (routerType === \"legacy\") {\n                        replace(\"/\");\n                    } else {\n                        go({ to: \"/\", type: \"replace\" });\n                    }\n                }\n            }\n\n            await invalidateAuthStore();\n\n            close?.(\"login-error\");\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions?.meta : {}),\n            ...getXRay(\"useLogin\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Login Error\",\n        description: error?.message || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\",\n    };\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useNavigation, useRouterType, useGo, useNotification } from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\nimport {\n    AuthActionResponse,\n    RefineError,\n    OpenNotificationParams,\n    TLoginData,\n    TRegisterData,\n} from \"../../../interfaces\";\nimport { useInvalidateAuthStore } from \"../useInvalidateAuthStore\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseRegisterLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TRegisterData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseRegisterProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseRegisterCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TRegisterData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseRegisterLegacyReturnType<TVariables> = UseMutationResult<\n    TRegisterData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseRegisterReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseRegisterCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TLoginData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useRegister<TVariables = {}>(\n    props: UseRegisterLegacyProps<TVariables>,\n): UseRegisterLegacyReturnType<TVariables>;\n\nexport function useRegister<TVariables = {}>(\n    props?: UseRegisterProps<TVariables>,\n): UseRegisterReturnType<TVariables>;\n\nexport function useRegister<TVariables = {}>(\n    props?: UseRegisterCombinedProps<TVariables>,\n): UseRegisterCombinedReturnType<TVariables>;\n\n/**\n * `useRegister` calls `register` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useRegister} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useRegister<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}: UseRegisterProps<TVariables> | UseRegisterLegacyProps<TVariables> = {}):\n    | UseRegisterReturnType<TVariables>\n    | UseRegisterLegacyReturnType<TVariables> {\n    const invalidateAuthStore = useInvalidateAuthStore();\n    const routerType = useRouterType();\n    const go = useGo();\n    const { replace } = useNavigation();\n    const { register: legacyRegisterFromContext } = useLegacyAuthContext();\n    const { register: registerFromContext } = useAuthBindingsContext();\n    const { close, open } = useNotification();\n\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: keys().auth().action(\"register\").get(preferLegacyKeys),\n        mutationFn: registerFromContext,\n        onSuccess: async ({ success, redirectTo, error }) => {\n            if (success) {\n                close?.(\"register-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (redirectTo) {\n                if (routerType === \"legacy\") {\n                    replace(redirectTo);\n                } else {\n                    go({ to: redirectTo, type: \"replace\" });\n                }\n            } else {\n                if (routerType === \"legacy\") {\n                    replace(\"/\");\n                }\n            }\n\n            await invalidateAuthStore();\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useRegister\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TRegisterData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: [\n            ...keys().auth().action(\"register\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        mutationFn: legacyRegisterFromContext,\n        onSuccess: async (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        go({ to: redirectPathFromAuth, type: \"replace\" });\n                    }\n                } else {\n                    if (routerType === \"legacy\") {\n                        replace(\"/\");\n                    } else {\n                        go({ to: \"/\", type: \"replace\" });\n                    }\n                }\n\n                await invalidateAuthStore();\n\n                close?.(\"register-error\");\n            }\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions?.meta : {}),\n            ...getXRay(\"useRegister\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Register Error\",\n        description: error?.message || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\",\n    };\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useGo, useNavigation, useNotification, useRouterType } from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\nimport {\n    AuthActionResponse,\n    RefineError,\n    OpenNotificationParams,\n    TForgotPasswordData,\n} from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseForgotPasswordLegacyProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TForgotPasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseForgotPasswordProps<TVariables> = {\n    v3LegacyAuthProviderCompatible?: false;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseForgotPasswordCombinedProps<TVariables> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TForgotPasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseForgotPasswordLegacyReturnType<TVariables> = UseMutationResult<\n    TForgotPasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseForgotPasswordReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseForgotPasswordCombinedReturnType<TVariables> = UseMutationResult<\n    AuthActionResponse | TForgotPasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useForgotPassword<TVariables = {}>(\n    props: UseForgotPasswordLegacyProps<TVariables>,\n): UseForgotPasswordLegacyReturnType<TVariables>;\n\nexport function useForgotPassword<TVariables = {}>(\n    props?: UseForgotPasswordProps<TVariables>,\n): UseForgotPasswordReturnType<TVariables>;\n\nexport function useForgotPassword<TVariables = {}>(\n    props?: UseForgotPasswordCombinedProps<TVariables>,\n): UseForgotPasswordCombinedReturnType<TVariables>;\n\n/**\n * `useForgotPassword` calls `forgotPassword` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useForgotPassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useForgotPassword<TVariables = {}>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}:\n    | UseForgotPasswordProps<TVariables>\n    | UseForgotPasswordLegacyProps<TVariables> = {}):\n    | UseForgotPasswordReturnType<TVariables>\n    | UseForgotPasswordLegacyReturnType<TVariables> {\n    const routerType = useRouterType();\n    const go = useGo();\n    const { replace } = useNavigation();\n    const {\n        forgotPassword: v3LegacyAuthProviderCompatibleForgotPasswordFromContext,\n    } = useLegacyAuthContext();\n    const { forgotPassword: forgotPasswordFromContext } =\n        useAuthBindingsContext();\n    const { close, open } = useNotification();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: keys()\n            .auth()\n            .action(\"forgotPassword\")\n            .get(preferLegacyKeys),\n        mutationFn: forgotPasswordFromContext,\n        onSuccess: ({ success, redirectTo, error }) => {\n            if (success) {\n                close?.(\"forgot-password-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (redirectTo) {\n                if (routerType === \"legacy\") {\n                    replace(redirectTo);\n                } else {\n                    go({ to: redirectTo, type: \"replace\" });\n                }\n            }\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useForgotPassword\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TForgotPasswordData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: [\n            ...keys().auth().action(\"forgotPassword\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        mutationFn: v3LegacyAuthProviderCompatibleForgotPasswordFromContext,\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        go({ to: redirectPathFromAuth, type: \"replace\" });\n                    }\n                }\n            }\n            close?.(\"forgot-password-error\");\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions?.meta : {}),\n            ...getXRay(\"useForgotPassword\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Forgot Password Error\",\n        description: error?.message || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\",\n    };\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\nimport qs from \"qs\";\n\nimport {\n    useNavigation,\n    useRouterType,\n    useGo,\n    useParsed,\n    useNotification,\n    useRouterContext,\n} from \"@hooks\";\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport {\n    AuthActionResponse,\n    RefineError,\n    OpenNotificationParams,\n    TUpdatePasswordData,\n    UpdatePasswordFormTypes,\n} from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseUpdatePasswordLegacyProps<\n    TVariables extends UpdatePasswordFormTypes,\n> = {\n    v3LegacyAuthProviderCompatible: true;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TUpdatePasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\nexport type UseUpdatePasswordProps<TVariables extends UpdatePasswordFormTypes> =\n    {\n        v3LegacyAuthProviderCompatible?: false;\n        mutationOptions?: Omit<\n            UseMutationOptions<\n                AuthActionResponse,\n                Error | RefineError,\n                TVariables,\n                unknown\n            >,\n            \"mutationFn\"\n        >;\n    };\n\nexport type UseUpdatePasswordCombinedProps<\n    TVariables extends UpdatePasswordFormTypes,\n> = {\n    v3LegacyAuthProviderCompatible: boolean;\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            AuthActionResponse | TUpdatePasswordData,\n            Error | RefineError,\n            TVariables,\n            unknown\n        >,\n        \"mutationFn\"\n    >;\n};\n\nexport type UseUpdatePasswordLegacyReturnType<\n    TVariables extends UpdatePasswordFormTypes,\n> = UseMutationResult<\n    TUpdatePasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseUpdatePasswordReturnType<\n    TVariables extends UpdatePasswordFormTypes,\n> = UseMutationResult<\n    AuthActionResponse,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport type UseUpdatePasswordCombinedReturnType<\n    TVariables extends UpdatePasswordFormTypes,\n> = UseMutationResult<\n    AuthActionResponse | TUpdatePasswordData,\n    Error | RefineError,\n    TVariables,\n    unknown\n>;\n\nexport function useUpdatePassword<TVariables extends UpdatePasswordFormTypes>(\n    props: UseUpdatePasswordLegacyProps<TVariables>,\n): UseUpdatePasswordLegacyReturnType<TVariables>;\n\nexport function useUpdatePassword<TVariables extends UpdatePasswordFormTypes>(\n    props?: UseUpdatePasswordProps<TVariables>,\n): UseUpdatePasswordReturnType<TVariables>;\n\nexport function useUpdatePassword<TVariables extends UpdatePasswordFormTypes>(\n    props?: UseUpdatePasswordCombinedProps<TVariables>,\n): UseUpdatePasswordCombinedReturnType<TVariables>;\n\n/**\n * `useUpdatePassword` calls `updatePassword` method from {@link https://refine.dev/docs/api-reference/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useUpdatePassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport function useUpdatePassword<\n    TVariables extends UpdatePasswordFormTypes = {},\n>({\n    v3LegacyAuthProviderCompatible,\n    mutationOptions,\n}:\n    | UseUpdatePasswordProps<TVariables>\n    | UseUpdatePasswordLegacyProps<TVariables> = {}):\n    | UseUpdatePasswordReturnType<TVariables>\n    | UseUpdatePasswordLegacyReturnType<TVariables> {\n    const routerType = useRouterType();\n\n    const go = useGo();\n    const { replace } = useNavigation();\n    const { updatePassword: legacyUpdatePasswordFromContext } =\n        useLegacyAuthContext();\n    const { updatePassword: updatePasswordFromContext } =\n        useAuthBindingsContext();\n    const { close, open } = useNotification();\n\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const parsed = useParsed();\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n\n    const params = React.useMemo(() => {\n        if (routerType === \"legacy\") {\n            const queryStrings = qs.parse(search, {\n                ignoreQueryPrefix: true,\n            });\n            return queryStrings ?? {};\n        } else {\n            return parsed.params ?? {};\n        }\n    }, [search, parsed, routerType]);\n\n    const mutation = useMutation<\n        AuthActionResponse,\n        Error,\n        TVariables,\n        unknown\n    >({\n        mutationKey: keys()\n            .auth()\n            .action(\"updatePassword\")\n            .get(preferLegacyKeys),\n        mutationFn: async (variables) => {\n            return updatePasswordFromContext?.({\n                ...params,\n                ...variables,\n            }) as Promise<AuthActionResponse>;\n        },\n        onSuccess: ({ success, redirectTo, error }) => {\n            if (success) {\n                close?.(\"update-password-error\");\n            }\n\n            if (error || !success) {\n                open?.(buildNotification(error));\n            }\n\n            if (redirectTo) {\n                if (routerType === \"legacy\") {\n                    replace(redirectTo);\n                } else {\n                    go({ to: redirectTo, type: \"replace\" });\n                }\n            }\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible === true ? {} : mutationOptions),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible === true\n                ? {}\n                : mutationOptions?.meta),\n            ...getXRay(\"useUpdatePassword\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation<\n        TUpdatePasswordData,\n        Error | RefineError,\n        TVariables,\n        unknown\n    >({\n        mutationKey: [\n            ...keys().auth().action(\"updatePassword\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        mutationFn: async (variables) => {\n            return legacyUpdatePasswordFromContext?.({\n                ...params,\n                ...variables,\n            });\n        },\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    if (routerType === \"legacy\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        go({ to: redirectPathFromAuth, type: \"replace\" });\n                    }\n                }\n            }\n            close?.(\"update-password-error\");\n        },\n        onError: (error: any) => {\n            open?.(buildNotification(error));\n        },\n        ...(v3LegacyAuthProviderCompatible ? mutationOptions : {}),\n        meta: {\n            ...(v3LegacyAuthProviderCompatible ? mutationOptions?.meta : {}),\n            ...getXRay(\"useUpdatePassword\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\nconst buildNotification = (\n    error?: Error | RefineError,\n): OpenNotificationParams => {\n    return {\n        message: error?.name || \"Update Password Error\",\n        description: error?.message || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\",\n    };\n};\n","import { useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { CheckResponse } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseIsAuthenticatedLegacyProps = {\n    v3LegacyAuthProviderCompatible: true;\n    params?: any;\n};\n\nexport type UseIsAuthenticatedProps = {\n    v3LegacyAuthProviderCompatible?: false;\n    params?: any;\n};\n\nexport type UseIsAuthenticatedCombinedProps = {\n    v3LegacyAuthProviderCompatible: boolean;\n    params?: any;\n};\n\nexport type UseIsAuthenticatedLegacyReturnType = UseQueryResult<any, any>;\n\nexport type UseIsAuthenticatedReturnType = UseQueryResult<CheckResponse, any>;\n\nexport type UseIsAuthenticatedCombinedReturnType = UseQueryResult<\n    CheckResponse | any,\n    any\n>;\n\nexport function useIsAuthenticated(\n    props: UseIsAuthenticatedLegacyProps,\n): UseIsAuthenticatedLegacyReturnType;\n\nexport function useIsAuthenticated(\n    props?: UseIsAuthenticatedProps,\n): UseIsAuthenticatedReturnType;\n\nexport function useIsAuthenticated(\n    props?: UseIsAuthenticatedCombinedProps,\n): UseIsAuthenticatedCombinedReturnType;\n\n/**\n *  `useIsAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useAuthenticated} for more details.\n */\nexport function useIsAuthenticated({\n    v3LegacyAuthProviderCompatible = false,\n    params,\n}: UseIsAuthenticatedProps | UseIsAuthenticatedLegacyProps = {}):\n    | UseIsAuthenticatedReturnType\n    | UseIsAuthenticatedLegacyReturnType {\n    const { checkAuth } = useLegacyAuthContext();\n    const { check } = useAuthBindingsContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery({\n        queryKey: keys()\n            .auth()\n            .action(\"check\")\n            .params(params)\n            .get(preferLegacyKeys),\n        queryFn: async () => (await check?.(params)) ?? {},\n        retry: false,\n        enabled: !v3LegacyAuthProviderCompatible,\n        meta: {\n            ...getXRay(\"useIsAuthenticated\", preferLegacyKeys),\n        },\n    });\n\n    const legacyQueryResponse = useQuery({\n        queryKey: [\n            ...keys()\n                .auth()\n                .action(\"check\")\n                .params(params)\n                .get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        queryFn: async () => (await checkAuth?.(params)) ?? {},\n        retry: false,\n        enabled: v3LegacyAuthProviderCompatible,\n        meta: {\n            ...getXRay(\"useIsAuthenticated\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible ? legacyQueryResponse : queryResponse;\n}\n\n/**\n * @deprecated `useAuthenticated` is deprecated with refine@4, use `useIsAuthenticated` instead, however, we still support `useAuthenticated` for backward compatibility.\n */\nexport const useAuthenticated = useIsAuthenticated;\n","import { useMutation, UseMutationResult } from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\nimport { OnErrorResponse } from \"../../../interfaces\";\nimport { useGo, useLogout, useNavigation, useRouterType } from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseOnErrorLegacyProps = {\n    v3LegacyAuthProviderCompatible: true;\n};\n\nexport type UseOnErrorProps = {\n    v3LegacyAuthProviderCompatible?: false;\n};\n\nexport type UseOnErrorCombinedProps = {\n    v3LegacyAuthProviderCompatible: boolean;\n};\n\nexport type UseOnErrorLegacyReturnType = UseMutationResult<\n    void,\n    string | undefined,\n    any,\n    unknown\n>;\n\nexport type UseOnErrorReturnType = UseMutationResult<\n    OnErrorResponse,\n    unknown,\n    unknown,\n    unknown\n>;\nexport type UseOnErrorCombinedReturnType = UseMutationResult<\n    OnErrorResponse | void,\n    unknown,\n    unknown,\n    unknown\n>;\n\nexport function useOnError(\n    props: UseOnErrorLegacyProps,\n): UseOnErrorLegacyReturnType;\n\nexport function useOnError(props?: UseOnErrorProps): UseOnErrorReturnType;\n\nexport function useOnError(\n    props?: UseOnErrorCombinedProps,\n): UseOnErrorCombinedReturnType;\n\n/**\n * `useOnError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/auth/useCheckError} for more details.\n *\n */\nexport function useOnError({\n    v3LegacyAuthProviderCompatible = false,\n}: UseOnErrorProps | UseOnErrorLegacyProps = {}):\n    | UseOnErrorReturnType\n    | UseOnErrorLegacyReturnType {\n    const routerType = useRouterType();\n    const go = useGo();\n    const { replace } = useNavigation();\n\n    const { checkError: legacyCheckErrorFromContext } = useLegacyAuthContext();\n    const { onError: onErrorFromContext } = useAuthBindingsContext();\n\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const { mutate: legacyLogout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(v3LegacyAuthProviderCompatible),\n    });\n    const { mutate: logout } = useLogout({\n        v3LegacyAuthProviderCompatible: Boolean(v3LegacyAuthProviderCompatible),\n    });\n\n    const mutation = useMutation({\n        mutationKey: keys().auth().action(\"onError\").get(preferLegacyKeys),\n        mutationFn: onErrorFromContext,\n        onSuccess: ({ logout: shouldLogout, redirectTo }) => {\n            if (shouldLogout) {\n                logout({ redirectPath: redirectTo });\n                return;\n            }\n\n            if (redirectTo) {\n                if (routerType === \"legacy\") {\n                    replace(redirectTo);\n                } else {\n                    go({ to: redirectTo, type: \"replace\" });\n                }\n                return;\n            }\n        },\n        meta: {\n            ...getXRay(\"useOnError\", preferLegacyKeys),\n        },\n    });\n\n    const v3LegacyAuthProviderCompatibleMutation = useMutation({\n        mutationKey: [\n            ...keys().auth().action(\"onError\").get(preferLegacyKeys),\n            \"v3LegacyAuthProviderCompatible\",\n        ],\n        mutationFn: legacyCheckErrorFromContext,\n        onError: (redirectPath?: string) => {\n            legacyLogout({ redirectPath });\n        },\n        meta: {\n            ...getXRay(\"useOnError\", preferLegacyKeys),\n        },\n    });\n\n    return v3LegacyAuthProviderCompatible\n        ? v3LegacyAuthProviderCompatibleMutation\n        : mutation;\n}\n\n/**\n * @deprecated `useCheckError` is deprecated with refine@4, use `useOnError` instead, however, we still support `useCheckError` for backward compatibility.\n */\nexport const useCheckError = useOnError;\n","import { useAuthBindingsContext, useLegacyAuthContext } from \"@contexts/auth\";\n\n/**\n * A hook that the UI uses\n * @internal\n */\nexport const useIsExistAuthentication = (): boolean => {\n    const { isProvided: legacyIsProvided } = useLegacyAuthContext();\n    const { isProvided } = useAuthBindingsContext();\n\n    return Boolean(isProvided || legacyIsProvided);\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    handlePaginationParams,\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    Pagination,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport interface UseListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type BaseListProps = {\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`UseListConfig`](/docs/api-reference/core/hooks/data/useList/#config-parameters)\n     * @deprecated `config` property is deprecated. Use `pagination`, `hasPagination`, `sorters` and `filters` instead.\n     */\n    config?: UseListConfig;\n    /**\n     * Pagination properties\n     */\n    pagination?: Pagination;\n    /**\n     * Whether to use server-side pagination or not\n     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * Sorter parameters\n     */\n    sorters?: CrudSorting;\n    /**\n     * Filter parameters\n     */\n    filters?: CrudFilters;\n    /**\n     * Meta data query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data query for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use\n     */\n    dataProviderName?: string;\n};\n\nexport type UseListProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource?: string;\n\n    /**\n     * Tanstack Query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n} & BaseListProps &\n    SuccessErrorNotification<\n        GetListResponse<TData>,\n        TError,\n        Prettify<BaseListProps>\n    > &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useList = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    config,\n    filters,\n    hasPagination,\n    pagination,\n    sorters,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseListProps<TQueryFnData, TError, TData> = {}): QueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const prefferedFilters = pickNotDeprecated(filters, config?.filters);\n    const prefferedSorters = pickNotDeprecated(sorters, config?.sort);\n    const prefferedHasPagination = pickNotDeprecated(\n        hasPagination,\n        config?.hasPagination,\n    );\n    const prefferedPagination = handlePaginationParams({\n        pagination,\n        configPagination: config?.pagination,\n        hasPagination: prefferedHasPagination,\n    });\n    const isServerPagination = prefferedPagination.mode === \"server\";\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    const notificationValues = {\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        filters: prefferedFilters,\n        hasPagination: isServerPagination,\n        pagination: prefferedPagination,\n        sorters: prefferedSorters,\n        config: {\n            ...config,\n            sort: prefferedSorters,\n        },\n    };\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    const { getList } = dataProvider(pickedDataProvider);\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        params: {\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            pagination: prefferedPagination,\n            hasPagination: isServerPagination,\n            sort: prefferedSorters,\n            sorters: prefferedSorters,\n            filters: prefferedFilters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource?.name}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...meta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useQuery<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >({\n        queryKey: keys()\n            .data(pickedDataProvider)\n            .resource(identifier ?? \"\")\n            .action(\"list\")\n            .params({\n                ...(preferredMeta || {}),\n                filters: prefferedFilters,\n                hasPagination: isServerPagination,\n                ...(isServerPagination && {\n                    pagination: prefferedPagination,\n                }),\n                ...(sorters && {\n                    sorters,\n                }),\n                ...(config?.sort && {\n                    sort: config?.sort,\n                }),\n            })\n            .get(preferLegacyKeys),\n        queryFn: ({ queryKey, pageParam, signal }) => {\n            return getList<TQueryFnData>({\n                resource: resource?.name ?? \"\",\n                pagination: prefferedPagination,\n                hasPagination: isServerPagination,\n                filters: prefferedFilters,\n                sort: prefferedSorters,\n                sorters: prefferedSorters,\n                meta: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n                metaData: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            });\n        },\n        ...queryOptions,\n        enabled:\n            typeof queryOptions?.enabled !== \"undefined\"\n                ? queryOptions?.enabled\n                : !!resource?.name,\n        select: (rawData) => {\n            let data = rawData;\n\n            const { current, mode, pageSize } = prefferedPagination;\n\n            if (mode === \"client\") {\n                data = {\n                    ...data,\n                    data: data.data.slice(\n                        (current - 1) * pageSize,\n                        current * pageSize,\n                    ),\n                    total: data.total,\n                };\n            }\n\n            if (queryOptions?.select) {\n                return queryOptions?.select?.(data);\n            }\n\n            return data as unknown as GetListResponse<TData>;\n        },\n        onSuccess: (data) => {\n            queryOptions?.onSuccess?.(data);\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(data, notificationValues, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig);\n        },\n        onError: (err: TError) => {\n            checkError(err);\n            queryOptions?.onError?.(err);\n\n            const notificationConfig =\n                typeof errorNotification === \"function\"\n                    ? errorNotification(err, notificationValues, identifier)\n                    : errorNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${identifier}-useList-notification`,\n                message: translate(\n                    \"notifications.error\",\n                    { statusCode: err.statusCode },\n                    `Error (status code: ${err.statusCode})`,\n                ),\n                description: err.message,\n                type: \"error\",\n            });\n        },\n        meta: {\n            ...queryOptions?.meta,\n            ...getXRay(\"useList\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import { useEffect, useState } from \"react\";\nimport { useRefineContext } from \"..\";\n\nexport type UseLoadingOvertimeRefineContext = Omit<\n    UseLoadingOvertimeCoreProps,\n    \"isLoading\" | \"interval\"\n> &\n    Required<Pick<UseLoadingOvertimeCoreProps, \"interval\">>;\n\nexport type UseLoadingOvertimeOptionsProps = {\n    overtimeOptions?: UseLoadingOvertimeCoreOptions;\n};\n\nexport type UseLoadingOvertimeReturnType = {\n    overtime: {\n        elapsedTime?: number;\n    };\n};\n\ntype UseLoadingOvertimeCoreOptions = Omit<\n    UseLoadingOvertimeCoreProps,\n    \"isLoading\"\n>;\n\ntype UseLoadingOvertimeCoreReturnType = {\n    elapsedTime?: number;\n};\n\nexport type UseLoadingOvertimeCoreProps = {\n    /**\n     * The loading state. If true, the elapsed time will be calculated.\n     */\n    isLoading: boolean;\n\n    /**\n     * The interval in milliseconds. If the loading time exceeds this time, the `onInterval` callback will be called.\n     * If not specified, the `interval` value from the `overtime` option of the `RefineProvider` will be used.\n     *\n     * @default: 1000 (1 second)\n     */\n    interval?: number;\n\n    /**\n     * The callback function that will be called when the loading time exceeds the specified time.\n     * If not specified, the `onInterval` value from the `overtime` option of the `RefineProvider` will be used.\n     *\n     * @param elapsedInterval The elapsed time in milliseconds.\n     */\n    onInterval?: (elapsedInterval: number) => void;\n};\n\n/**\n * if you need to do something when the loading time exceeds the specified time, refine provides the `useLoadingOvertime` hook.\n * It returns the elapsed time in milliseconds.\n *\n * @example\n * const { elapsedTime } = useLoadingOvertime({\n *    isLoading,\n *    interval: 1000,\n *    onInterval(elapsedInterval) {\n *        console.log(\"loading overtime\", elapsedInterval);\n *    },\n * });\n */\nexport const useLoadingOvertime = ({\n    isLoading,\n    interval: intervalProp,\n    onInterval: onIntervalProp,\n}: UseLoadingOvertimeCoreProps): UseLoadingOvertimeCoreReturnType => {\n    const [elapsedTime, setElapsedTime] = useState<number | undefined>(\n        undefined,\n    );\n    // get overtime options from refine context\n    const { options } = useRefineContext();\n    const { overtime } = options;\n\n    // pick props or refine context options\n    const interval = intervalProp ?? overtime.interval;\n    const onInterval = onIntervalProp ?? overtime?.onInterval;\n\n    useEffect(() => {\n        let intervalFn: ReturnType<typeof setInterval>;\n\n        if (isLoading) {\n            intervalFn = setInterval(() => {\n                // increase elapsed time\n                setElapsedTime((prevElapsedTime) => {\n                    if (prevElapsedTime === undefined) {\n                        return interval;\n                    }\n\n                    return prevElapsedTime + interval;\n                });\n            }, interval);\n        }\n\n        return () => {\n            clearInterval(intervalFn);\n            // reset elapsed time\n            setElapsedTime(undefined);\n        };\n    }, [isLoading, interval]);\n\n    useEffect(() => {\n        // call onInterval callback\n        if (onInterval && elapsedTime) {\n            onInterval(elapsedTime);\n        }\n    }, [elapsedTime]);\n\n    return {\n        elapsedTime,\n    };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UseOneProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource?: string;\n    /**\n     * id of the item in the resource\n     * @type [`BaseKey`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data query for `dataProvider`,\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `\"default\"``\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<\n    GetOneResponse<TData>,\n    TError,\n    Prettify<{ id?: BaseKey } & MetaQuery>\n> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\n *\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useOne} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useOne = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    id,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseOneProps<TQueryFnData, TError, TData>): QueryObserverResult<\n    GetOneResponse<TData>,\n    TError\n> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n\n    const { getOne } = dataProvider(pickedDataProvider);\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        channel: `resources/${resource?.name}`,\n        params: {\n            ids: id ? [id] : [],\n            id: id,\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            subscriptionType: \"useOne\",\n            ...liveParams,\n        },\n        enabled:\n            typeof queryOptions?.enabled !== \"undefined\"\n                ? queryOptions?.enabled\n                : typeof resource?.name !== \"undefined\" &&\n                  typeof id !== \"undefined\",\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...meta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useQuery<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >({\n        queryKey: keys()\n            .data(pickedDataProvider)\n            .resource(identifier ?? \"\")\n            .action(\"one\")\n            .id(id ?? \"\")\n            .params({\n                ...(preferredMeta || {}),\n            })\n            .get(preferLegacyKeys),\n        queryFn: ({ queryKey, pageParam, signal }) =>\n            getOne<TQueryFnData>({\n                resource: resource?.name ?? \"\",\n                id: id!,\n                meta: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n                metaData: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }),\n        ...queryOptions,\n        enabled:\n            typeof queryOptions?.enabled !== \"undefined\"\n                ? queryOptions?.enabled\n                : typeof id !== \"undefined\",\n        onSuccess: (data) => {\n            queryOptions?.onSuccess?.(data);\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(\n                          data,\n                          {\n                              id,\n                              ...combinedMeta,\n                          },\n                          identifier,\n                      )\n                    : successNotification;\n\n            handleNotification(notificationConfig);\n        },\n        onError: (err: TError) => {\n            checkError(err);\n            queryOptions?.onError?.(err);\n\n            const notificationConfig =\n                typeof errorNotification === \"function\"\n                    ? errorNotification(\n                          err,\n                          {\n                              id,\n                              ...combinedMeta,\n                          },\n                          identifier,\n                      )\n                    : errorNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${id}-${identifier}-getOne-notification`,\n                message: translate(\n                    \"notifications.error\",\n                    { statusCode: err.statusCode },\n                    `Error (status code: ${err.statusCode})`,\n                ),\n                description: err.message,\n                type: \"error\",\n            });\n        },\n        meta: {\n            ...queryOptions?.meta,\n            ...getXRay(\"useOne\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetManyResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UseManyProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * ids of the item in the resource\n     * @type [`BaseKey[]`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    ids: BaseKey[];\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetManyResponse<TQueryFnData>,\n        TError,\n        GetManyResponse<TData>\n    >;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for `dataProvider`,\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<GetManyResponse<TData>, TError, BaseKey[]> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\n *\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useMany} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useMany = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    ids,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseManyProps<TQueryFnData, TError, TData>): QueryObserverResult<\n    GetManyResponse<TData>,\n    TError\n> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    const { getMany, getOne } = dataProvider(pickedDataProvider);\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        params: {\n            ids: ids,\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            subscriptionType: \"useMany\",\n            ...liveParams,\n        },\n        channel: `resources/${resource.name}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...meta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useQuery<\n        GetManyResponse<TQueryFnData>,\n        TError,\n        GetManyResponse<TData>\n    >({\n        queryKey: keys()\n            .data(pickedDataProvider)\n            .resource(identifier)\n            .action(\"many\")\n            .ids(...ids)\n            .params({\n                ...(preferredMeta || {}),\n            })\n            .get(preferLegacyKeys),\n        queryFn: ({ queryKey, pageParam, signal }) => {\n            if (getMany) {\n                return getMany({\n                    resource: resource?.name,\n                    ids,\n                    meta: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                    metaData: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                });\n            } else {\n                return handleMultiple(\n                    ids.map((id) =>\n                        getOne<TQueryFnData>({\n                            resource: resource?.name,\n                            id,\n                            meta: {\n                                ...combinedMeta,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                            metaData: {\n                                ...combinedMeta,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                        }),\n                    ),\n                );\n            }\n        },\n        ...queryOptions,\n        onSuccess: (data) => {\n            queryOptions?.onSuccess?.(data);\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(data, ids, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig);\n        },\n        onError: (err: TError) => {\n            checkError(err);\n            queryOptions?.onError?.(err);\n\n            const notificationConfig =\n                typeof errorNotification === \"function\"\n                    ? errorNotification(err, ids, identifier)\n                    : errorNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${ids[0]}-${identifier}-getMany-notification`,\n                message: translate(\n                    \"notifications.error\",\n                    { statusCode: err.statusCode },\n                    `Error (status code: ${err.statusCode})`,\n                ),\n                description: err.message,\n                type: \"error\",\n            });\n        },\n        meta: {\n            ...queryOptions?.meta,\n            ...getXRay(\"useMany\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    OptimisticUpdateMapType,\n    PrevContext as UpdateContext,\n    PreviousQuery,\n    SuccessErrorNotification,\n    UpdateResponse,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UpdateParams<TData, TError, TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for dataProvider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * You can use it to customize the optimistic update logic.\n     * @default {\n     *   list: true,\n     *   many: true,\n     *   detail: true,\n     * }\n     */\n    optimisticUpdateMap?: OptimisticUpdateMapType<TData, TVariables>;\n} & SuccessErrorNotification<\n    UpdateResponse<TData>,\n    TError,\n    { id: BaseKey; values: TVariables }\n>;\n\nexport type UseUpdateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateResponse<TData>,\n    TError,\n    UpdateParams<TData, TError, TVariables>,\n    UpdateContext<TData>\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseUpdateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateResponse<TData>,\n            TError,\n            UpdateParams<TData, TError, TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\n *\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useUpdate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseUpdateProps<TData, TError, TVariables> = {}): UseUpdateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const publish = usePublish();\n    const { log } = useLog();\n    const { notificationDispatch } = useCancelNotification();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        UpdateResponse<TData>,\n        TError,\n        UpdateParams<TData, TError, TVariables>,\n        UpdateContext<TData>\n    >({\n        mutationFn: ({\n            id,\n            values,\n            resource: resourceName,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            meta,\n            metaData,\n            dataProviderName,\n        }) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(identifier, dataProviderName, resources),\n                ).update<TData, TVariables>({\n                    resource: resource.name,\n                    id,\n                    variables: values,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                });\n            }\n            const updatePromise = new Promise<UpdateResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                identifier,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .update<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                variables: values,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: id,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        onMutate: async ({\n            resource: resourceName,\n            id,\n            mutationMode,\n            values,\n            dataProviderName,\n            meta,\n            metaData,\n            optimisticUpdateMap = { list: true, many: true, detail: true },\n        }) => {\n            const { identifier } = select(resourceName);\n\n            const {\n                gqlMutation: _,\n                gqlQuery: __,\n                ...preferredMeta\n            } = pickNotDeprecated(meta, metaData) ?? {};\n\n            const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                identifier,\n                pickDataProvider(identifier, dataProviderName, resources),\n                preferredMeta,\n            );\n\n            const resourceKeys = keys()\n                .data(pickDataProvider(identifier, dataProviderName, resources))\n                .resource(identifier);\n\n            const previousQueries: PreviousQuery<TData>[] =\n                queryClient.getQueriesData(resourceKeys.get(preferLegacyKeys));\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            await queryClient.cancelQueries(\n                resourceKeys.get(preferLegacyKeys),\n                undefined,\n                {\n                    silent: true,\n                },\n            );\n\n            if (mutationModePropOrContext !== \"pessimistic\") {\n                if (optimisticUpdateMap.list) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        resourceKeys\n                            .action(\"list\")\n                            .params(preferredMeta ?? {})\n                            .get(preferLegacyKeys),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (\n                                typeof optimisticUpdateMap.list === \"function\"\n                            ) {\n                                return optimisticUpdateMap.list(\n                                    previous,\n                                    values,\n                                    id,\n                                );\n                            }\n\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    return {\n                                        id,\n                                        ...record,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                if (optimisticUpdateMap.many) {\n                    queryClient.setQueriesData(\n                        resourceKeys.action(\"many\").get(preferLegacyKeys),\n                        (previous?: GetManyResponse<TData> | null) => {\n                            if (\n                                typeof optimisticUpdateMap.many === \"function\"\n                            ) {\n                                return optimisticUpdateMap.many(\n                                    previous,\n                                    values,\n                                    id,\n                                );\n                            }\n\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    record = {\n                                        id,\n                                        ...record,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                if (optimisticUpdateMap.detail) {\n                    queryClient.setQueriesData(\n                        resourceKeys\n                            .action(\"one\")\n                            .id(id)\n                            .params(preferredMeta ?? {})\n                            .get(preferLegacyKeys),\n                        (previous?: GetOneResponse<TData> | null) => {\n                            if (\n                                typeof optimisticUpdateMap.detail === \"function\"\n                            ) {\n                                return optimisticUpdateMap.detail(\n                                    previous,\n                                    values,\n                                    id,\n                                );\n                            }\n\n                            if (!previous) {\n                                return null;\n                            }\n\n                            return {\n                                ...previous,\n                                data: {\n                                    ...previous.data,\n                                    ...values,\n                                },\n                            };\n                        },\n                    );\n                }\n            }\n\n            return {\n                previousQueries,\n                queryKey,\n            };\n        },\n        onSettled: (\n            _data,\n            _error,\n            {\n                id,\n                resource: resourceName,\n                dataProviderName,\n                invalidates = [\"list\", \"many\", \"detail\"],\n            },\n        ) => {\n            const { identifier } = select(resourceName);\n\n            invalidateStore({\n                resource: identifier,\n                dataProviderName: pickDataProvider(\n                    identifier,\n                    dataProviderName,\n                    resources,\n                ),\n                invalidates,\n                id,\n            });\n\n            notificationDispatch({\n                type: ActionTypes.REMOVE,\n                payload: { id, resource: identifier },\n            });\n        },\n        onSuccess: (\n            data,\n            {\n                id,\n                resource: resourceName,\n                successNotification,\n                dataProviderName: dataProviderNameFromProp,\n                values,\n                meta,\n                metaData,\n            },\n            context,\n        ) => {\n            const { resource, identifier } = select(resourceName);\n            const resourceSingular = textTransformers.singular(identifier);\n\n            const dataProviderName = pickDataProvider(\n                identifier,\n                dataProviderNameFromProp,\n                resources,\n            );\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(data, { id, values }, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${id}-${identifier}-notification`,\n                description: translate(\"notifications.success\", \"Successful\"),\n                message: translate(\n                    \"notifications.editSuccess\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            resourceSingular,\n                        ),\n                    },\n                    `Successfully updated ${resourceSingular}`,\n                ),\n                type: \"success\",\n            });\n\n            publish?.({\n                channel: `resources/${resource.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: data.data?.id ? [data.data.id] : undefined,\n                },\n                date: new Date(),\n                meta: {\n                    ...combinedMeta,\n                    dataProviderName,\n                },\n            });\n\n            let previousData: any;\n            if (context) {\n                const queryData = queryClient.getQueryData<\n                    UpdateResponse<TData>\n                >(context.queryKey.detail(id));\n\n                previousData = Object.keys(values || {}).reduce<any>(\n                    (acc, item) => {\n                        acc[item] = queryData?.data?.[item];\n                        return acc;\n                    },\n                    {},\n                );\n            }\n\n            const {\n                fields: _fields,\n                operation: _operation,\n                variables: _variables,\n                ...rest\n            } = combinedMeta || {};\n            log?.mutate({\n                action: \"update\",\n                resource: resource.name,\n                data: values,\n                previousData,\n                meta: {\n                    id,\n                    dataProviderName,\n                    ...rest,\n                },\n            });\n        },\n        onError: (\n            err: TError,\n            { id, resource: resourceName, errorNotification, values },\n            context,\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // set back the queries to the context:\n            if (context) {\n                for (const query of context.previousQueries) {\n                    queryClient.setQueryData(query[0], query[1]);\n                }\n            }\n\n            if (err.message !== \"mutationCancelled\") {\n                checkError?.(err);\n\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { id, values }, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${identifier}-notification`,\n                    message: translate(\n                        \"notifications.editError\",\n                        {\n                            resource: translate(\n                                `${identifier}.${identifier}`,\n                                resourceSingular,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            }\n        },\n        mutationKey: keys().data().mutation(\"update\").get(preferLegacyKeys),\n        ...mutationOptions,\n        meta: {\n            ...mutationOptions?.meta,\n            ...getXRay(\"useUpdate\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import React, { ReactNode, useReducer } from \"react\";\nimport isEqual from \"lodash-es/isEqual\";\n\nimport { UndoableQueue } from \"@components\";\n\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\nimport { ActionTypes } from \"./actionTypes\";\n\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\n    notifications: [],\n    notificationDispatch: () => false,\n});\n\nconst initialState: IUndoableQueue[] = [];\n\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\n    switch (action.type) {\n        case ActionTypes.ADD:\n            const newState = state.filter(\n                (notificationItem: IUndoableQueue) => {\n                    return !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    );\n                },\n            );\n\n            return [\n                ...newState,\n                {\n                    ...action.payload,\n                    isRunning: true,\n                },\n            ];\n        case ActionTypes.REMOVE:\n            return state.filter(\n                (notificationItem: IUndoableQueue) =>\n                    !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    ),\n            );\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\n            return state.map((notificationItem: IUndoableQueue) => {\n                if (\n                    isEqual(notificationItem.id, action.payload.id) &&\n                    notificationItem.resource == action.payload.resource\n                ) {\n                    return {\n                        ...notificationItem,\n                        seconds: action.payload.seconds - 1000,\n                    };\n                }\n                return notificationItem;\n            });\n        default:\n            return state;\n    }\n};\n\nexport const UndoableQueueContextProvider: React.FC<{\n    children: ReactNode;\n}> = ({ children }) => {\n    const [notifications, notificationDispatch] = useReducer(\n        undoableQueueReducer,\n        initialState,\n    );\n\n    const notificationData = { notifications, notificationDispatch };\n\n    return (\n        <UndoableQueueContext.Provider value={notificationData}>\n            {children}\n            {typeof window !== \"undefined\" &&\n                notifications.map((notification) => (\n                    <UndoableQueue\n                        key={`${notification.id}-${notification.resource}-queue`}\n                        notification={notification}\n                    />\n                ))}\n        </UndoableQueueContext.Provider>\n    );\n};\n","import {\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseRecord,\n    CreateResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype useCreateParams<TData, TError, TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification<CreateResponse<TData>, TError, TVariables>;\n\nexport type UseCreateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCreateParams<TData, TError, TVariables>,\n    unknown\n>;\n\nexport type UseCreateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCreateParams<TData, TError, TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCreate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCreate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseCreateProps<TData, TError, TVariables> = {}): UseCreateReturnType<\n    TData,\n    TError,\n    TVariables\n> &\n    UseLoadingOvertimeReturnType => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const dataProvider = useDataProvider();\n    const invalidateStore = useInvalidate();\n    const { resources, select } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCreateParams<TData, TError, TVariables>,\n        unknown\n    >({\n        mutationFn: ({\n            resource: resourceName,\n            values,\n            meta,\n            metaData,\n            dataProviderName,\n        }: useCreateParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            return dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            ).create<TData, TVariables>({\n                resource: resource.name,\n                variables: values,\n                meta: combinedMeta,\n                metaData: combinedMeta,\n            });\n        },\n        onSuccess: (\n            data,\n            {\n                resource: resourceName,\n                successNotification: successNotificationFromProp,\n                dataProviderName: dataProviderNameFromProp,\n                invalidates = [\"list\", \"many\"],\n                values,\n                meta,\n                metaData,\n            },\n        ) => {\n            const { resource, identifier } = select(resourceName);\n            const resourceSingular = textTransformers.singular(identifier);\n\n            const dataProviderName = pickDataProvider(\n                identifier,\n                dataProviderNameFromProp,\n                resources,\n            );\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const notificationConfig =\n                typeof successNotificationFromProp === \"function\"\n                    ? successNotificationFromProp(data, values, identifier)\n                    : successNotificationFromProp;\n\n            handleNotification(notificationConfig, {\n                key: `create-${identifier}-notification`,\n                message: translate(\n                    \"notifications.createSuccess\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            resourceSingular,\n                        ),\n                    },\n                    `Successfully created ${resourceSingular}`,\n                ),\n                description: translate(\"notifications.success\", \"Success\"),\n                type: \"success\",\n            });\n\n            invalidateStore({\n                resource: identifier,\n                dataProviderName,\n                invalidates,\n            });\n\n            publish?.({\n                channel: `resources/${resource.name}`,\n                type: \"created\",\n                payload: {\n                    ids: data?.data?.id ? [data.data.id] : undefined,\n                },\n                date: new Date(),\n                meta: {\n                    ...combinedMeta,\n                    dataProviderName,\n                },\n            });\n\n            const {\n                fields: _fields,\n                operation: _operation,\n                variables: _variables,\n                ...rest\n            } = combinedMeta || {};\n            log?.mutate({\n                action: \"create\",\n                resource: resource.name,\n                data: values,\n                meta: {\n                    dataProviderName,\n                    id: data?.data?.id ?? undefined,\n                    ...rest,\n                },\n            });\n        },\n        onError: (\n            err: TError,\n            {\n                resource: resourceName,\n                errorNotification: errorNotificationFromProp,\n                values,\n            },\n        ) => {\n            checkError(err);\n\n            const { identifier } = select(resourceName);\n\n            const resourceSingular = textTransformers.singular(identifier);\n\n            const notificationConfig =\n                typeof errorNotificationFromProp === \"function\"\n                    ? errorNotificationFromProp(err, values, identifier)\n                    : errorNotificationFromProp;\n\n            handleNotification(notificationConfig, {\n                key: `create-${identifier}-notification`,\n                description: err.message,\n                message: translate(\n                    \"notifications.createError\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            resourceSingular,\n                        ),\n                        statusCode: err.statusCode,\n                    },\n                    `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\n                ),\n                type: \"error\",\n            });\n        },\n        mutationKey: keys().data().mutation(\"create\").get(preferLegacyKeys),\n        ...mutationOptions,\n        meta: {\n            ...mutationOptions?.meta,\n            ...getXRay(\"useCreate\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    DeleteOneResponse,\n    GetListResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    PrevContext as DeleteContext,\n    PreviousQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type DeleteParams<TData, TError, TVariables> = {\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * Values for mutation function\n     */\n    values?: TVariables;\n} & SuccessErrorNotification<DeleteOneResponse<TData>, TError, BaseKey>;\n\nexport type UseDeleteReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteOneResponse<TData>,\n    TError,\n    DeleteParams<TData, TError, TVariables>,\n    DeleteContext<TData>\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseDeleteProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteOneResponse<TData>,\n            TError,\n            DeleteParams<TData, TError, TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\n *\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useDelete} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDelete = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseDeleteProps<TData, TError, TVariables> = {}): UseDeleteReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const dataProvider = useDataProvider();\n\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        DeleteOneResponse<TData>,\n        TError,\n        DeleteParams<TData, TError, TVariables>,\n        DeleteContext<TData>\n    >({\n        mutationFn: ({\n            id,\n            mutationMode,\n            undoableTimeout,\n            resource: resourceName,\n            onCancel,\n            meta,\n            metaData,\n            dataProviderName,\n            values,\n        }) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(identifier, dataProviderName, resources),\n                ).deleteOne<TData, TVariables>({\n                    resource: resource.name,\n                    id,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                    variables: values,\n                });\n            }\n\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                identifier,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .deleteOne<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                                variables: values,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return deletePromise;\n        },\n        onMutate: async ({\n            id,\n            resource: resourceName,\n            mutationMode,\n            dataProviderName,\n            meta,\n            metaData,\n        }) => {\n            const { identifier } = select(resourceName);\n\n            const {\n                gqlMutation: _,\n                gqlQuery: __,\n                ...preferredMeta\n            } = pickNotDeprecated(meta, metaData) ?? {};\n\n            const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                identifier,\n                pickDataProvider(identifier, dataProviderName, resources),\n                preferredMeta,\n            );\n\n            const resourceKeys = keys()\n                .data(pickDataProvider(identifier, dataProviderName, resources))\n                .resource(identifier);\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            await queryClient.cancelQueries(\n                resourceKeys.get(preferLegacyKeys),\n                undefined,\n                {\n                    silent: true,\n                },\n            );\n\n            const previousQueries: PreviousQuery<TData>[] =\n                queryClient.getQueriesData(resourceKeys.get(preferLegacyKeys));\n\n            if (mutationModePropOrContext !== \"pessimistic\") {\n                // Set the previous queries to the new ones:\n                queryClient.setQueriesData(\n                    resourceKeys\n                        .action(\"list\")\n                        .params(preferredMeta ?? {})\n                        .get(preferLegacyKeys),\n                    (previous?: GetListResponse<TData> | null) => {\n                        if (!previous) {\n                            return null;\n                        }\n                        const data = previous.data.filter(\n                            (record: TData) =>\n                                record.id?.toString() !== id.toString(),\n                        );\n\n                        return {\n                            data,\n                            total: previous.total - 1,\n                        };\n                    },\n                );\n\n                queryClient.setQueriesData(\n                    resourceKeys.action(\"many\").get(preferLegacyKeys),\n                    (previous?: GetListResponse<TData> | null) => {\n                        if (!previous) {\n                            return null;\n                        }\n                        const data = previous.data.filter((record: TData) => {\n                            return record.id?.toString() !== id?.toString();\n                        });\n\n                        return {\n                            ...previous,\n                            data,\n                        };\n                    },\n                );\n            }\n\n            return {\n                previousQueries,\n                queryKey,\n            };\n        },\n        onSettled: (\n            _data,\n            _error,\n            {\n                id,\n                resource: resourceName,\n                dataProviderName,\n                invalidates = [\"list\", \"many\"],\n            },\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // invalidate the cache for the list and many queries:\n            invalidateStore({\n                resource: identifier,\n                dataProviderName: pickDataProvider(\n                    identifier,\n                    dataProviderName,\n                    resources,\n                ),\n                invalidates,\n            });\n\n            notificationDispatch({\n                type: ActionTypes.REMOVE,\n                payload: { id, resource: identifier },\n            });\n        },\n        onSuccess: (\n            _data,\n            {\n                id,\n                resource: resourceName,\n                successNotification,\n                dataProviderName: dataProviderNameFromProp,\n                meta,\n                metaData,\n            },\n            context,\n        ) => {\n            const { resource, identifier } = select(resourceName);\n            const resourceSingular = textTransformers.singular(identifier);\n\n            const dataProviderName = pickDataProvider(\n                identifier,\n                dataProviderNameFromProp,\n                resources,\n            );\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            // Remove the queries from the cache:\n            queryClient.removeQueries(context?.queryKey.detail(id));\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(_data, id, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${id}-${identifier}-notification`,\n                description: translate(\"notifications.success\", \"Success\"),\n                message: translate(\n                    \"notifications.deleteSuccess\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            resourceSingular,\n                        ),\n                    },\n                    `Successfully deleted a ${resourceSingular}`,\n                ),\n                type: \"success\",\n            });\n\n            publish?.({\n                channel: `resources/${resource.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: [id],\n                },\n                date: new Date(),\n                meta: {\n                    ...combinedMeta,\n                    dataProviderName,\n                },\n            });\n\n            const {\n                fields: _fields,\n                operation: _operation,\n                variables: _variables,\n                ...rest\n            } = combinedMeta || {};\n            log?.mutate({\n                action: \"delete\",\n                resource: resource.name,\n                meta: {\n                    id,\n                    dataProviderName,\n                    ...rest,\n                },\n            });\n\n            // Remove the queries from the cache:\n            queryClient.removeQueries(context?.queryKey.detail(id));\n        },\n        onError: (\n            err: TError,\n            { id, resource: resourceName, errorNotification },\n            context,\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // set back the queries to the context:\n            if (context) {\n                for (const query of context.previousQueries) {\n                    queryClient.setQueryData(query[0], query[1]);\n                }\n            }\n\n            if (err.message !== \"mutationCancelled\") {\n                checkError(err);\n\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, id, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${identifier}-notification`,\n                    message: translate(\n                        \"notifications.deleteError\",\n                        {\n                            resource: resourceSingular,\n                            statusCode: err.statusCode,\n                        },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            }\n        },\n        mutationKey: keys().data().mutation(\"delete\").get(preferLegacyKeys),\n        ...mutationOptions,\n        meta: {\n            ...mutationOptions?.meta,\n            ...getXRay(\"useDelete\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n} from \"@definitions\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseRecord,\n    CreateManyResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype useCreateManyParams<TData, TError, TVariables> = {\n    resource: string;\n    values: TVariables[];\n    meta?: MetaQuery;\n    metaData?: MetaQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification<CreateManyResponse<TData>, TError, TVariables[]>;\n\nexport type UseCreateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateManyResponse<TData>,\n    TError,\n    useCreateManyParams<TData, TError, TVariables>,\n    unknown\n>;\n\nexport type UseCreateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateManyResponse<TData>,\n            TError,\n            useCreateManyParams<TData, TError, TVariables>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\n *\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCreateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useCreateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseCreateManyProps<TData, TError, TVariables> = {}): UseCreateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> &\n    UseLoadingOvertimeReturnType => {\n    const dataProvider = useDataProvider();\n    const { resources, select } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const { log } = useLog();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        CreateManyResponse<TData>,\n        TError,\n        useCreateManyParams<TData, TError, TVariables>\n    >({\n        mutationFn: ({\n            resource: resourceName,\n            values,\n            meta,\n            metaData,\n            dataProviderName,\n        }: useCreateManyParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            );\n\n            if (selectedDataProvider.createMany) {\n                return selectedDataProvider.createMany<TData, TVariables>({\n                    resource: resource.name,\n                    variables: values,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                });\n            } else {\n                return handleMultiple(\n                    values.map((val) =>\n                        selectedDataProvider.create<TData, TVariables>({\n                            resource: resource.name,\n                            variables: val,\n                            meta: combinedMeta,\n                            metaData: combinedMeta,\n                        }),\n                    ),\n                );\n            }\n        },\n        onSuccess: (\n            response,\n            {\n                resource: resourceName,\n                successNotification,\n                dataProviderName: dataProviderNameFromProp,\n                invalidates = [\"list\", \"many\"],\n                values,\n                meta,\n                metaData,\n            },\n        ) => {\n            const { resource, identifier } = select(resourceName);\n            const resourcePlural = textTransformers.plural(identifier);\n\n            const dataProviderName = pickDataProvider(\n                identifier,\n                dataProviderNameFromProp,\n                resources,\n            );\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(response, values, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig, {\n                key: `createMany-${identifier}-notification`,\n                message: translate(\n                    \"notifications.createSuccess\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            identifier,\n                        ),\n                    },\n                    `Successfully created ${resourcePlural}`,\n                ),\n                description: translate(\"notifications.success\", \"Success\"),\n                type: \"success\",\n            });\n\n            invalidateStore({\n                resource: identifier,\n                dataProviderName,\n                invalidates,\n            });\n\n            const ids = response?.data\n                .filter((item) => item?.id !== undefined)\n                .map((item) => item.id!);\n            publish?.({\n                channel: `resources/${resource.name}`,\n                type: \"created\",\n                payload: {\n                    ids,\n                },\n                date: new Date(),\n                meta: {\n                    ...combinedMeta,\n                    dataProviderName,\n                },\n            });\n\n            const {\n                fields: _fields,\n                operation: _operation,\n                variables: _variables,\n                ...rest\n            } = combinedMeta || {};\n            log?.mutate({\n                action: \"createMany\",\n                resource: resource.name,\n                data: values,\n                meta: {\n                    dataProviderName,\n                    ids,\n                    ...rest,\n                },\n            });\n        },\n        onError: (\n            err: TError,\n            { resource: resourceName, errorNotification, values },\n        ) => {\n            const { identifier } = select(resourceName);\n\n            const notificationConfig =\n                typeof errorNotification === \"function\"\n                    ? errorNotification(err, values, identifier)\n                    : errorNotification;\n\n            handleNotification(notificationConfig, {\n                key: `createMany-${identifier}-notification`,\n                description: err.message,\n                message: translate(\n                    \"notifications.createError\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            identifier,\n                        ),\n                        statusCode: err.statusCode,\n                    },\n                    `There was an error creating ${identifier} (status code: ${err.statusCode}`,\n                ),\n                type: \"error\",\n            });\n        },\n        mutationKey: keys().data().mutation(\"createMany\").get(preferLegacyKeys),\n        ...mutationOptions,\n        meta: {\n            ...mutationOptions?.meta,\n            ...getXRay(\"useCreateMany\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    OptimisticUpdateManyMapType,\n    PrevContext as UpdateContext,\n    QueryResponse,\n    SuccessErrorNotification,\n    UpdateManyResponse,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype UpdateManyParams<TData, TError, TVariables> = {\n    /**\n     * ids for mutation function\n     */\n    ids: BaseKey[];\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @default {\n     *   list: true,\n     *   many: true,\n     *   detail: true,\n     * }\n     */\n    optimisticUpdateMap?: OptimisticUpdateManyMapType<TData, TVariables>;\n} & SuccessErrorNotification<\n    UpdateManyResponse<TData>,\n    TError,\n    { ids: BaseKey[]; values: TVariables }\n>;\n\ntype UseUpdateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateManyResponse<TData>,\n    TError,\n    UpdateManyParams<TData, TError, TVariables>,\n    UpdateContext<TData>\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseUpdateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateManyResponse<TData>,\n            TError,\n            UpdateManyParams<TData, TError, TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\n *\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useUpdateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseUpdateManyProps<TData, TError, TVariables> = {}): UseUpdateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const { notificationDispatch } = useCancelNotification();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const { log } = useLog();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        UpdateManyResponse<TData>,\n        TError,\n        UpdateManyParams<TData, TError, TVariables>,\n        UpdateContext<TData>\n    >({\n        mutationFn: ({\n            ids,\n            values,\n            resource: resourceName,\n            onCancel,\n            mutationMode,\n            undoableTimeout,\n            meta,\n            metaData,\n            dataProviderName,\n        }: UpdateManyParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.updateMany) {\n                    return selectedDataProvider.updateMany<TData, TVariables>({\n                        resource: resource.name,\n                        ids,\n                        variables: values,\n                        meta: combinedMeta,\n                        metaData: combinedMeta,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.update<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                variables: values,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        onMutate: async ({\n            resource: resourceName,\n            ids,\n            values,\n            mutationMode,\n            dataProviderName,\n            meta,\n            metaData,\n            optimisticUpdateMap = { list: true, many: true, detail: true },\n        }) => {\n            const { identifier } = select(resourceName);\n            const {\n                gqlMutation: _,\n                gqlQuery: __,\n                ...preferredMeta\n            } = pickNotDeprecated(meta, metaData) ?? {};\n\n            const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                identifier,\n                pickDataProvider(identifier, dataProviderName, resources),\n                preferredMeta,\n            );\n\n            const resourceKeys = keys()\n                .data(pickDataProvider(identifier, dataProviderName, resources))\n                .resource(identifier);\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            await queryClient.cancelQueries(\n                resourceKeys.get(preferLegacyKeys),\n                undefined,\n                {\n                    silent: true,\n                },\n            );\n\n            const previousQueries = queryClient.getQueriesData<\n                QueryResponse<TData>\n            >(resourceKeys.get(preferLegacyKeys));\n\n            if (mutationModePropOrContext !== \"pessimistic\") {\n                if (optimisticUpdateMap.list) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        resourceKeys\n                            .action(\"list\")\n                            .params(preferredMeta ?? {})\n                            .get(preferLegacyKeys),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (\n                                typeof optimisticUpdateMap.list === \"function\"\n                            ) {\n                                return optimisticUpdateMap.list(\n                                    previous,\n                                    values,\n                                    ids,\n                                );\n                            }\n\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                if (optimisticUpdateMap.many) {\n                    queryClient.setQueriesData(\n                        resourceKeys.action(\"many\").get(preferLegacyKeys),\n                        (previous?: GetManyResponse<TData> | null) => {\n                            if (\n                                typeof optimisticUpdateMap.many === \"function\"\n                            ) {\n                                return optimisticUpdateMap.many(\n                                    previous,\n                                    values,\n                                    ids,\n                                );\n                            }\n\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                if (optimisticUpdateMap.detail) {\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            resourceKeys\n                                .action(\"one\")\n                                .id(id)\n                                .params(preferredMeta ?? {})\n                                .get(preferLegacyKeys),\n                            (previous?: GetOneResponse<TData> | null) => {\n                                if (\n                                    typeof optimisticUpdateMap.detail ===\n                                    \"function\"\n                                ) {\n                                    return optimisticUpdateMap.detail(\n                                        previous,\n                                        values,\n                                        id,\n                                    );\n                                }\n\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = {\n                                    ...previous.data,\n                                    ...values,\n                                };\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n                }\n            }\n\n            return {\n                previousQueries,\n                queryKey,\n            };\n        },\n        onSettled: (\n            _data,\n            _error,\n            { ids, resource: resourceName, dataProviderName },\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // invalidate the cache for the list and many queries:\n            invalidateStore({\n                resource: identifier,\n                invalidates: [\"list\", \"many\"],\n                dataProviderName: pickDataProvider(\n                    identifier,\n                    dataProviderName,\n                    resources,\n                ),\n            });\n\n            ids.forEach((id) =>\n                invalidateStore({\n                    resource: identifier,\n                    invalidates: [\"detail\"],\n                    dataProviderName: pickDataProvider(\n                        identifier,\n                        dataProviderName,\n                        resources,\n                    ),\n                    id,\n                }),\n            );\n\n            notificationDispatch({\n                type: ActionTypes.REMOVE,\n                payload: { id: ids, resource: identifier },\n            });\n        },\n        onSuccess: (\n            data,\n            {\n                ids,\n                resource: resourceName,\n                meta,\n                metaData,\n                dataProviderName: dataProviderNameFromProp,\n                successNotification,\n                values,\n            },\n            context,\n        ) => {\n            const { resource, identifier } = select(resourceName);\n            const resourceSingular = textTransformers.singular(identifier);\n\n            const dataProviderName = pickDataProvider(\n                identifier,\n                dataProviderNameFromProp,\n                resources,\n            );\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(data, { ids, values }, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${ids}-${identifier}-notification`,\n                description: translate(\"notifications.success\", \"Successful\"),\n                message: translate(\n                    \"notifications.editSuccess\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            identifier,\n                        ),\n                    },\n                    `Successfully updated ${resourceSingular}`,\n                ),\n                type: \"success\",\n            });\n\n            publish?.({\n                channel: `resources/${resource.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: ids.map(String),\n                },\n                date: new Date(),\n                meta: {\n                    ...combinedMeta,\n                    dataProviderName,\n                },\n            });\n\n            const previousData: any[] = [];\n            if (context) {\n                ids.forEach((id) => {\n                    const queryData = queryClient.getQueryData<\n                        UpdateManyResponse<TData>\n                    >(context.queryKey.detail(id));\n\n                    previousData.push(\n                        Object.keys(values || {}).reduce<any>(\n                            (acc, item: any) => {\n                                acc[item] = queryData?.data?.[item];\n                                return acc;\n                            },\n                            {},\n                        ),\n                    );\n                });\n            }\n\n            const {\n                fields: _fields,\n                operation: _operation,\n                variables: _variables,\n                ...rest\n            } = combinedMeta || {};\n            log?.mutate({\n                action: \"updateMany\",\n                resource: resource.name,\n                data: values,\n                previousData,\n                meta: {\n                    ids,\n                    dataProviderName,\n                    ...rest,\n                },\n            });\n        },\n        onError: (\n            err: TError,\n            { ids, resource: resourceName, errorNotification, values },\n            context,\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // set back the queries to the context:\n            if (context) {\n                for (const query of context.previousQueries) {\n                    queryClient.setQueryData(query[0], query[1]);\n                }\n            }\n\n            if (err.message !== \"mutationCancelled\") {\n                checkError?.(err);\n\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { ids, values }, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${identifier}-updateMany-error-notification`,\n                    message: translate(\n                        \"notifications.editError\",\n                        {\n                            resource: resourceSingular,\n                            statusCode: err.statusCode,\n                        },\n                        `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            }\n        },\n        mutationKey: keys().data().mutation(\"updateMany\").get(preferLegacyKeys),\n        ...mutationOptions,\n        meta: {\n            ...mutationOptions?.meta,\n            ...getXRay(\"useUpdateMany\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    handleMultiple,\n    pickDataProvider,\n    pickNotDeprecated,\n    queryKeysReplacement,\n    useActiveAuthProvider,\n} from \"@definitions\";\nimport {\n    useCancelNotification,\n    useDataProvider,\n    useHandleNotification,\n    useInvalidate,\n    useLog,\n    useMeta,\n    useMutationMode,\n    useOnError,\n    usePublish,\n    useRefineContext,\n    useResource,\n    useTranslate,\n} from \"@hooks\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    BaseKey,\n    BaseRecord,\n    DeleteManyResponse,\n    GetListResponse,\n    HttpError,\n    IQueryKeys,\n    MetaQuery,\n    MutationMode,\n    PrevContext as DeleteContext,\n    PreviousQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type DeleteManyParams<TData, TError, TVariables> = {\n    /**\n     * ids for mutation function\n     */\n    ids: BaseKey[];\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration in ms to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Provides a function to cancel the mutation when `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * Values for mutation function\n     */\n    values?: TVariables;\n} & SuccessErrorNotification<DeleteManyResponse<TData>, TError, BaseKey[]>;\n\nexport type UseDeleteManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteManyResponse<TData>,\n    TError,\n    DeleteManyParams<TData, TError, TVariables>,\n    unknown\n> &\n    UseLoadingOvertimeReturnType;\n\nexport type UseDeleteManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteManyResponse<TData>,\n            TError,\n            DeleteManyParams<TData, TError, TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\n *\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useDeleteMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDeleteMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseDeleteManyProps<TData, TError, TVariables> = {}): UseDeleteManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const dataProvider = useDataProvider();\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n    const { log } = useLog();\n    const { resources, select } = useResource();\n    const queryClient = useQueryClient();\n    const getMeta = useMeta();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        DeleteManyResponse<TData>,\n        TError,\n        DeleteManyParams<TData, TError, TVariables>,\n        DeleteContext<TData>\n    >({\n        mutationFn: ({\n            resource: resourceName,\n            ids,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            meta,\n            metaData,\n            dataProviderName,\n            values,\n        }: DeleteManyParams<TData, TError, TVariables>) => {\n            const { resource, identifier } = select(resourceName);\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(identifier, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.deleteMany) {\n                    return selectedDataProvider.deleteMany<TData, TVariables>({\n                        resource: resource.name,\n                        ids,\n                        meta: combinedMeta,\n                        metaData: combinedMeta,\n                        variables: values,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.deleteOne<TData, TVariables>({\n                                resource: resource.name,\n                                id,\n                                meta: combinedMeta,\n                                metaData: combinedMeta,\n                                variables: values,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: identifier,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        onMutate: async ({\n            ids,\n            resource: resourceName,\n            mutationMode,\n            dataProviderName,\n            meta,\n            metaData,\n        }) => {\n            const { identifier } = select(resourceName);\n\n            const {\n                gqlMutation: _,\n                gqlQuery: __,\n                ...preferredMeta\n            } = pickNotDeprecated(meta, metaData) ?? {};\n\n            const queryKey = queryKeysReplacement(preferLegacyKeys)(\n                identifier,\n                pickDataProvider(identifier, dataProviderName, resources),\n                preferredMeta,\n            );\n\n            const resourceKeys = keys()\n                .data(pickDataProvider(identifier, dataProviderName, resources))\n                .resource(identifier);\n\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            await queryClient.cancelQueries(\n                resourceKeys.get(preferLegacyKeys),\n                undefined,\n                {\n                    silent: true,\n                },\n            );\n\n            const previousQueries: PreviousQuery<TData>[] =\n                queryClient.getQueriesData(resourceKeys.get(preferLegacyKeys));\n\n            if (mutationModePropOrContext !== \"pessimistic\") {\n                // Set the previous queries to the new ones:\n                queryClient.setQueriesData(\n                    resourceKeys\n                        .action(\"list\")\n                        .params(preferredMeta ?? {})\n                        .get(preferLegacyKeys),\n                    (previous?: GetListResponse<TData> | null) => {\n                        if (!previous) {\n                            return null;\n                        }\n\n                        const data = previous.data.filter(\n                            (item) =>\n                                item.id &&\n                                !ids.map(String).includes(item.id.toString()),\n                        );\n\n                        return {\n                            data,\n                            total: previous.total - 1,\n                        };\n                    },\n                );\n\n                queryClient.setQueriesData(\n                    resourceKeys.action(\"many\").get(preferLegacyKeys),\n                    (previous?: GetListResponse<TData> | null) => {\n                        if (!previous) {\n                            return null;\n                        }\n\n                        const data = previous.data.filter((record: TData) => {\n                            if (record.id) {\n                                return !ids\n                                    .map(String)\n                                    .includes(record.id.toString());\n                            }\n                            return false;\n                        });\n\n                        return {\n                            ...previous,\n                            data,\n                        };\n                    },\n                );\n\n                for (const id of ids) {\n                    queryClient.setQueriesData(\n                        resourceKeys\n                            .action(\"one\")\n                            .id(id)\n                            .params(preferredMeta)\n                            .get(preferLegacyKeys),\n                        (previous?: any | null) => {\n                            if (!previous || previous.data.id == id) {\n                                return null;\n                            }\n                            return {\n                                ...previous,\n                            };\n                        },\n                    );\n                }\n            }\n\n            return {\n                previousQueries,\n                queryKey,\n            };\n        },\n        // Always refetch after error or success:\n        onSettled: (\n            _data,\n            _error,\n            {\n                resource: resourceName,\n                ids,\n                dataProviderName,\n                invalidates = [\"list\", \"many\"],\n            },\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // invalidate the cache for the list and many queries:\n            invalidateStore({\n                resource: identifier,\n                dataProviderName: pickDataProvider(\n                    identifier,\n                    dataProviderName,\n                    resources,\n                ),\n                invalidates,\n            });\n\n            notificationDispatch({\n                type: ActionTypes.REMOVE,\n                payload: { id: ids, resource: identifier },\n            });\n        },\n        onSuccess: (\n            _data,\n            {\n                ids,\n                resource: resourceName,\n                meta,\n                metaData,\n                dataProviderName: dataProviderNameFromProp,\n                successNotification,\n            },\n            context,\n        ) => {\n            const { resource, identifier } = select(resourceName);\n\n            const dataProviderName = pickDataProvider(\n                identifier,\n                dataProviderNameFromProp,\n                resources,\n            );\n\n            const combinedMeta = getMeta({\n                resource,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            // Remove the queries from the cache:\n            ids.forEach((id) =>\n                queryClient.removeQueries(context?.queryKey.detail(id)),\n            );\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(_data, ids, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${ids}-${identifier}-notification`,\n                description: translate(\"notifications.success\", \"Success\"),\n                message: translate(\n                    \"notifications.deleteSuccess\",\n                    {\n                        resource: translate(\n                            `${identifier}.${identifier}`,\n                            identifier,\n                        ),\n                    },\n                    `Successfully deleted ${identifier}`,\n                ),\n                type: \"success\",\n            });\n\n            publish?.({\n                channel: `resources/${resource.name}`,\n                type: \"deleted\",\n                payload: { ids },\n                date: new Date(),\n                meta: {\n                    ...combinedMeta,\n                    dataProviderName,\n                },\n            });\n\n            const {\n                fields: _fields,\n                operation: _operation,\n                variables: _variables,\n                ...rest\n            } = combinedMeta || {};\n            log?.mutate({\n                action: \"deleteMany\",\n                resource: resource.name,\n                meta: {\n                    ids,\n                    dataProviderName,\n                    ...rest,\n                },\n            });\n\n            // Remove the queries from the cache:\n            ids.forEach((id) =>\n                queryClient.removeQueries(context?.queryKey.detail(id)),\n            );\n        },\n        onError: (\n            err,\n            { ids, resource: resourceName, errorNotification },\n            context,\n        ) => {\n            const { identifier } = select(resourceName);\n\n            // set back the queries to the context:\n            if (context) {\n                for (const query of context.previousQueries) {\n                    queryClient.setQueryData(query[0], query[1]);\n                }\n            }\n\n            if (err.message !== \"mutationCancelled\") {\n                checkError(err);\n                const resourceSingular = textTransformers.singular(identifier);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, ids, identifier)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${identifier}-notification`,\n                    message: translate(\n                        \"notifications.deleteError\",\n                        {\n                            resource: resourceSingular,\n                            statusCode: err.statusCode,\n                        },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            }\n        },\n        mutationKey: keys().data().mutation(\"deleteMany\").get(preferLegacyKeys),\n        ...mutationOptions,\n        meta: {\n            ...mutationOptions?.meta,\n            ...getXRay(\"useDeleteMany\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { pickNotDeprecated } from \"@definitions/index\";\nimport { useDataProvider, useResource } from \"@hooks\";\n\nexport const useApiUrl = (dataProviderName?: string): string => {\n    const dataProvider = useDataProvider();\n    const { resource } = useResource();\n\n    const { getApiUrl } = dataProvider(\n        dataProviderName ??\n            pickNotDeprecated(resource?.meta, resource?.options)\n                ?.dataProviderName,\n    );\n\n    return getApiUrl();\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport { pickNotDeprecated, useActiveAuthProvider } from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    CustomResponse,\n    HttpError,\n    MetaQuery,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\nimport { useKeys } from \"@hooks/useKeys\";\n\ninterface UseCustomConfig<TQuery, TPayload> {\n    /**\n     * @deprecated `sort` is deprecated, use `sorters` instead.\n     */\n    sort?: CrudSorting;\n    sorters?: CrudSorting;\n    filters?: CrudFilters;\n    query?: TQuery;\n    payload?: TPayload;\n    headers?: {};\n}\n\nexport type UseCustomProps<TQueryFnData, TError, TQuery, TPayload, TData> = {\n    /**\n     * request's URL\n     */\n    url: string;\n    /**\n     * request's method (`GET`, `POST`, etc.)\n     */\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\n    /**\n     * The config of your request. You can send headers, payload, query, filters and sorters using this field\n     */\n    config?: UseCustomConfig<TQuery, TPayload>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\"\n     */\n    queryOptions?: UseQueryOptions<\n        CustomResponse<TQueryFnData>,\n        TError,\n        CustomResponse<TData>\n    >;\n    /**\n     * meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<\n    CustomResponse<TData>,\n    TError,\n    Prettify<UseCustomConfig<TQuery, TPayload> & MetaQuery>\n> &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCustom} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TQuery - Values for query params\n * @typeParam TPayload - Values for params\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useCustom = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TQuery = unknown,\n    TPayload = unknown,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    url,\n    method,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    dataProviderName,\n    overtimeOptions,\n}: UseCustomProps<\n    TQueryFnData,\n    TError,\n    TQuery,\n    TPayload,\n    TData\n>): QueryObserverResult<CustomResponse<TData>, TError> &\n    UseLoadingOvertimeReturnType => {\n    const dataProvider = useDataProvider();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const translate = useTranslate();\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n\n    const { custom } = dataProvider(dataProviderName);\n\n    const combinedMeta = getMeta({ meta: preferredMeta });\n\n    if (custom) {\n        const queryResponse = useQuery<\n            CustomResponse<TQueryFnData>,\n            TError,\n            CustomResponse<TData>\n        >({\n            queryKey: keys()\n                .data(dataProviderName)\n                .mutation(\"custom\")\n                .params({\n                    method,\n                    url,\n                    ...config,\n                    ...(preferredMeta || {}),\n                })\n                .get(preferLegacyKeys),\n            queryFn: ({ queryKey, pageParam, signal }) =>\n                custom<TQueryFnData>({\n                    url,\n                    method,\n                    ...config,\n                    meta: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                    metaData: {\n                        ...combinedMeta,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                }),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, {\n                              ...config,\n                              ...combinedMeta,\n                          })\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, {\n                              ...config,\n                              ...combinedMeta,\n                          })\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            meta: {\n                ...queryOptions?.meta,\n                ...getXRay(\"useCustom\", preferLegacyKeys),\n            },\n        });\n        const { elapsedTime } = useLoadingOvertime({\n            isLoading: queryResponse.isFetching,\n            interval: overtimeOptions?.interval,\n            onInterval: overtimeOptions?.onInterval,\n        });\n\n        return { ...queryResponse, overtime: { elapsedTime } };\n    } else {\n        throw Error(\"Not implemented custom on data provider.\");\n    }\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useTranslate,\n    useOnError,\n    useMeta,\n} from \"@hooks\";\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaQuery,\n    Prettify,\n} from \"../../interfaces\";\nimport { pickNotDeprecated, useActiveAuthProvider } from \"@definitions/helpers\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\nimport { useKeys } from \"@hooks/useKeys\";\n\ninterface UseCustomMutationConfig {\n    headers?: {};\n}\n\ntype useCustomMutationParams<TData, TError, TVariables> = {\n    url: string;\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\n    values: TVariables;\n    /**\n     * Meta data for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     * Meta data for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    dataProviderName?: string;\n    config?: UseCustomMutationConfig;\n} & SuccessErrorNotification<\n    CreateResponse<TData>,\n    TError,\n    Prettify<UseCustomMutationConfig & MetaQuery>\n>;\n\nexport type UseCustomMutationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCustomMutationParams<TData, TError, TVariables>,\n    unknown\n>;\n\nexport type UseCustomMutationProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCustomMutationParams<TData, TError, TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n} & UseLoadingOvertimeOptionsProps;\n\n/**\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useCustomMutation} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCustomMutation = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n    overtimeOptions,\n}: UseCustomMutationProps<\n    TData,\n    TError,\n    TVariables\n> = {}): UseCustomMutationReturnType<TData, TError, TVariables> &\n    UseLoadingOvertimeReturnType => {\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCustomMutationParams<TData, TError, TVariables>,\n        unknown\n    >(\n        ({\n            url,\n            method,\n            values,\n            meta,\n            metaData,\n            dataProviderName,\n            config,\n        }: useCustomMutationParams<TData, TError, TVariables>) => {\n            const combinedMeta = getMeta({\n                meta: pickNotDeprecated(meta, metaData),\n            });\n\n            const { custom } = dataProvider(dataProviderName);\n\n            if (custom) {\n                return custom<TData>({\n                    url,\n                    method,\n                    payload: values,\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                    headers: { ...config?.headers },\n                });\n            }\n\n            throw Error(\"Not implemented custom on data provider.\");\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    successNotification: successNotificationFromProp,\n                    config,\n                    meta,\n                    metaData,\n                },\n            ) => {\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, {\n                              ...config,\n                              ...(pickNotDeprecated(meta, metaData) || {}),\n                          })\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (\n                err: TError,\n                {\n                    errorNotification: errorNotificationFromProp,\n                    method,\n                    config,\n                    meta,\n                    metaData,\n                },\n            ) => {\n                checkError(err);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, {\n                              ...config,\n                              ...(pickNotDeprecated(meta, metaData) || {}),\n                          })\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            mutationKey: keys()\n                .data()\n                .mutation(\"customMutation\")\n                .get(preferLegacyKeys),\n            ...mutationOptions,\n            meta: {\n                ...mutationOptions?.meta,\n                ...getXRay(\"useCustomMutation\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: mutation.isLoading,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...mutation, overtime: { elapsedTime } };\n};\n","import { useCallback, useContext } from \"react\";\n\nimport { DataContext } from \"@contexts/data\";\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const useDataProvider = (): ((\n    /**\n     * The name of the `data provider` you want to access\n     */\n    dataProviderName?: string,\n) => IDataContextProvider) => {\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\n\n    const handleDataProvider = useCallback(\n        (dataProviderName?: string) => {\n            if (dataProviderName) {\n                const dataProvider = context[dataProviderName];\n                if (!dataProvider) {\n                    throw new Error(\n                        `\"${dataProviderName}\" Data provider not found`,\n                    );\n                }\n                return context[dataProviderName];\n            }\n            if (context.default) {\n                return context.default;\n            } else\n                throw new Error(\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\n                );\n        },\n        [context],\n    );\n\n    return handleDataProvider;\n};\n","import React from \"react\";\nimport { ReactNode } from \"react\";\n\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const defaultDataProvider = () => {\n    return {\n        default: {\n            create: () => Promise.resolve({ data: { id: 1 } }),\n            createMany: () => Promise.resolve({ data: [] }),\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\n            deleteMany: () => Promise.resolve({ data: [] }),\n            getList: () => Promise.resolve({ data: [], total: 0 }),\n            getMany: () => Promise.resolve({ data: [] }),\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\n            update: () => Promise.resolve({ data: { id: 1 } }),\n            updateMany: () => Promise.resolve({ data: [] }),\n            custom: () => Promise.resolve({ data: {} }),\n            getApiUrl: () => \"\",\n        },\n    };\n};\n\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\n    defaultDataProvider() as IDataMultipleContextProvider,\n);\n\nexport const DataContextProvider: React.FC<\n    | IDataMultipleContextProvider\n    | (IDataContextProvider & {\n          children: ReactNode;\n      })\n> = ({ children, ...rest }) => {\n    let dataProviders;\n    if (!rest.getList || !rest.getOne) {\n        dataProviders = rest as IDataMultipleContextProvider;\n    } else {\n        dataProviders = {\n            default: rest,\n        } as IDataMultipleContextProvider;\n    }\n    return (\n        <DataContext.Provider value={dataProviders}>\n            {children}\n        </DataContext.Provider>\n    );\n};\n","import { getXRay } from \"@refinedev/devtools-internal\";\nimport {\n    InfiniteData,\n    InfiniteQueryObserverResult,\n    useInfiniteQuery,\n    UseInfiniteQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    getNextPageParam,\n    getPreviousPageParam,\n    handlePaginationParams,\n    pickDataProvider,\n    pickNotDeprecated,\n    useActiveAuthProvider,\n} from \"@definitions/helpers\";\nimport {\n    useDataProvider,\n    useHandleNotification,\n    useMeta,\n    useOnError,\n    useResource,\n    useResourceSubscription,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    HttpError,\n    LiveModeProps,\n    MetaQuery,\n    Pagination,\n    Prettify,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\n\nimport { useKeys } from \"@hooks/useKeys\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport interface UseInfiniteListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\ntype BaseInfiniteListProps = {\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     *  Metadata query for `dataProvider`\n     *  @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`useInfiniteListConfig`](/docs/api-reference/core/hooks/data/useInfiniteList/#config-parameters)\n     * @deprecated `config` property is deprecated. Use `pagination`, `hasPagination`, `sorters` and `filters` instead.\n     */\n    config?: UseInfiniteListConfig;\n    /**\n     * Pagination properties\n     */\n    pagination?: Pagination;\n    /**\n     * Whether to use server-side pagination or not\n     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * Sorter parameters\n     */\n    sorters?: CrudSorting;\n    /**\n     * Filter parameters\n     */\n    filters?: CrudFilters;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use\n     */\n    dataProviderName?: string;\n};\n\nexport type UseInfiniteListProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Tanstack Query's [useInfiniteQuery](https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery) options\n     */\n    queryOptions?: UseInfiniteQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n} & BaseInfiniteListProps &\n    SuccessErrorNotification<\n        InfiniteData<GetListResponse<TData>>,\n        TError,\n        Prettify<BaseInfiniteListProps>\n    > &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useInfiniteList` is a modified version of `react-query`'s {@link https://tanstack.com/query/latest/docs/react/guides/infinite-queries `useInfiniteQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/data/useInfiniteList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useInfiniteList = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    config,\n    filters,\n    hasPagination,\n    pagination,\n    sorters,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n    overtimeOptions,\n}: UseInfiniteListProps<\n    TQueryFnData,\n    TError,\n    TData\n>): InfiniteQueryObserverResult<GetListResponse<TData>, TError> &\n    UseLoadingOvertimeReturnType => {\n    const { resources, resource, identifier } = useResource(resourceFromProp);\n\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n    const authProvider = useActiveAuthProvider();\n    const { mutate: checkError } = useOnError({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n    const handleNotification = useHandleNotification();\n    const getMeta = useMeta();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const pickedDataProvider = pickDataProvider(\n        identifier,\n        dataProviderName,\n        resources,\n    );\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n    const prefferedFilters = pickNotDeprecated(filters, config?.filters);\n    const prefferedSorters = pickNotDeprecated(sorters, config?.sort);\n    const prefferedHasPagination = pickNotDeprecated(\n        hasPagination,\n        config?.hasPagination,\n    );\n    const prefferedPagination = handlePaginationParams({\n        pagination,\n        configPagination: config?.pagination,\n        hasPagination: prefferedHasPagination,\n    });\n    const isServerPagination = prefferedPagination.mode === \"server\";\n    const notificationValues = {\n        meta: preferredMeta,\n        metaData: preferredMeta,\n        filters: prefferedFilters,\n        hasPagination: isServerPagination,\n        pagination: prefferedPagination,\n        sorters: prefferedSorters,\n        config: {\n            ...config,\n            sort: prefferedSorters,\n        },\n    };\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    const combinedMeta = getMeta({ resource, meta: preferredMeta });\n\n    const { getList } = dataProvider(pickedDataProvider);\n\n    useResourceSubscription({\n        resource: identifier,\n        types: [\"*\"],\n        params: {\n            meta: combinedMeta,\n            metaData: combinedMeta,\n            pagination: prefferedPagination,\n            hasPagination: isServerPagination,\n            sort: prefferedSorters,\n            sorters: prefferedSorters,\n            filters: prefferedFilters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource.name}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n        dataProviderName: pickedDataProvider,\n        meta: {\n            ...combinedMeta,\n            dataProviderName,\n        },\n    });\n\n    const queryResponse = useInfiniteQuery<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >({\n        queryKey: keys()\n            .data(pickedDataProvider)\n            .resource(identifier)\n            .action(\"infinite\")\n            .params({\n                ...(preferredMeta || {}),\n                filters: prefferedFilters,\n                hasPagination: isServerPagination,\n                ...(isServerPagination && {\n                    pagination: prefferedPagination,\n                }),\n                ...(sorters && {\n                    sorters,\n                }),\n                ...(config?.sort && {\n                    sort: config?.sort,\n                }),\n            })\n            .get(preferLegacyKeys),\n        queryFn: ({ queryKey, pageParam, signal }) => {\n            const paginationProperties = {\n                ...prefferedPagination,\n                current: pageParam,\n            };\n\n            return getList<TQueryFnData>({\n                resource: resource.name,\n                pagination: paginationProperties,\n                hasPagination: isServerPagination,\n                filters: prefferedFilters,\n                sort: prefferedSorters,\n                sorters: prefferedSorters,\n                meta: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n                metaData: {\n                    ...combinedMeta,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }).then(({ data, total, ...rest }) => {\n                return {\n                    data,\n                    total,\n                    pagination: paginationProperties,\n                    ...rest,\n                };\n            });\n        },\n        getNextPageParam: (lastPage) => getNextPageParam(lastPage),\n        getPreviousPageParam: (lastPage) => getPreviousPageParam(lastPage),\n        ...queryOptions,\n        onSuccess: (data) => {\n            queryOptions?.onSuccess?.(data);\n\n            const notificationConfig =\n                typeof successNotification === \"function\"\n                    ? successNotification(data, notificationValues, identifier)\n                    : successNotification;\n\n            handleNotification(notificationConfig);\n        },\n        onError: (err: TError) => {\n            checkError(err);\n            queryOptions?.onError?.(err);\n\n            const notificationConfig =\n                typeof errorNotification === \"function\"\n                    ? errorNotification(err, notificationValues, identifier)\n                    : errorNotification;\n\n            handleNotification(notificationConfig, {\n                key: `${identifier}-useInfiniteList-notification`,\n                message: translate(\n                    \"notifications.error\",\n                    { statusCode: err.statusCode },\n                    `Error (status code: ${err.statusCode})`,\n                ),\n                description: err.message,\n                type: \"error\",\n            });\n        },\n        meta: {\n            ...queryOptions?.meta,\n            ...getXRay(\"useInfiniteList\", preferLegacyKeys),\n        },\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResponse.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return { ...queryResponse, overtime: { elapsedTime } };\n};\n","import React from \"react\";\n\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\n\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\n\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\n    liveProvider,\n    children,\n}) => {\n    return (\n        <LiveContext.Provider value={liveProvider}>\n            {children}\n        </LiveContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\nimport {\n    InvalidateOptions,\n    InvalidateQueryFilters,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { useResource } from \"@hooks/resource\";\nimport { pickDataProvider } from \"@definitions\";\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\n\nexport type UseInvalidateProp = {\n    resource?: string;\n    id?: BaseKey;\n    dataProviderName?: string;\n    invalidates: Array<keyof IQueryKeys> | false;\n    invalidationFilters?: InvalidateQueryFilters;\n    invalidationOptions?: InvalidateOptions;\n};\n\nexport const useInvalidate = (): ((\n    props: UseInvalidateProp,\n) => Promise<void>) => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const invalidate = useCallback(\n        async ({\n            resource,\n            dataProviderName,\n            invalidates,\n            id,\n            invalidationFilters = { type: \"all\", refetchType: \"active\" },\n            invalidationOptions = { cancelRefetch: false },\n        }: UseInvalidateProp) => {\n            if (invalidates === false) {\n                return;\n            }\n            const dp = pickDataProvider(resource, dataProviderName, resources);\n\n            const queryKey = keys()\n                .data(dp)\n                .resource(resource ?? \"\");\n\n            await Promise.all(\n                invalidates.map((key) => {\n                    switch (key) {\n                        case \"all\":\n                            return queryClient.invalidateQueries(\n                                keys().data(dp).get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"list\":\n                            return queryClient.invalidateQueries(\n                                queryKey.action(\"list\").get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"many\":\n                            return queryClient.invalidateQueries(\n                                queryKey.action(\"many\").get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"resourceAll\":\n                            return queryClient.invalidateQueries(\n                                queryKey.get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        case \"detail\":\n                            return queryClient.invalidateQueries(\n                                queryKey\n                                    .action(\"one\")\n                                    .id(id || \"\")\n                                    .get(preferLegacyKeys),\n                                invalidationFilters,\n                                invalidationOptions,\n                            );\n                        default:\n                            return;\n                    }\n                }),\n            );\n\n            return;\n        },\n        [],\n    );\n\n    return invalidate;\n};\n","import { useContext } from \"react\";\n\nimport { ResourceContext } from \"@contexts/resource\";\nimport {\n    Action,\n    BaseKey,\n    IResourceItem,\n    ResourceRouterParams,\n} from \"../../../interfaces\";\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\nimport { useRouterType } from \"../../../contexts/router-picker\";\nimport { useParsed } from \"../../router/use-parsed\";\nimport { pickResource } from \"../../../definitions/helpers/pick-resource\";\n\nexport type UseResourceLegacyProps = {\n    /**\n     * Determines which resource to use for redirection\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    resourceName?: string;\n    /**\n     * Determines which resource to use for redirection\n     * @default Resource name that it reads from route\n     */\n    resourceNameOrRouteName?: string;\n    /**\n     * Adds id to the end of the URL\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    recordItemId?: BaseKey;\n};\n\n/**\n * Matches the resource by identifier.\n * If not provided, the resource from the route will be returned.\n * If your resource does not explicitly define an identifier, the resource name will be used.\n */\nexport type UseResourceParam = string | undefined;\n\ntype SelectReturnType<T extends boolean> = T extends true\n    ? { resource: IResourceItem; identifier: string }\n    : { resource: IResourceItem; identifier: string } | undefined;\n\nexport type UseResourceReturnType = {\n    resources: IResourceItem[];\n    resource?: IResourceItem;\n    /**\n     * @deprecated Use `resource.name` instead when you need to get the resource name.\n     */\n    resourceName?: string;\n    id?: BaseKey;\n    action?: Action;\n    select: <T extends boolean = true>(\n        resourceName: string,\n        force?: T,\n    ) => SelectReturnType<T>;\n    identifier?: string;\n};\n\ntype UseResourceReturnTypeWithResource = UseResourceReturnType & {\n    resource: IResourceItem;\n    identifier: string;\n};\n\n/**\n * @deprecated Use `useResource` with `identifier` property instead. (`identifier` does not check by route name in new router)\n */\nexport function useResource(\n    props: UseResourceLegacyProps,\n): UseResourceReturnType;\nexport function useResource(): UseResourceReturnType;\nexport function useResource<TIdentifier = UseResourceParam>(\n    identifier: TIdentifier,\n): TIdentifier extends NonNullable<UseResourceParam>\n    ? UseResourceReturnTypeWithResource\n    : UseResourceReturnType;\n/**\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/resource/useResource} for more details.\n */\nexport function useResource(\n    args?: UseResourceLegacyProps | UseResourceParam,\n): UseResourceReturnType {\n    const { resources } = useContext(ResourceContext);\n\n    const routerType = useRouterType();\n\n    const params = useParsed();\n\n    const oldProps = {\n        resourceName:\n            args && typeof args !== \"string\" ? args.resourceName : args,\n        resourceNameOrRouteName:\n            args && typeof args !== \"string\"\n                ? args.resourceNameOrRouteName\n                : args,\n        recordItemId:\n            args && typeof args !== \"string\" ? args.recordItemId : undefined,\n    };\n\n    const select = <T extends boolean = true>(\n        resourceName: string,\n        force = true,\n    ): SelectReturnType<T> => {\n        const isLegacy = routerType === \"legacy\";\n        const pickedResource = pickResource(resourceName, resources, isLegacy);\n\n        if (pickedResource) {\n            return {\n                resource: pickedResource,\n                identifier: pickedResource.identifier ?? pickedResource.name,\n            } as SelectReturnType<T>;\n        }\n\n        if (force) {\n            const resource: IResourceItem = {\n                name: resourceName,\n                identifier: resourceName,\n            };\n\n            const identifier = resource.identifier ?? resource.name;\n\n            return {\n                resource,\n                identifier,\n            } as SelectReturnType<T>;\n        }\n\n        return undefined as SelectReturnType<T>;\n    };\n\n    /**\n     * Legacy Router - Start\n     *\n     * using `useParams` and `route` to match resource and get params.\n     */\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const legacyParams = useParams<Partial<ResourceRouterParams>>();\n\n    if (routerType === \"legacy\") {\n        const resourceKeyToCheck = oldProps.resourceNameOrRouteName\n            ? oldProps.resourceNameOrRouteName\n            : legacyParams.resource;\n\n        const legacyResource = resourceKeyToCheck\n            ? resourceWithRoute(resourceKeyToCheck)\n            : undefined;\n        const legacyId = oldProps?.recordItemId ?? legacyParams.id;\n        const legacyAction = legacyParams.action;\n        const legacyResourceName =\n            oldProps?.resourceName ?? legacyResource?.name;\n        const legacyIdentifier =\n            legacyResource?.identifier ?? legacyResource?.name;\n\n        return {\n            resources,\n            resource: legacyResource,\n            resourceName: legacyResourceName,\n            id: legacyId,\n            action: legacyAction,\n            select,\n            identifier: legacyIdentifier,\n        };\n    }\n    /** Legacy Router - End */\n\n    /** New Router */\n    let resource: IResourceItem | undefined = undefined;\n    // we try to pick the resource from props first\n    const identifier =\n        typeof args === \"string\" ? args : oldProps?.resourceNameOrRouteName;\n    if (identifier) {\n        const pickedFromProps = pickResource(identifier, resources);\n        if (pickedFromProps) {\n            resource = pickedFromProps;\n        } else {\n            resource = {\n                name: identifier as string,\n            };\n        }\n    } else if (params?.resource) {\n        resource = params.resource;\n    }\n\n    return {\n        resources,\n        resource,\n        resourceName: resource?.name,\n        id: params.id,\n        action: params.action,\n        select,\n        identifier: resource?.identifier ?? resource?.name,\n    };\n}\n","import React from \"react\";\n\nimport { IResourceContext } from \"./IResourceContext\";\nimport {\n    IResourceItem,\n    ResourceProps,\n} from \"../../interfaces/bindings/resource\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\nimport { legacyResourceTransform } from \"@definitions/helpers\";\n\nexport {\n    IResourceItem,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext,\n} from \"../../interfaces/bindings/resource\";\n\nexport const ResourceContext = React.createContext<IResourceContext>({\n    resources: [],\n});\n\nexport const ResourceContextProvider: React.FC<\n    React.PropsWithChildren<{ resources: ResourceProps[] }>\n> = ({ resources: providedResources, children }) => {\n    const resources: IResourceItem[] = useDeepMemo(() => {\n        return legacyResourceTransform(providedResources ?? []);\n    }, [providedResources]);\n\n    return (\n        <ResourceContext.Provider value={{ resources }}>\n            {children}\n        </ResourceContext.Provider>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport { useMemoized } from \"@hooks/memoized\";\n\n/**\n * Hook that memoizes the given dependency array and checks the consecutive calls with deep equality and returns the same value as the first call if dependencies are not changed.\n * @internal\n */\nexport const useDeepMemo = <T,>(\n    fn: () => T,\n    dependencies: React.DependencyList,\n): T => {\n    const memoizedDependencies = useMemoized(dependencies);\n\n    const value = useMemo(fn, memoizedDependencies);\n\n    return value;\n};\n","import { useRef } from \"react\";\nimport isEqual from \"lodash-es/isEqual\";\n\n/**\n * Hook that memoizes the given value with deep equality.\n * @internal\n */\nexport const useMemoized = <T = unknown,>(value: T): T => {\n    const ref = useRef(value);\n\n    if (!isEqual(ref.current, value)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n};\n","import React from \"react\";\n\n/**\n * This context is used to determine which router to use.\n *\n * This is a temporary solution until we remove the legacy router.\n */\n\nexport const RouterPickerContext = React.createContext<\"legacy\" | \"new\">(\"new\");\n\nexport const RouterPickerProvider = RouterPickerContext.Provider;\n\n/**\n * This is a temporary hook to determine which router to use.\n * It will be removed once the legacy router is removed.\n * @internal This is an internal hook.\n */\nexport const useRouterType = () => {\n    const value = React.useContext(RouterPickerContext);\n    return value;\n};\n","import React from \"react\";\nimport { useParse } from \"../use-parse\";\n\nexport const useParsed = <\n    TParams extends Record<string, any> = Record<string, any>,\n>() => {\n    const parse = useParse();\n\n    const parsed = React.useMemo(() => parse<TParams>(), [parse]);\n\n    return parsed;\n};\n","import React, { createContext, PropsWithChildren } from \"react\";\nimport { RouterBindings } from \"src/interfaces\";\n\nconst defaultBindings = {};\n\nexport const RouterBindingsContext =\n    createContext<RouterBindings>(defaultBindings);\n\nexport const RouterBindingsProvider: React.FC<\n    PropsWithChildren<{ router?: RouterBindings }>\n> = ({ children, router }) => {\n    return (\n        <RouterBindingsContext.Provider value={router ?? defaultBindings}>\n            {children}\n        </RouterBindingsContext.Provider>\n    );\n};\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport React, { useContext } from \"react\";\nimport { ParseFunction, ParseResponse } from \"src/interfaces\";\n\ntype UseParseType = () => <\n    TParams extends Record<string, any> = Record<string, any>,\n>() => ParseResponse<TParams>;\n\nexport const useParse: UseParseType = () => {\n    const bindings = useContext(RouterBindingsContext);\n\n    const useParse = React.useMemo(\n        () =>\n            bindings?.parse ??\n            (() =>\n                (() => {\n                    return {};\n                }) as ParseFunction),\n        [bindings?.parse],\n    );\n\n    const parse = useParse();\n\n    return parse as ReturnType<UseParseType>;\n};\n","import { useContext, useCallback } from \"react\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { IResourceItem } from \"../../../interfaces\";\nimport { pickResource } from \"@definitions/helpers/pick-resource\";\n\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\n\n/**\n * @deprecated Use `useResource` hook instead.\n * @internal This hook is for internal use only. And is kept for backward compatibility.\n */\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useCallback(\n        (route: string) => {\n            const picked = pickResource(route, resources, true);\n            if (picked) {\n                return picked;\n            }\n            return { name: route, route: route } as IResourceItem;\n        },\n        [resources],\n    );\n\n    return resourceWithRoute;\n};\n","import { LiveContext } from \"@contexts/live\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { useInvalidate } from \"@hooks/invalidate\";\nimport { useResource } from \"@hooks/resource\";\nimport { useContext, useEffect } from \"react\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    IRefineContext,\n    LiveEvent,\n    LiveModeProps,\n    MetaQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseResourceSubscriptionProps = {\n    channel: string;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        /**\n         * @deprecated `params.meta` is depcerated. Use `meta` directly from the root level instead.\n         */\n        meta?: MetaQuery;\n        /**\n         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n         */\n        metaData?: MetaQuery;\n        pagination?: Pagination;\n        /**\n         * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.\n         */\n        hasPagination?: boolean;\n        /**\n         * @deprecated `sort` is deprecated. Use `sorters` instead.\n         */\n        sort?: CrudSorting;\n        sorters?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\n        [key: string]: any;\n    };\n    types: LiveEvent[\"type\"][];\n    resource?: string;\n    enabled?: boolean;\n    /**\n     * @deprecated use `meta.dataProviderName` instead.\n     */\n    dataProviderName?: string;\n    meta?: MetaQuery & { dataProviderName?: string };\n} & LiveModeProps;\n\nexport type PublishType = {\n    (event: LiveEvent): void;\n};\n\nexport const useResourceSubscription = ({\n    resource: resourceFromProp,\n    params,\n    channel,\n    types,\n    enabled = true,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    dataProviderName: dataProviderNameFromProps,\n    meta,\n}: UseResourceSubscriptionProps): void => {\n    const { resource, identifier } = useResource(resourceFromProp);\n\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n    const {\n        liveMode: liveModeFromContext,\n        onLiveEvent: onLiveEventContextCallback,\n    } = useContext<IRefineContext>(RefineContext);\n\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\n\n    const invalidate = useInvalidate();\n\n    const dataProviderName =\n        dataProviderNameFromProps ??\n        meta?.dataProviderName ??\n        resource?.meta?.dataProviderName;\n\n    useEffect(() => {\n        let subscription: any;\n\n        const callback = (event: LiveEvent) => {\n            if (liveMode === \"auto\") {\n                invalidate({\n                    resource: identifier,\n                    dataProviderName,\n                    invalidates: [\"resourceAll\"],\n                    invalidationFilters: {\n                        type: \"active\",\n                        refetchType: \"active\",\n                    },\n                    invalidationOptions: { cancelRefetch: false },\n                });\n            }\n\n            onLiveEvent?.(event);\n            onLiveEventContextCallback?.(event);\n        };\n\n        if (liveMode && liveMode !== \"off\" && enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params: {\n                    resource: resource?.name,\n                    ...params,\n                },\n                types,\n                callback,\n                dataProviderName,\n                meta: {\n                    ...meta,\n                    dataProviderName,\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useLiveMode = (\n    liveMode: LiveModeProps[\"liveMode\"],\n): LiveModeProps[\"liveMode\"] => {\n    const { liveMode: liveModeFromContext } =\n        useContext<IRefineContext>(RefineContext);\n\n    return liveMode ?? liveModeFromContext;\n};\n","import { useContext, useEffect } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    LiveEvent,\n    MetaQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseSubscriptionProps = {\n    /**\n     * Channel name to subscribe.\n     */\n    channel: string;\n    /**\n     * Callback that is run when new events from subscription arrive.\n     */\n    onLiveEvent: (event: LiveEvent) => void;\n    /**\n     * Type of events to subscribe. `\"*\"` means all events.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    types?: LiveEvent[\"type\"][];\n    /**\n     * Determines subscription should subscribe or not.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    enabled?: boolean;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        /**\n         * @deprecated `params.meta` is depcerated. Use `meta` directly from the root level instead.\n         */\n        meta?: MetaQuery;\n        /**\n         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n         */\n        metaData?: MetaQuery;\n        pagination?: Pagination;\n        /**\n         * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.\n         */\n        hasPagination?: boolean;\n        /**\n         * @deprecated `sort` is deprecated, use `sorters` instead.\n         */\n        sort?: CrudSorting;\n        sorters?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\n        resource?: string;\n        [key: string]: any;\n    };\n    /**\n     * @deprecated use `meta.dataProviderName` instead.\n     */\n    dataProviderName?: string;\n    meta?: MetaQuery & { dataProviderName?: string };\n};\n\nexport const useSubscription = ({\n    params,\n    channel,\n    types = [\"*\"],\n    enabled = true,\n    onLiveEvent,\n    dataProviderName = \"default\",\n    meta,\n}: UseSubscriptionProps): void => {\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params,\n                types,\n                callback: onLiveEvent,\n                dataProviderName,\n                meta: {\n                    ...meta,\n                    dataProviderName,\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport { ILiveContext } from \"../../../interfaces\";\n\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\n    const liveContext = useContext<ILiveContext>(LiveContext);\n\n    return liveContext?.publish;\n};\n","import { useContext } from \"react\";\n\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\n\nexport type UseCancelNotificationType = () => {\n    notifications: IUndoableQueue[];\n    notificationDispatch: React.Dispatch<any>;\n};\n\nexport const useCancelNotification: UseCancelNotificationType = () => {\n    const { notifications, notificationDispatch } =\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\n\n    return { notifications, notificationDispatch };\n};\n","import { useContext } from \"react\";\n\nimport { NotificationContext } from \"@contexts/notification\";\nimport { INotificationContext } from \"../../../interfaces\";\n\nexport const useNotification = (): INotificationContext => {\n    const { open, close } = useContext(NotificationContext);\n\n    return { open, close };\n};\n","import React, { createContext } from \"react\";\n\nimport { INotificationContext } from \"./INotificationContext\";\n\n/** @deprecated default value for notification context has no use and is an empty object.  */\nexport const defaultNotificationProvider: INotificationContext = {};\n\nexport const NotificationContext = createContext<INotificationContext>({});\n\nexport const NotificationContextProvider: React.FC<\n    INotificationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ open, close, children }) => {\n    return (\n        <NotificationContext.Provider value={{ open, close }}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\n\nimport { OpenNotificationParams } from \"../../../interfaces\";\nimport { useNotification } from \"@hooks\";\n\nexport const useHandleNotification = (): typeof handleNotification => {\n    const { open } = useNotification();\n\n    const handleNotification = useCallback(\n        (\n            notification: OpenNotificationParams | false | undefined,\n            fallbackNotification?: OpenNotificationParams,\n        ) => {\n            if (notification !== false) {\n                if (notification) {\n                    open?.(notification);\n                } else if (fallbackNotification) {\n                    open?.(fallbackNotification);\n                }\n            }\n        },\n        [],\n    );\n\n    return handleNotification;\n};\n","import { useCallback, useContext } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\n * It returns the changeLocale method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/translate/useSetLocale} for more details.\n */\nexport const useSetLocale = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\n};\n","import React from \"react\";\n\nimport { ITranslationContext } from \"../../interfaces\";\n\n/** @deprecated default value for translation context has no use and is an empty object.  */\nexport const defaultProvider: ITranslationContext = {};\n\nexport const TranslationContext = React.createContext<ITranslationContext>({});\n\nexport const TranslationContextProvider: React.FC<\n    ITranslationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, i18nProvider }) => {\n    return (\n        <TranslationContext.Provider\n            value={{\n                i18nProvider: i18nProvider,\n            }}\n        >\n            {children}\n        </TranslationContext.Provider>\n    );\n};\n","import { useContext, useMemo } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\n * It returns the translate method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/translate/useTranslate} for more details.\n */\nexport const useTranslate = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const fn = useMemo(() => {\n        function translate(\n            key: string,\n            options?: any,\n            defaultMessage?: string,\n        ): string;\n        function translate(key: string, defaultMessage?: string): string;\n\n        function translate(\n            key: string,\n            options?: string | any,\n            defaultMessage?: string,\n        ) {\n            return (\n                i18nProvider?.translate(key, options, defaultMessage) ??\n                defaultMessage ??\n                (typeof options === \"string\" &&\n                typeof defaultMessage === \"undefined\"\n                    ? options\n                    : key)\n            );\n        }\n\n        return translate;\n    }, [i18nProvider]);\n\n    return fn;\n};\n","import { useContext, useCallback } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\nexport type UseGetLocaleType = () => () => string | undefined;\n\n/**\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\n * It returns the `getLocale` method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/translate/useGetLocale} for more details.\n */\nexport const useGetLocale: UseGetLocaleType = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback(() => i18nProvider?.getLocale(), []);\n};\n","import { useState } from \"react\";\nimport { useResource, useDataProvider, useMeta } from \"@hooks\";\nimport {\n    BaseRecord,\n    MapDataFn,\n    CrudSorting,\n    CrudFilters,\n    MetaQuery,\n} from \"../../interfaces\";\nimport {\n    useUserFriendlyName,\n    pickDataProvider,\n    pickNotDeprecated,\n} from \"@definitions\";\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\n\ntype UseExportOptionsType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     * @deprecated `resourceName` is deprecated. Use `resource` instead.\n     */\n    resourceName?: string;\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents\n     */\n    mapData?: MapDataFn<TData, TVariables>;\n    /**\n     *  Sorts records\n     *  @deprecated `sorter` is deprecated. Use `sorters` instead.\n     */\n    sorter?: CrudSorting;\n    /**\n     *  Sorts records\n     */\n    sorters?: CrudSorting;\n    /**\n     *  Filters records\n     */\n    filters?: CrudFilters;\n    maxItemCount?: number;\n    /**\n     *  Requests to fetch data are made as batches by page size. By default, it is 20. Used for `getList` method of `DataProvider`\n     */\n    pageSize?: number;\n    /**\n     *  Used for exporting options\n     *  @type [Options](https://github.com/alexcaza/export-to-csv)\n     */\n    exportOptions?: Options;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     *  Metadata query for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     *  Callback to handle error events of this hook\n     */\n    onError?: (error: any) => void;\n};\n\ntype UseExportReturnType = {\n    isLoading: boolean;\n    triggerExport: () => Promise<void>;\n};\n\n/**\n * `useExport` hook allows you to make your resources exportable.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/import-export/useExport} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TVariables - Values for params.\n *\n */\nexport const useExport = <\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n>({\n    resourceName,\n    resource: resourceFromProps,\n    sorter,\n    sorters,\n    filters,\n    maxItemCount,\n    pageSize = 20,\n    mapData = (item) => item as any,\n    exportOptions,\n    meta,\n    metaData,\n    dataProviderName,\n    onError,\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const dataProvider = useDataProvider();\n    const getMeta = useMeta();\n    const { resource, resources, identifier } = useResource(\n        pickNotDeprecated(resourceFromProps, resourceName),\n    );\n    const getFriendlyName = useUserFriendlyName();\n\n    const filename = `${getFriendlyName(\n        identifier,\n        \"plural\",\n    )}-${new Date().toLocaleString()}`;\n\n    const { getList } = dataProvider(\n        pickDataProvider(identifier, dataProviderName, resources),\n    );\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    const triggerExport = async () => {\n        setIsLoading(true);\n\n        let rawData: BaseRecord[] = [];\n\n        let current = 1;\n        let preparingData = true;\n        while (preparingData) {\n            try {\n                const { data, total } = await getList<TData>({\n                    resource: resource?.name ?? \"\",\n                    filters,\n                    sort: pickNotDeprecated(sorters, sorter),\n                    sorters: pickNotDeprecated(sorters, sorter),\n                    pagination: {\n                        current,\n                        pageSize,\n                        mode: \"server\",\n                    },\n                    meta: combinedMeta,\n                    metaData: combinedMeta,\n                });\n\n                current++;\n\n                rawData.push(...data);\n\n                if (maxItemCount && rawData.length >= maxItemCount) {\n                    rawData = rawData.slice(0, maxItemCount);\n                    preparingData = false;\n                }\n\n                if (total === rawData.length) {\n                    preparingData = false;\n                }\n            } catch (error) {\n                setIsLoading(false);\n                preparingData = false;\n\n                onError?.(error);\n\n                return;\n            }\n        }\n\n        const csvExporter = new ExportToCsv({\n            filename,\n            useKeysAsHeaders: true,\n            ...exportOptions,\n        });\n\n        csvExporter.generateCsv(rawData.map(mapData as any));\n\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading,\n        triggerExport,\n    };\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport warnOnce from \"warn-once\";\nimport debounce from \"lodash-es/debounce\";\n\nimport {\n    useWarnAboutChange,\n    useCreate,\n    useUpdate,\n    useRedirectionAfterSubmission,\n    useMutationMode,\n    useOne,\n    useRefineContext,\n    useMeta,\n    useInvalidate,\n} from \"@hooks\";\n\nimport {\n    BaseRecord,\n    CreateResponse,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    RedirectAction,\n    SuccessErrorNotification,\n    UpdateResponse,\n    MutationMode,\n    BaseKey,\n    IQueryKeys,\n    FormAction,\n    MetaQuery,\n    AutoSaveProps,\n    AutoSaveReturnType,\n    OptimisticUpdateMapType,\n} from \"../../interfaces\";\nimport {\n    UpdateParams,\n    UseUpdateProps,\n    UseUpdateReturnType,\n} from \"../data/useUpdate\";\nimport { UseCreateProps, UseCreateReturnType } from \"../data/useCreate\";\nimport { redirectPage } from \"@definitions/helpers\";\nimport { useResource } from \"../resource/useResource\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type ActionParams = {\n    /**\n     * Type of the form mode\n     * @default Action that it reads from route otherwise \"create\" is used\n     */\n    action?: FormAction;\n};\n\ntype ActionFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Record id for fetching\n     * @default Id that it reads from the URL\n     */\n    id?: BaseKey;\n    /**\n     * Page to redirect after a succesfull mutation\n     * @type `\"show\" | \"edit\" | \"list\" | \"create\" | false`\n     * @default `\"list\"`\n     */\n    redirect?: RedirectAction;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for dataProvider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * Metadata to pass for the `useOne` query\n     */\n    queryMeta?: MetaQuery;\n    /**\n     * Metadata to pass for the mutation (`useCreate` for `create` and `clone` actions, `useUpdate` for `edit` action)\n     */\n    mutationMeta?: MetaQuery;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     * @default `\"pessimistic\"*`\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Called when a mutation is successful\n     */\n    onMutationSuccess?: (\n        data: CreateResponse<TResponse> | UpdateResponse<TResponse>,\n        variables: TVariables,\n        context: any,\n        isAutoSave?: boolean,\n    ) => void;\n    /**\n     * Called when a mutation encounters an error\n     */\n    onMutationError?: (\n        error: TResponseError,\n        variables: TVariables,\n        context: any,\n        isAutoSave?: boolean,\n    ) => void;\n    /**\n     * Duration to wait before executing mutations when `mutationMode = \"undoable\"`\n     * @default `5000*`\n     */\n    undoableTimeout?: number;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @type  `all`, `resourceAll`, `list`, `many`, `detail`, `false`\n     * @default `[\"list\", \"many\", \"detail\"]`\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options of useOne hook used while in edit mode.\n     */\n    queryOptions?: UseQueryOptions<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >;\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useCreate hook used while submitting in create and clone modes.\n     */\n    createMutationOptions?: UseCreateProps<\n        TResponse,\n        TResponseError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useUpdate hook used while submitting in edit mode.\n     */\n    updateMutationOptions?: UseUpdateProps<\n        TResponse,\n        TResponseError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * If you customize the [`optimisticUpdateMap`](https://refine.dev/docs/api-reference/core/hooks/data/useUpdateMany/#optimisticupdatemap) option, you can use it to manage the invalidations that will occur at the end of the mutation.\n     * @default {\n     *   list: true,\n     *   many: true,\n     *   detail: true,\n     * }\n     */\n    optimisticUpdateMap?: OptimisticUpdateMapType<TResponse, TVariables>;\n} & SuccessErrorNotification<\n    UpdateResponse<TResponse> | CreateResponse<TResponse>,\n    TResponseError,\n    { id: BaseKey; values: TVariables } | TVariables\n> &\n    ActionParams &\n    LiveModeProps;\n\nexport type UseFormProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = ActionFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> &\n    ActionParams &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps &\n    AutoSaveProps<TVariables>;\n\nexport type UseFormReturnType<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n> = {\n    id?: BaseKey;\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\n    queryResult?: QueryObserverResult<GetOneResponse<TData>, TError>;\n    mutationResult:\n        | UseUpdateReturnType<TResponse, TResponseError, TVariables>\n        | UseCreateReturnType<TResponse, TResponseError, TVariables>;\n    formLoading: boolean;\n    onFinish: (\n        values: TVariables,\n    ) => Promise<CreateResponse<TResponse> | UpdateResponse<TResponse> | void>;\n    redirect: (\n        redirect: RedirectAction,\n        idFromFunction?: BaseKey | undefined,\n        routeParams?: Record<string, string | number>,\n    ) => void;\n} & UseLoadingOvertimeReturnType &\n    AutoSaveReturnType<TResponse, TResponseError, TVariables>;\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useForm} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n * @typeParam TResponse - Result data returned by the mutation function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TData`\n * @typeParam TResponseError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}. Defaults to `TError`\n *\n */\nexport const useForm = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TData extends BaseRecord = TQueryFnData,\n    TResponse extends BaseRecord = TData,\n    TResponseError extends HttpError = TError,\n>({\n    resource: resourceFromProps,\n    action: actionFromProps,\n    id: idFromProps,\n    onMutationSuccess,\n    onMutationError,\n    redirect: redirectFromProps,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    queryMeta,\n    mutationMeta,\n    mutationMode: mutationModeProp,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    undoableTimeout,\n    dataProviderName,\n    invalidates,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n    overtimeOptions,\n    autoSave,\n    optimisticUpdateMap,\n}: UseFormProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> = {}): UseFormReturnType<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n> => {\n    const invalidate = useInvalidate();\n    const { options } = useRefineContext();\n    const getMeta = useMeta();\n\n    const {\n        resource,\n        id: idFromRoute,\n        action: actionFromRoute,\n        identifier,\n    } = useResource(resourceFromProps);\n    const { identifier: inferredIdentifier } = useResource();\n\n    /** We only accept `id` from URL params if `resource` is not explicitly passed. */\n    /** This is done to avoid sending wrong requests for custom `resource` and an async `id` */\n    const getDefaultId = () => {\n        const idFromPropsOrRoute = idFromProps ?? idFromRoute;\n\n        if (resourceFromProps && resourceFromProps !== inferredIdentifier) {\n            return idFromProps;\n        }\n\n        return idFromPropsOrRoute;\n    };\n    const defaultId = getDefaultId();\n\n    // id state is needed to determine selected record in a context for example useModal\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\n\n    /**\n     * In some cases, `id` from the router params is not available at the first render.\n     *\n     * (e.g. when using `Next.js` and client-side-rendering, `router` is not ready to use at the first render)\n     *\n     * We're watching for `defaultId` changes and setting `id` state if it's not equal to `defaultId`.\n     */\n    React.useEffect(() => {\n        setId(defaultId);\n    }, [defaultId]);\n\n    const getAction = () => {\n        if (actionFromProps) return actionFromProps;\n        else if (actionFromRoute === \"edit\" || actionFromRoute === \"clone\")\n            return actionFromRoute;\n        else return \"create\";\n    };\n    const action = getAction();\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const isCreate = action === \"create\";\n    const isEdit = action === \"edit\";\n    const isClone = action === \"clone\";\n\n    warnOnce(\n        (isClone || isEdit) &&\n            Boolean(resourceFromProps) &&\n            !Boolean(idFromProps) &&\n            queryOptions?.enabled !== false,\n        `[useForm]: action: \"${action}\", resource: \"${identifier}\", id: ${id} \\n\\n` +\n            `If you don't use the \\`setId\\` method to set the \\`id\\`, you should pass the \\`id\\` prop to \\`useForm\\`. Otherwise, \\`useForm\\` will not be able to infer the \\`id\\` from the current URL. \\n\\n` +\n            `See https://refine.dev/docs/api-reference/core/hooks/useForm/#resource`,\n    );\n\n    /**\n     * Designated `redirect` route\n     */\n    const designatedRedirectAction = redirectPage({\n        redirectFromProps,\n        action,\n        redirectOptions: options.redirect,\n    });\n\n    const enableQuery = id !== undefined && (isEdit || isClone);\n\n    const queryResult = useOne<TQueryFnData, TError, TData>({\n        resource: identifier,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: enableQuery,\n            ...queryOptions,\n        },\n        liveMode,\n        onLiveEvent,\n        liveParams,\n        meta: { ...combinedMeta, ...queryMeta },\n        metaData: { ...combinedMeta, ...queryMeta },\n        dataProviderName,\n    });\n\n    const { isFetching: isFetchingQuery } = queryResult;\n\n    const mutationResultCreate = useCreate<\n        TResponse,\n        TResponseError,\n        TVariables\n    >({\n        mutationOptions: createMutationOptions,\n    });\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\n        mutationResultCreate;\n\n    const mutationResultUpdate = useUpdate<\n        TResponse,\n        TResponseError,\n        TVariables\n    >({\n        mutationOptions: updateMutationOptions,\n    });\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\n        mutationResultUpdate;\n\n    const autoSaveMutation = useUpdate<TResponse, TResponseError, TVariables>(\n        {},\n    );\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\n\n    const onFinishCreate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const onSuccess = (id?: BaseKey) => {\n            handleSubmitWithRedirect({\n                redirect: designatedRedirectAction,\n                resource,\n                id,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n        };\n\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        return new Promise<CreateResponse<TResponse> | void>(\n            (resolve, reject) => {\n                if (mutationMode !== \"pessimistic\") {\n                    resolve();\n                }\n\n                if (!resource) return;\n\n                return mutateCreate(\n                    {\n                        values,\n                        resource: identifier ?? resource.name,\n                        successNotification,\n                        errorNotification,\n                        meta: { ...combinedMeta, ...mutationMeta },\n                        metaData: { ...combinedMeta, ...mutationMeta },\n                        dataProviderName,\n                        invalidates,\n                    },\n                    {\n                        onSuccess: (data, _, context) => {\n                            if (onMutationSuccess) {\n                                onMutationSuccess(data, values, context);\n                            }\n\n                            const responseId = data?.data?.id;\n\n                            onSuccess(responseId);\n\n                            resolve(data);\n                        },\n                        onError: (error: TResponseError, _, context) => {\n                            if (onMutationError) {\n                                return onMutationError(error, values, context);\n                            }\n                            reject();\n                        },\n                    },\n                );\n            },\n        );\n    };\n\n    React.useEffect(() => {\n        return () => {\n            if (\n                autoSave?.invalidateOnUnmount &&\n                autoSaveMutation.status === \"success\"\n            ) {\n                invalidate({\n                    id,\n                    invalidates: invalidates || [\"list\", \"many\", \"detail\"],\n                    dataProviderName,\n                    resource: identifier,\n                });\n            }\n        };\n    }, [autoSave?.invalidateOnUnmount, autoSaveMutation.status]);\n\n    const onFinishAutoSaveMutation = (\n        values: TVariables,\n    ): Promise<UpdateResponse<TResponse> | void> | void => {\n        if (!resource || !isEdit) return;\n\n        const variables: UpdateParams<TResponse, TResponseError, TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: identifier ?? resource.name,\n            successNotification: false,\n            errorNotification: false,\n            meta: { ...combinedMeta, ...mutationMeta },\n            metaData: { ...combinedMeta, ...mutationMeta },\n            dataProviderName,\n            invalidates: [],\n            mutationMode: \"pessimistic\",\n        };\n\n        return autoSaveMutation.mutate(variables, {\n            onSuccess: (data, _, context) => {\n                if (onMutationSuccess) {\n                    onMutationSuccess(data, values, context, true);\n                }\n            },\n            onError: (error: TResponseError, _, context) => {\n                if (onMutationError) {\n                    return onMutationError(error, values, context, true);\n                }\n            },\n        });\n    };\n\n    const onFinishAutoSave = debounce((allValues) => {\n        return onFinishAutoSaveMutation(allValues);\n    }, autoSave?.debounce || 1000);\n\n    const onFinishUpdate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        if (!resource) return;\n\n        const variables: UpdateParams<TResponse, TResponseError, TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: identifier ?? resource.name,\n            mutationMode,\n            undoableTimeout,\n            successNotification,\n            errorNotification,\n            meta: { ...combinedMeta, ...mutationMeta },\n            metaData: { ...combinedMeta, ...mutationMeta },\n            dataProviderName,\n            invalidates,\n            optimisticUpdateMap,\n        };\n\n        const onSuccess = () => {\n            handleSubmitWithRedirect({\n                redirect: designatedRedirectAction,\n                resource,\n                id,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n        };\n\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\n        return new Promise<UpdateResponse<TResponse> | void>(\n            (resolve, reject) => {\n                if (mutationMode !== \"pessimistic\") {\n                    resolve();\n                }\n                return setTimeout(() => {\n                    mutateUpdate(variables, {\n                        onSuccess: (data, _, context) => {\n                            if (onMutationSuccess) {\n                                onMutationSuccess(data, values, context);\n                            }\n\n                            if (mutationMode === \"pessimistic\") {\n                                onSuccess();\n                            }\n\n                            resolve(data);\n                        },\n                        onError: (error: TResponseError, _, context) => {\n                            if (onMutationError) {\n                                return onMutationError(error, values, context);\n                            }\n                            reject();\n                        },\n                    });\n                });\n            },\n        );\n    };\n\n    const createResult = {\n        formLoading: isFetchingQuery || isLoadingCreate,\n        mutationResult: mutationResultCreate,\n        onFinish: onFinishCreate,\n    };\n\n    const editResult = {\n        formLoading: isFetchingQuery || isLoadingUpdate,\n        mutationResult: mutationResultUpdate,\n        onFinish: onFinishUpdate,\n    };\n\n    const result = isCreate || isClone ? createResult : editResult;\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: result.mutationResult.isLoading || queryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return {\n        ...result,\n        queryResult,\n        onFinishAutoSave,\n        autoSaveProps: {\n            status: autoSaveMutation.status,\n            data: autoSaveMutation.data,\n            error: autoSaveMutation.error,\n        },\n        id,\n        setId,\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\n            handleSubmitWithRedirect({\n                redirect:\n                    redirect !== undefined\n                        ? redirect\n                        : isEdit\n                        ? \"list\"\n                        : \"edit\",\n                resource,\n                id: idFromFunction ?? id,\n                meta: pickNotDeprecated(meta, metaData),\n            });\n        },\n        overtime: {\n            elapsedTime,\n        },\n    };\n};\n","import { useCallback } from \"react\";\n\nimport {\n    BaseKey,\n    IResourceItem,\n    MetaDataQuery,\n    RedirectAction,\n} from \"../../interfaces\";\nimport { useNavigation } from \"@hooks\";\n\nexport type UseRedirectionAfterSubmissionType = () => (options: {\n    redirect: RedirectAction;\n    resource?: IResourceItem;\n    id?: BaseKey;\n    meta?: MetaDataQuery;\n}) => void;\n\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\n    () => {\n        const { show, edit, list, create } = useNavigation();\n\n        const handleSubmitWithRedirect = useCallback(\n            ({\n                redirect,\n                resource,\n                id,\n                meta = {},\n            }: {\n                redirect: RedirectAction;\n                resource?: IResourceItem;\n                id?: BaseKey;\n                meta?: MetaDataQuery;\n            }) => {\n                if (redirect && resource) {\n                    if (!!resource.show && redirect === \"show\" && id) {\n                        return show(resource, id, undefined, meta);\n                    }\n\n                    if (!!resource.edit && redirect === \"edit\" && id) {\n                        return edit(resource, id, undefined, meta);\n                    }\n\n                    if (!!resource.create && redirect === \"create\") {\n                        return create(resource, undefined, meta);\n                    }\n\n                    return list(resource, \"push\", meta);\n                } else {\n                    return;\n                }\n            },\n            [],\n        );\n\n        return handleSubmitWithRedirect;\n    };\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport { useResource } from \"@hooks/resource\";\nimport React, { useCallback, useContext } from \"react\";\nimport type {\n    Action,\n    BaseKey,\n    GoConfig as GoConfigBase,\n    IResourceItem,\n} from \"../../../interfaces\";\nimport { useGetToPath } from \"../use-get-to-path\";\n\ntype ResourceWithoutId = {\n    /**\n     *  The name or identifier of the resource.\n     */\n    resource: string;\n    action: Extract<Action, \"create\" | \"list\">;\n    id?: never;\n    meta?: Record<string, unknown>;\n};\n\ntype ResourceWithId = {\n    /**\n     *  The name or identifier of the resource.\n     */\n    resource: string;\n    action: Extract<Action, \"edit\" | \"show\" | \"clone\">;\n    id: BaseKey;\n    meta?: Record<string, unknown>;\n};\n\nexport type Resource = ResourceWithoutId | ResourceWithId;\n\nexport type GoConfigWithResource = Omit<GoConfigBase, \"to\"> & {\n    to?: GoConfigBase[\"to\"] | Resource;\n};\n\nexport const useGo = () => {\n    const bindings = useContext(RouterBindingsContext);\n    const { select: resourceSelect } = useResource();\n    const getToPath = useGetToPath();\n\n    const useGo = React.useMemo(\n        () => bindings?.go ?? (() => () => undefined),\n        [bindings?.go],\n    );\n\n    const goFromRouter = useGo();\n\n    const go = useCallback(\n        (config: GoConfigWithResource | GoConfigBase) => {\n            if (typeof config.to !== \"object\") {\n                return goFromRouter({ ...config, to: config.to });\n            }\n\n            // when config.to is an object, it means that we want to go to a resource.\n            // so we need to find the path for the resource.\n            const { resource } = resourceSelect(config.to.resource);\n            handleResourceErrors(config.to, resource);\n            const newTo = getToPath({\n                resource,\n                action: config.to.action,\n                meta: {\n                    id: config.to.id,\n                    ...config.to.meta,\n                },\n            });\n\n            return goFromRouter({\n                ...config,\n                to: newTo,\n            });\n        },\n        [resourceSelect, goFromRouter],\n    );\n\n    return go;\n};\n\n/**\n * handle errors for resource\n * @internal\n */\nexport const handleResourceErrors = (to: Resource, resource: IResourceItem) => {\n    if (!to?.action || !to?.resource) {\n        throw new Error(`[useGo]: \"action\" or \"resource\" is required.`);\n    }\n\n    if ([\"edit\", \"show\", \"clone\"].includes(to?.action) && !to.id) {\n        throw new Error(\n            `[useGo]: [action: ${to.action}] requires an \"id\" for resource [resource: ${to.resource}]`,\n        );\n    }\n\n    const actionUrl = resource[to.action];\n    if (!actionUrl) {\n        throw new Error(\n            `[useGo]: [action: ${to.action}] is not defined for [resource: ${to.resource}]`,\n        );\n    }\n};\n","import React from \"react\";\nimport { useResource } from \"../../resource\";\nimport { Action, IResourceItem } from \"../../../interfaces\";\nimport { getActionRoutesFromResource } from \"../../../definitions/helpers/router\";\nimport { useParsed } from \"../use-parsed\";\nimport { composeRoute } from \"../../../definitions/helpers/router/compose-route\";\nimport { useRouterType } from \"./../../../contexts/router-picker\";\n\ntype UseToPathParams = {\n    resource?: IResourceItem;\n    action: Action;\n    meta?: Record<string, unknown>;\n    legacy?: boolean;\n};\n\ntype GetToPathFn = (params: UseToPathParams) => string | undefined;\n\n/**\n * Returns a function to get the route for a given action and resource.\n * If resource is not provided, it will use the resource from the route.\n * If the resource is not found, it will return undefined.\n * If the action is not found, it will return undefined.\n * `meta` can be provided to compose the routes with parameters. (Can be used for nested routes.)\n */\nexport const useGetToPath = (): GetToPathFn => {\n    const routerType = useRouterType();\n    const { resource: resourceFromRoute, resources } = useResource();\n    const parsed = useParsed();\n\n    const fn = React.useCallback(\n        ({ resource, action, meta }: UseToPathParams): string | undefined => {\n            const selectedResource = resource || resourceFromRoute;\n\n            if (!selectedResource) {\n                return undefined;\n            }\n\n            const actionRoutes = getActionRoutesFromResource(\n                selectedResource,\n                resources,\n                routerType === \"legacy\",\n            );\n\n            const actionRoute = actionRoutes.find(\n                (item) => item.action === action,\n            )?.route;\n\n            if (!actionRoute) {\n                return undefined;\n            }\n\n            const composed = composeRoute(\n                actionRoute,\n                selectedResource?.meta,\n                parsed,\n                meta,\n            );\n\n            return composed;\n        },\n        [resources, resourceFromRoute, parsed],\n    );\n\n    return fn;\n};\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport React, { useContext } from \"react\";\n\nexport const useBack = () => {\n    const bindings = useContext(RouterBindingsContext);\n\n    const useBack = React.useMemo(\n        () => bindings?.back ?? (() => () => undefined),\n        [bindings?.back],\n    );\n\n    const back = useBack();\n\n    return back;\n};\n","import { useRouterContext, useResource } from \"@hooks\";\nimport { BaseKey, IResourceItem, MetaDataQuery } from \"../../interfaces\";\nimport { useGo } from \"@hooks/router/use-go\";\nimport { useParsed } from \"@hooks/router/use-parsed\";\nimport { useRouterType } from \"@contexts/router-picker\";\nimport { getActionRoutesFromResource } from \"@definitions/helpers/router\";\nimport { pickResource } from \"@definitions/helpers/pick-resource\";\nimport { composeRoute } from \"@definitions/helpers/router/compose-route\";\nimport { useBack } from \"@hooks/router/use-back\";\n\nexport type HistoryType = \"push\" | \"replace\";\n\n/**\n * `refine` uses {@link https://reactrouter.com/en/hooks/use-navigate `React Router`} and comes with all redirects out of the box.\n * It allows you to manage your routing operations in refine.\n * Using this hook, you can manage all the routing operations of your application very easily.\n *\n * @internal This is an internal hook of refine. Do not use it directly.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/navigation/useNavigation} for more details.\n */\nexport const useNavigation = () => {\n    const { resources } = useResource();\n    const routerType = useRouterType();\n    const { useHistory } = useRouterContext();\n    const history = useHistory();\n    const parsed = useParsed();\n    const go = useGo();\n    const back = useBack();\n\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\n        if (routerType === \"legacy\") {\n            history[type](url);\n        } else {\n            go({ to: url, type });\n        }\n    };\n\n    const createUrl = (\n        resource: string | IResourceItem,\n        meta: MetaDataQuery = {},\n    ) => {\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const createActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"create\");\n\n            if (!createActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                createActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                meta,\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const createActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"create\")?.route;\n\n            if (!createActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(\n                    createActionRoute,\n                    resourceItem?.meta,\n                    parsed,\n                    meta,\n                ),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const editUrl = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        meta: MetaDataQuery = {},\n    ) => {\n        const encodedId = encodeURIComponent(id);\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const editActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"edit\");\n\n            if (!editActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                editActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                {\n                    ...meta,\n                    id: encodedId,\n                },\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const editActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"edit\")?.route;\n\n            if (!editActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(editActionRoute, resourceItem?.meta, parsed, {\n                    ...meta,\n                    id: encodedId,\n                }),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const cloneUrl = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        meta: MetaDataQuery = {},\n    ) => {\n        const encodedId = encodeURIComponent(id);\n\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const cloneActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"clone\");\n\n            if (!cloneActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                cloneActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                {\n                    ...meta,\n                    id: encodedId,\n                },\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const cloneActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"clone\")?.route;\n\n            if (!cloneActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(cloneActionRoute, resourceItem?.meta, parsed, {\n                    ...meta,\n                    id: encodedId,\n                }),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const showUrl = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        meta: MetaDataQuery = {},\n    ) => {\n        const encodedId = encodeURIComponent(id);\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const showActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"show\");\n\n            if (!showActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                showActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                {\n                    ...meta,\n                    id: encodedId,\n                },\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const showActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"show\")?.route;\n\n            if (!showActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(showActionRoute, resourceItem?.meta, parsed, {\n                    ...meta,\n                    id: encodedId,\n                }),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const listUrl = (\n        resource: string | IResourceItem,\n        meta: MetaDataQuery = {},\n    ) => {\n        if (routerType === \"legacy\") {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources, true) ?? {\n                          name: resource,\n                          route: resource,\n                      }\n                    : resource;\n\n            const listActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n                true,\n            ).find((r) => r.action === \"list\");\n\n            if (!listActionRoute) {\n                return \"\";\n            }\n\n            return composeRoute(\n                listActionRoute.route,\n                resourceItem?.meta,\n                parsed,\n                meta,\n            );\n        } else {\n            const resourceItem =\n                typeof resource === \"string\"\n                    ? pickResource(resource, resources) ?? { name: resource }\n                    : resource;\n\n            const listActionRoute = getActionRoutesFromResource(\n                resourceItem,\n                resources,\n            ).find((r) => r.action === \"list\")?.route;\n\n            if (!listActionRoute) {\n                return \"\";\n            }\n\n            return go({\n                to: composeRoute(\n                    listActionRoute,\n                    resourceItem?.meta,\n                    parsed,\n                    meta,\n                ),\n                type: \"path\",\n            }) as string;\n        }\n    };\n\n    const create = (\n        resource: string | IResourceItem,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(createUrl(resource, meta), type);\n    };\n\n    const edit = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(editUrl(resource, id, meta), type);\n    };\n\n    const clone = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(cloneUrl(resource, id, meta), type);\n    };\n\n    const show = (\n        resource: string | IResourceItem,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(showUrl(resource, id, meta), type);\n    };\n\n    const list = (\n        resource: string | IResourceItem,\n        type: HistoryType = \"push\",\n        meta: MetaDataQuery = {},\n    ) => {\n        handleUrl(listUrl(resource, meta), type);\n    };\n\n    /**\n     * @deprecated Please use `useGo` hook instead.\n     */\n    const push = (path: string, ...rest: unknown[]) => {\n        if (routerType === \"legacy\") {\n            history.push(path, ...rest);\n        } else {\n            go({ to: path, type: \"push\" });\n        }\n    };\n\n    /**\n     * @deprecated Please use `useGo` hook instead.\n     */\n    const replace = (path: string, ...rest: unknown[]) => {\n        if (routerType === \"legacy\") {\n            history.replace(path, ...rest);\n        } else {\n            go({ to: path, type: \"replace\" });\n        }\n    };\n\n    /**\n     * @deprecated Please use `useBack` hook instead.\n     */\n    const goBack = () => {\n        if (routerType === \"legacy\") {\n            history.goBack();\n        } else {\n            back();\n        }\n    };\n\n    return {\n        create,\n        createUrl,\n        edit,\n        editUrl,\n        clone,\n        cloneUrl,\n        show,\n        showUrl,\n        list,\n        listUrl,\n        push,\n        replace,\n        goBack,\n    };\n};\n","import React, { useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport warnOnce from \"warn-once\";\n\nimport { useMeta, useOne } from \"@hooks\";\n\nimport {\n    BaseRecord,\n    GetOneResponse,\n    SuccessErrorNotification,\n    MetaQuery,\n    LiveModeProps,\n    BaseKey,\n    HttpError,\n    Prettify,\n} from \"../../interfaces\";\nimport { useResource } from \"../resource/useResource\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError> = {\n    queryResult: QueryObserverResult<GetOneResponse<TData>, TError>;\n    showId?: BaseKey;\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\n} & UseLoadingOvertimeReturnType;\n\nexport type useShowProps<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Reads `:resource` from the URL\n     */\n    resource?: string;\n    /**\n     * Data item ID for API data interactions\n     * @default Reads `:id` from the URL\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetOneResponse<TQueryFnData>,\n        TError,\n        GetOneResponse<TData>\n    >;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     */\n    meta?: MetaQuery;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * Target data provider name for API call to be made\n     * @default `\"default\"`\n     */\n    dataProviderName?: string;\n} & LiveModeProps &\n    SuccessErrorNotification<\n        GetOneResponse<TData>,\n        TError,\n        Prettify<{ id?: BaseKey } & MetaQuery>\n    > &\n    UseLoadingOvertimeOptionsProps;\n\n/**\n * `useShow` hook allows you to fetch the desired record.\n * It uses `getOne` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-reference/core/components/refine-config/ `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/show/useShow} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useShow = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    resource: resourceFromProp,\n    id,\n    successNotification,\n    errorNotification,\n    meta,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    dataProviderName,\n    queryOptions,\n    overtimeOptions,\n}: useShowProps<\n    TQueryFnData,\n    TError,\n    TData\n> = {}): useShowReturnType<TData, TError> => {\n    const {\n        resource,\n        id: idFromRoute,\n        identifier,\n    } = useResource(resourceFromProp);\n    const { identifier: inferredIdentifier } = useResource();\n    const getMeta = useMeta();\n\n    const getDefaultId = () => {\n        const idFromPropsOrRoute = id ?? idFromRoute;\n\n        if (resourceFromProp && resourceFromProp !== inferredIdentifier) {\n            return id;\n        }\n\n        return idFromPropsOrRoute;\n    };\n    const defaultId = getDefaultId();\n\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        setShowId(defaultId);\n    }, [defaultId]);\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    warnOnce(\n        Boolean(resourceFromProp) && !Boolean(id),\n        `[useShow]: resource: \"${identifier}\", id: ${id} \\n\\n` +\n            `If you don't use the \\`setShowId\\` method to set the \\`showId\\`, you should pass the \\`id\\` prop to \\`useShow\\`. Otherwise, \\`useShow\\` will not be able to infer the \\`id\\` from the current URL. \\n\\n` +\n            `See https://refine.dev/docs/api-reference/core/hooks/show/useShow/#resource`,\n    );\n\n    const queryResult = useOne<TQueryFnData, TError, TData>({\n        resource: identifier,\n        id: showId ?? \"\",\n        queryOptions: {\n            enabled: showId !== undefined,\n            ...queryOptions,\n        },\n        successNotification,\n        errorNotification,\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return {\n        queryResult,\n        showId,\n        setShowId,\n        overtime: { elapsedTime },\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { parse, ParseConfig } from \"papaparse\";\nimport chunk from \"lodash-es/chunk\";\n\nimport { useCreate, useCreateMany, useMeta, useResource } from \"@hooks\";\nimport { MapDataFn, BaseRecord, HttpError, MetaQuery } from \"../../interfaces\";\nimport {\n    importCSVMapper,\n    sequentialPromises,\n    pickNotDeprecated,\n} from \"@definitions\";\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\n\nexport type ImportSuccessResult<TVariables, TData> = {\n    request: TVariables[];\n    type: \"success\";\n    response: TData[];\n};\n\nexport type ImportErrorResult<TVariables> = {\n    request: TVariables[];\n    type: \"error\";\n    response: HttpError[];\n};\n\nexport type OnFinishParams<TVariables, TData> = {\n    succeeded: ImportSuccessResult<TVariables, TData>[];\n    errored: ImportErrorResult<TVariables>[];\n};\n\nexport type OnProgressParams = {\n    totalAmount: number;\n    processedAmount: number;\n};\n\nexport type ImportOptions<\n    TItem,\n    TVariables = any,\n    TData extends BaseRecord = BaseRecord,\n> = {\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     * @deprecated `resourceName` is deprecated. Use `resource` instead.\n     */\n    resourceName?: string;\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents.\n     */\n    mapData?: MapDataFn<TItem, TVariables>;\n    /**\n     * Custom Papa Parse options.\n     * @type [`ParseConfig`](https://www.papaparse.com/docs)\n     */\n    paparseOptions?: ParseConfig;\n    /**\n     * Requests batch size. If it is 1, all records are sent one by one. By default, it is [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to send all records in one batch. If it is more than 1, `createMany` should be implemented on DataProvider.\n     */\n    batchSize?: number;\n    /**\n     * Called with errors and successful responses when all requests are sent.\n     */\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    meta?: MetaQuery;\n    /**\n     *  Metadata query for `dataProvider`\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     *  A callback function that returns a current state of uploading process.\n     *\n     *  Ex: `percentage = onProgressParams.processedAmount / onProgressParams.totalAmount * 100`\n     */\n    onProgress?: (onProgressParams: OnProgressParams) => void;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n};\n\nexport type CreatedValuesType<TVariables, TData> =\n    | ImportSuccessResult<TVariables, TData>\n    | ImportErrorResult<TVariables>;\n\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\n    file: Partial<File>;\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\n\nexport type UseImportInputPropsType = {\n    type: \"file\";\n    accept: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type UseImportReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = {},\n    TError extends HttpError = HttpError,\n> = {\n    inputProps: UseImportInputPropsType;\n    mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n    isLoading: boolean;\n    handleChange: HandleChangeType<TVariables, TData>;\n};\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/import-export/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    resource: resourceFromProps,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    meta,\n    metaData,\n    onProgress,\n    dataProviderName,\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\n    TData,\n    TVariables,\n    TError\n> => {\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\n    const [totalAmount, setTotalAmount] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { resource, identifier } = useResource(\n        resourceFromProps ?? resourceName,\n    );\n\n    const getMeta = useMeta();\n\n    const createMany = useCreateMany<TData, TError, TVariables>();\n    const create = useCreate<TData, TError, TVariables>();\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    let mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n\n    if (batchSize === 1) {\n        mutationResult = create;\n    } else {\n        mutationResult = createMany;\n    }\n\n    const handleCleanup = () => {\n        setTotalAmount(0);\n        setProcessedAmount(0);\n        setIsLoading(false);\n    };\n\n    const handleFinish = (\n        createdValues: CreatedValuesType<TVariables, TData>[],\n    ) => {\n        const result = {\n            succeeded: createdValues.filter(\n                (item) => item.type === \"success\",\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\n            errored: createdValues.filter(\n                (item) => item.type === \"error\",\n            ) as unknown as ImportErrorResult<TVariables>[],\n        };\n\n        onFinish?.(result);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onProgress?.({ totalAmount, processedAmount });\n    }, [totalAmount, processedAmount]);\n\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\n        handleCleanup();\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\n            (resolve) => {\n                setIsLoading(true);\n                parse(file as any, {\n                    complete: async ({ data }: { data: unknown[][] }) => {\n                        const values = importCSVMapper(data, mapData);\n\n                        setTotalAmount(values.length);\n\n                        if (batchSize === 1) {\n                            // Create Processor Functions\n                            const valueFns = values.map((value) => {\n                                const fn = async () => {\n                                    const response = await create.mutateAsync({\n                                        resource: identifier ?? \"\",\n                                        values: value,\n                                        successNotification: false,\n                                        errorNotification: false,\n                                        dataProviderName,\n                                        meta: combinedMeta,\n                                        metaData: combinedMeta,\n                                    });\n\n                                    return { response, value };\n                                };\n                                return fn;\n                            });\n                            // Sequentially run processor functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                valueFns,\n                                ({ response, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return currentAmount + 1;\n                                    });\n\n                                    return {\n                                        response: [response.data],\n                                        type: \"success\",\n                                        request: [value],\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: [values[index]],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // Resolve with created values\n                            resolve(createdValues);\n                        } else {\n                            // Create Chunks\n                            const chunks = chunk(values, batchSize);\n                            // Create Chunk Processor Functions\n                            const chunkedFns = chunks.map((chunkedValues) => {\n                                const fn = async () => {\n                                    const response =\n                                        await createMany.mutateAsync({\n                                            resource: identifier ?? \"\",\n                                            values: chunkedValues,\n                                            successNotification: false,\n                                            errorNotification: false,\n                                            dataProviderName,\n                                            meta: combinedMeta,\n                                            metaData: combinedMeta,\n                                        });\n\n                                    return {\n                                        response,\n                                        value: chunkedValues,\n                                        currentBatchLength:\n                                            chunkedValues.length,\n                                    };\n                                };\n\n                                return fn;\n                            });\n                            // Sequentially run chunked functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                chunkedFns,\n                                ({ response, currentBatchLength, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return (\n                                            currentAmount + currentBatchLength\n                                        );\n                                    });\n\n                                    return {\n                                        response: response.data,\n                                        type: \"success\",\n                                        request: value,\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: chunks[index],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // resolve with all created values\n                            resolve(createdValues);\n                        }\n                    },\n\n                    ...paparseOptions,\n                });\n            },\n        ).then((createdValues) => {\n            handleFinish(createdValues);\n            return createdValues;\n        });\n    };\n\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.files && event.target.files.length > 0) {\n                    handleChange({ file: event.target.files[0] });\n                }\n            },\n        },\n        mutationResult,\n        isLoading,\n        handleChange,\n    };\n};\n","import { useCallback, useState } from \"react\";\n\nexport type useModalReturnType = {\n    visible: boolean;\n    show: () => void;\n    close: () => void;\n};\n\nexport type useModalProps = {\n    /**\n     * Initial state of the modal\n     */\n    defaultVisible?: boolean;\n};\n\nexport const useModal = ({\n    defaultVisible = false,\n}: useModalProps = {}): useModalReturnType => {\n    const [visible, setVisible] = useState(defaultVisible);\n\n    const show = useCallback(() => setVisible(true), [visible]);\n    const close = useCallback(() => setVisible(false), [visible]);\n\n    return {\n        visible,\n        show,\n        close,\n    };\n};\n","import { Action, IResourceItem } from \"../../../interfaces\";\nimport { useGetToPath } from \"../use-get-to-path\";\n\ntype UseToPathParams = {\n    resource?: IResourceItem;\n    action: Action;\n    meta?: Record<string, unknown>;\n    legacy?: boolean;\n};\n\n/**\n * Returns the route for a given action and resource.\n * If resource is not provided, it will use the resource from the route.\n * If the resource is not found, it will return undefined.\n * If the action is not found, it will return undefined.\n * `meta` can be provided to compose the routes with parameters. (Can be used for nested routes.)\n */\nexport const useToPath = ({\n    resource,\n    action,\n    meta,\n    legacy,\n}: UseToPathParams): string | undefined => {\n    const getToPath = useGetToPath();\n\n    return getToPath({ resource, action, meta, legacy });\n};\n","import { RouterBindingsContext } from \"@contexts/router\";\nimport React, { useContext } from \"react\";\n\nexport const useLink = () => {\n    const bindings = useContext(RouterBindingsContext);\n\n    if (bindings?.Link) {\n        return bindings.Link;\n    }\n\n    const FallbackLink: Required<typeof bindings>[\"Link\"] = ({\n        to,\n        ...rest\n    }) => <a href={to} {...rest} />;\n\n    return FallbackLink;\n};\n","import { useContext } from \"react\";\nimport { RouterContext, defaultProvider } from \"@contexts/legacy-router\";\n\nexport const useRouterContext = () => {\n    const routerContextValues = useContext(RouterContext);\n\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\n        routerContextValues ?? defaultProvider;\n\n    return {\n        useHistory,\n        useLocation,\n        useParams,\n        Prompt,\n        Link,\n        routes,\n    };\n};\n","import React from \"react\";\n\nimport { IRouterContext } from \"../../interfaces\";\n\nexport const defaultProvider: IRouterContext = {\n    useHistory: () => false,\n    useLocation: () => false,\n    useParams: () => ({} as any),\n    Prompt: () => null,\n    Link: () => null,\n};\n\nexport const LegacyRouterContext =\n    React.createContext<IRouterContext>(defaultProvider);\n\nexport const RouterContext = LegacyRouterContext;\n\nexport const LegacyRouterContextProvider: React.FC<\n    Partial<IRouterContext> & {\n        children?: React.ReactNode;\n    }\n> = ({\n    children,\n    useHistory,\n    useLocation,\n    useParams,\n    Prompt,\n    Link,\n    routes,\n}) => {\n    return (\n        <RouterContext.Provider\n            value={{\n                useHistory: useHistory ?? defaultProvider.useHistory,\n                useLocation: useLocation ?? defaultProvider.useLocation,\n                useParams: useParams ?? defaultProvider.useParams,\n                Prompt: Prompt ?? defaultProvider.Prompt,\n                Link: Link ?? defaultProvider.Link,\n                routes: routes ?? defaultProvider.routes,\n            }}\n        >\n            {children}\n        </RouterContext.Provider>\n    );\n};\n","import {\n    useQuery,\n    UseQueryOptions,\n    UseQueryResult,\n} from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { sanitizeResource } from \"@definitions/helpers/sanitize-resource\";\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nexport type UseCanProps = CanParams & {\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<CanReturnType>;\n};\n\n/**\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/accessControl/useCan} for more details.\n *\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\n *\n */\nexport const useCan = ({\n    action,\n    resource,\n    params,\n    queryOptions,\n}: UseCanProps): UseQueryResult<CanReturnType> => {\n    const { can } = useContext(AccessControlContext);\n    const { keys, preferLegacyKeys } = useKeys();\n\n    /**\n     * Since `react-query` stringifies the query keys, it will throw an error for a circular dependency if we include `React.ReactNode` elements inside the keys.\n     * The feature in #2220(https://github.com/refinedev/refine/issues/2220) includes such change and to fix this, we need to remove `icon` property in the `resource`\n     */\n    const { resource: _resource, ...paramsRest } = params ?? {};\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const sanitizedResource = sanitizeResource(_resource);\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const queryResponse = useQuery<CanReturnType>({\n        queryKey: keys()\n            .access()\n            .resource(resource)\n            .action(action)\n            .params({\n                params: { ...paramsRest, resource: sanitizedResource },\n                enabled: queryOptions?.enabled,\n            })\n            .get(preferLegacyKeys),\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        queryFn: () =>\n            can?.({\n                action,\n                resource,\n                params: { ...paramsRest, resource: sanitizedResource },\n            }) ?? Promise.resolve({ can: true }),\n        enabled: typeof can !== \"undefined\",\n        ...queryOptions,\n        meta: {\n            ...queryOptions?.meta,\n            ...getXRay(\"useCan\", preferLegacyKeys),\n        },\n        retry: false,\n    });\n\n    return typeof can === \"undefined\"\n        ? ({ data: { can: true } } as typeof queryResponse)\n        : queryResponse;\n};\n","import React from \"react\";\n\nimport {\n    IAccessControlContext,\n    IAccessControlContextReturnType,\n} from \"./IAccessControlContext\";\n\n/** @deprecated default value for access control context has no use and is an empty object. */\nexport const defaultAccessControlContext: IAccessControlContext = {};\n\nexport const AccessControlContext =\n    React.createContext<IAccessControlContextReturnType>({\n        options: {\n            buttons: { enableAccessControl: true, hideIfUnauthorized: false },\n        },\n    });\n\nexport { IAccessControlContext };\n\nexport const AccessControlContextProvider: React.FC<\n    IAccessControlContext & {\n        children?: React.ReactNode;\n    }\n> = ({ can, children, options }) => {\n    return (\n        <AccessControlContext.Provider\n            value={{\n                can,\n                options: options\n                    ? {\n                          ...options,\n                          buttons: {\n                              enableAccessControl: true,\n                              hideIfUnauthorized: false,\n                              ...options.buttons,\n                          },\n                      }\n                    : {\n                          buttons: {\n                              enableAccessControl: true,\n                              hideIfUnauthorized: false,\n                          },\n                      },\n            }}\n        >\n            {children}\n        </AccessControlContext.Provider>\n    );\n};\n","import { IResourceItem } from \"../../../interfaces/bindings/resource\";\n\n/**\n * Remove all properties that are non-serializable from a resource object.\n */\nexport const sanitizeResource = (\n    resource?: Partial<IResourceItem> &\n        Required<Pick<IResourceItem, \"name\">> & { children?: unknown },\n):\n    | (Partial<IResourceItem> & Required<Pick<IResourceItem, \"name\">>)\n    | undefined => {\n    if (!resource) {\n        return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n        icon,\n        list,\n        edit,\n        create,\n        show,\n        clone,\n        children,\n        meta,\n        options,\n        ...restResource\n    } = resource;\n\n    const { icon: _metaIcon, ...restMeta } = meta ?? {};\n    const { icon: _optionsIcon, ...restOptions } = options ?? {};\n\n    return {\n        ...restResource,\n        ...(meta ? { meta: restMeta } : {}),\n        ...(options ? { options: restOptions } : {}),\n    };\n};\n","import React from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { sanitizeResource } from \"@definitions/helpers/sanitize-resource\";\nimport { IAccessControlContext } from \"../../interfaces\";\n\nexport const useCanWithoutCache = (): IAccessControlContext => {\n    const { can: canFromContext } = React.useContext(AccessControlContext);\n\n    const can = React.useMemo(() => {\n        if (!canFromContext) {\n            return undefined;\n        }\n\n        const canWithSanitizedResource: NonNullable<\n            typeof canFromContext\n        > = async ({ params, ...rest }) => {\n            const sanitizedResource = params?.resource\n                ? sanitizeResource(params.resource)\n                : undefined;\n\n            return canFromContext({\n                ...rest,\n                ...(params\n                    ? {\n                          params: {\n                              ...params,\n                              resource: sanitizedResource,\n                          },\n                      }\n                    : {}),\n            });\n        };\n\n        return canWithSanitizedResource;\n    }, [canFromContext]);\n\n    return { can };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport uniqBy from \"lodash-es/uniqBy\";\nimport debounce from \"lodash-es/debounce\";\nimport get from \"lodash-es/get\";\n\nimport { useList, useMany, useMeta } from \"@hooks\";\nimport {\n    CrudSorting,\n    BaseOption,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    CrudFilters,\n    SuccessErrorNotification,\n    HttpError,\n    LiveModeProps,\n    BaseKey,\n    Pagination,\n    MetaQuery,\n    Prettify,\n} from \"../../interfaces\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\nimport { useResource } from \"../resource/useResource/index\";\nimport { BaseListProps } from \"../data/useList\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\nexport type UseSelectProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Set the option's value\n     * @default `\"title\"`\n     */\n    optionLabel?: keyof TData extends string ? keyof TData : never;\n    /**\n     * Set the option's label value\n     * @default `\"id\"`\n     */\n    optionValue?: keyof TData extends string ? keyof TData : never;\n    /**\n     * Allow us to sort the options\n     * @deprecated Use `sorters` instead\n     */\n    sort?: CrudSorting;\n    /**\n     * Allow us to sort the options\n     */\n    sorters?: CrudSorting;\n    /**\n     * Resource name for API data interactions\n     */\n    filters?: CrudFilters;\n    /**\n     * Adds extra `options`\n     */\n    defaultValue?: BaseKey | BaseKey[];\n    /**\n     * The number of milliseconds to delay\n     * @default `300`\n     */\n    debounce?: number;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n    /**\n     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type {  current?: number; pageSize?: number;}\n     * @default `undefined`\n     */\n    pagination?: Prettify<\n        Omit<Pagination, \"mode\"> & {\n            /**\n             * Whether to use server side pagination or not.\n             * @default \"off\"\n             */\n            mode?: Pagination[\"mode\"];\n        }\n    >;\n    /**\n     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type boolean\n     * @default `false`\n     * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    defaultValueQueryOptions?: UseQueryOptions<\n        GetManyResponse<TQueryFnData>,\n        TError\n    >;\n    /**\n     * If defined, this callback allows us to override all filters for every search request.\n     * @default `undefined`\n     */\n    onSearch?: (value: string) => CrudFilters;\n    /**\n     * Additional meta data to pass to the `useMany` from the data provider\n     */\n    meta?: MetaQuery;\n    /**\n     * Additional meta data to pass to the `useMany` from the data provider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `default`\n     */\n    dataProviderName?: string;\n    /**\n     * Amount of records to fetch in select box list.\n     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead\n     * @default `undefined`\n     */\n    fetchSize?: number;\n} & SuccessErrorNotification<\n    GetListResponse<TData>,\n    TError,\n    Prettify<BaseListProps>\n> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\nexport type UseSelectReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TOption extends BaseOption = BaseOption,\n> = {\n    queryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n    onSearch: (value: string) => void;\n    options: TOption[];\n} & UseLoadingOvertimeReturnType;\n\n/**\n * `useSelect` hook is used to fetch data from the dataProvider and return the options for the select box.\n *\n * It uses `getList` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-reference/core/components/refine-config/ `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useSelect} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nexport const useSelect = <\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n    TOption extends BaseOption = BaseOption,\n>(\n    props: UseSelectProps<TQueryFnData, TError, TData>,\n): UseSelectReturnType<TData, TError, TOption> => {\n    const [search, setSearch] = useState<CrudFilters>([]);\n    const [options, setOptions] = useState<TOption[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<TOption[]>([]);\n\n    const {\n        resource: resourceFromProps,\n        sort,\n        sorters,\n        filters = [],\n        optionLabel = \"title\",\n        optionValue = \"id\",\n        debounce: debounceValue = 300,\n        successNotification,\n        errorNotification,\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\n        queryOptions,\n        fetchSize,\n        pagination,\n        hasPagination = false,\n        liveMode,\n        defaultValue = [],\n        onLiveEvent,\n        onSearch: onSearchFromProp,\n        liveParams,\n        meta,\n        metaData,\n        dataProviderName,\n        overtimeOptions,\n    } = props;\n\n    const { resource, identifier } = useResource(resourceFromProps);\n\n    const getMeta = useMeta();\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: pickNotDeprecated(meta, metaData),\n    });\n\n    const defaultValues = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n\n    const defaultValueQueryOnSuccess = useCallback(\n        (data: GetManyResponse<TData>) => {\n            setSelectedOptions(\n                data.data.map(\n                    (item) =>\n                        ({\n                            label: get(item, optionLabel),\n                            value: get(item, optionValue),\n                        } as TOption),\n                ),\n            );\n        },\n        [optionLabel, optionValue],\n    );\n\n    const defaultValueQueryOptions =\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\n\n    const defaultValueQueryResult = useMany<TQueryFnData, TError, TData>({\n        resource: identifier,\n        ids: defaultValues,\n        queryOptions: {\n            ...defaultValueQueryOptions,\n            enabled:\n                defaultValues.length > 0 &&\n                (defaultValueQueryOptions?.enabled ?? true),\n            onSuccess: (data) => {\n                defaultValueQueryOnSuccess(data);\n                defaultValueQueryOptions?.onSuccess?.(data);\n            },\n        },\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const defaultQueryOnSuccess = useCallback(\n        (data: GetListResponse<TData>) => {\n            {\n                setOptions(\n                    data.data.map(\n                        (item) =>\n                            ({\n                                label: get(item, optionLabel),\n                                value: get(item, optionValue),\n                            } as TOption),\n                    ),\n                );\n            }\n        },\n        [optionLabel, optionValue],\n    );\n\n    const queryResult = useList<TQueryFnData, TError, TData>({\n        resource: identifier,\n        sorters: pickNotDeprecated(sorters, sort),\n        filters: filters.concat(search),\n        pagination: {\n            current: pagination?.current,\n            pageSize: pagination?.pageSize ?? fetchSize,\n            mode: pagination?.mode,\n        },\n        hasPagination,\n        queryOptions: {\n            ...queryOptions,\n            onSuccess: (data) => {\n                defaultQueryOnSuccess(data);\n                queryOptions?.onSuccess?.(data);\n            },\n        },\n        successNotification,\n        errorNotification,\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const onSearch = (value: string) => {\n        if (onSearchFromProp) {\n            setSearch(onSearchFromProp(value));\n            return;\n        }\n\n        if (!value) {\n            setSearch([]);\n            return;\n        } else {\n            setSearch([\n                {\n                    field: optionLabel,\n                    operator: \"contains\",\n                    value,\n                },\n            ]);\n        }\n    };\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResult.isFetching || defaultValueQueryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    const combinedOptions = useMemo(\n        () => uniqBy([...options, ...selectedOptions], \"value\"),\n        [options, selectedOptions],\n    );\n\n    return {\n        queryResult,\n        defaultValueQueryResult,\n        options: combinedOptions,\n        onSearch: debounce(onSearch, debounceValue),\n        overtime: { elapsedTime },\n    };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport qs from \"qs\";\nimport differenceWith from \"lodash-es/differenceWith\";\nimport isEqual from \"lodash-es/isEqual\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    useRouterContext,\n    useSyncWithLocation,\n    useNavigation,\n    useList,\n    useLiveMode,\n    useRouterType,\n    useResource,\n    useParsed,\n    useMeta,\n} from \"@hooks\";\nimport {\n    stringifyTableParams,\n    parseTableParams,\n    unionFilters,\n    setInitialFilters,\n    setInitialSorters,\n    unionSorters,\n} from \"@definitions/table\";\nimport { pickNotDeprecated } from \"@definitions/helpers\";\n\nimport {\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    MetaQuery,\n    LiveModeProps,\n    Pagination,\n    Prettify,\n} from \"../../interfaces\";\nimport { useGo } from \"@hooks/router/use-go\";\nimport { BaseListProps } from \"../data/useList\";\nimport {\n    useLoadingOvertime,\n    UseLoadingOvertimeOptionsProps,\n    UseLoadingOvertimeReturnType,\n} from \"../useLoadingOvertime\";\n\ntype SetFilterBehavior = \"merge\" | \"replace\";\n\nexport type useTableProps<TQueryFnData, TError, TData> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Configuration for pagination\n     */\n    pagination?: Pagination;\n    /**\n     * Initial page index\n     * @default 1\n     * @deprecated `initialCurrent` property is deprecated. Use `pagination.current` instead.\n     */\n    initialCurrent?: number;\n    /**\n     * Initial number of items per page\n     * @default 10\n     * @deprecated `initialPageSize` property is deprecated. Use `pagination.pageSize` instead.\n     */\n    initialPageSize?: number;\n    /**\n     * Sort configs\n     */\n    sorters?: {\n        /**\n         * Initial sorter state\n         */\n        initial?: CrudSorting;\n        /**\n         * Default and unchangeable sorter state\n         *  @default `[]`\n         */\n        permanent?: CrudSorting;\n        /**\n         * Whether to use server side sorting or not.\n         * @default \"server\"\n         */\n        mode?: \"server\" | \"off\";\n    };\n    /**\n     * Initial sorter state\n     * @deprecated `initialSorter` property is deprecated. Use `sorters.initial` instead.\n     */\n    initialSorter?: CrudSorting;\n    /**\n     * Default and unchangeable sorter state\n     *  @default `[]`\n     *  @deprecated `permanentSorter` property is deprecated. Use `sorters.permanent` instead.\n     */\n    permanentSorter?: CrudSorting;\n    /**\n     * Filter configs\n     */\n    filters?: {\n        /**\n         * Initial filter state\n         */\n        initial?: CrudFilters;\n        /**\n         * Default and unchangeable filter state\n         *  @default `[]`\n         */\n        permanent?: CrudFilters;\n        /**\n         * Default behavior of the `setFilters` function\n         * @default `\"merge\"`\n         */\n        defaultBehavior?: SetFilterBehavior;\n        /**\n         * Whether to use server side filter or not.\n         * @default \"server\"\n         */\n        mode?: \"server\" | \"off\";\n    };\n    /**\n     * Initial filter state\n     * @deprecated `initialFilter` property is deprecated. Use `filters.initial` instead.\n     */\n    initialFilter?: CrudFilters;\n    /**\n     * Default and unchangeable filter state\n     * @default `[]`\n     * @deprecated `permanentFilter` property is deprecated. Use `filters.permanent` instead.\n     */\n    permanentFilter?: CrudFilters;\n    /**\n     * Default behavior of the `setFilters` function\n     * @default `\"merge\"`\n     * @deprecated `defaultSetFilterBehavior` property is deprecated. Use `filters.defaultBehavior` instead.\n     */\n    defaultSetFilterBehavior?: SetFilterBehavior;\n    /**\n     * Whether to use server side pagination or not.\n     * @default `true`\n     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.\n     */\n    hasPagination?: boolean;\n    /**\n     * Sortings, filters, page index and records shown per page are tracked by browser history\n     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`\n     */\n    syncWithLocation?: boolean;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<\n        GetListResponse<TQueryFnData>,\n        TError,\n        GetListResponse<TData>\n    >;\n    /**\n     * Metadata query for dataProvider\n     */\n    meta?: MetaQuery;\n    /**\n     * Metadata query for dataProvider\n     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n     */\n    metaData?: MetaQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification<\n    GetListResponse<TData>,\n    TError,\n    Prettify<BaseListProps>\n> &\n    LiveModeProps &\n    UseLoadingOvertimeOptionsProps;\n\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype SyncWithLocationParams = {\n    pagination: { current?: number; pageSize?: number };\n    /**\n     * @deprecated `sorter` is deprecated. Use `sorters` instead.\n     */\n    sorter?: CrudSorting;\n    sorters: CrudSorting;\n    filters: CrudFilters;\n};\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    /**\n     * @deprecated `sorter` is deprecated. Use `sorters` instead.\n     */\n    sorter: CrudSorting;\n    sorters: CrudSorting;\n    /**\n     * @deprecated `setSorter` is deprecated. Use `setSorters` instead.\n     */\n    setSorter: (sorter: CrudSorting) => void;\n    setSorters: (sorter: CrudSorting) => void;\n    filters: CrudFilters;\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\n    current: number;\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\n    pageSize: number;\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\n    pageCount: number;\n} & UseLoadingOvertimeReturnType;\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/useTable} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`\n *\n */\n\nconst defaultPermanentFilter: CrudFilters = [];\nconst defaultPermanentSorter: CrudSorting = [];\n\nexport function useTable<\n    TQueryFnData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TData extends BaseRecord = TQueryFnData,\n>({\n    initialCurrent,\n    initialPageSize,\n    hasPagination = true,\n    pagination,\n    initialSorter,\n    permanentSorter = defaultPermanentSorter,\n    defaultSetFilterBehavior,\n    initialFilter,\n    permanentFilter = defaultPermanentFilter,\n    filters: filtersFromProp,\n    sorters: sortersFromProp,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    meta,\n    metaData,\n    dataProviderName,\n    overtimeOptions,\n}: useTableProps<TQueryFnData, TError, TData> = {}): useTableReturnType<\n    TData,\n    TError\n> {\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\n\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\n\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const routerType = useRouterType();\n    const { useLocation } = useRouterContext();\n    const { search, pathname } = useLocation();\n    const getMeta = useMeta();\n    const parsedParams = useParsed();\n\n    const isServerSideFilteringEnabled =\n        (filtersFromProp?.mode || \"server\") === \"server\";\n    const isServerSideSortingEnabled =\n        (sortersFromProp?.mode || \"server\") === \"server\";\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled =\n        (pagination?.mode ?? hasPaginationString) !== \"off\";\n    const prefferedCurrent = pickNotDeprecated(\n        pagination?.current,\n        initialCurrent,\n    );\n    const prefferedPageSize = pickNotDeprecated(\n        pagination?.pageSize,\n        initialPageSize,\n    );\n    const preferredMeta = pickNotDeprecated(meta, metaData);\n\n    /** `parseTableParams` is redundant with the new routing */\n    // We want to always parse the query string even when syncWithLocation is\n    // deactivated, for hotlinking to work properly\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(search ?? \"?\");\n\n    const preferredInitialFilters = pickNotDeprecated(\n        filtersFromProp?.initial,\n        initialFilter,\n    );\n    const preferredPermanentFilters =\n        pickNotDeprecated(filtersFromProp?.permanent, permanentFilter) ??\n        defaultPermanentFilter;\n\n    const preferredInitialSorters = pickNotDeprecated(\n        sortersFromProp?.initial,\n        initialSorter,\n    );\n    const preferredPermanentSorters =\n        pickNotDeprecated(sortersFromProp?.permanent, permanentSorter) ??\n        defaultPermanentSorter;\n\n    const prefferedFilterBehavior =\n        pickNotDeprecated(\n            filtersFromProp?.defaultBehavior,\n            defaultSetFilterBehavior,\n        ) ?? \"merge\";\n\n    let defaultCurrent: number;\n    let defaultPageSize: number;\n    let defaultSorter: CrudSorting | undefined;\n    let defaultFilter: CrudFilters | undefined;\n\n    if (syncWithLocation) {\n        defaultCurrent =\n            parsedParams?.params?.current ||\n            parsedCurrent ||\n            prefferedCurrent ||\n            1;\n        defaultPageSize =\n            parsedParams?.params?.pageSize ||\n            parsedPageSize ||\n            prefferedPageSize ||\n            10;\n        defaultSorter =\n            parsedParams?.params?.sorters ||\n            (parsedSorter.length ? parsedSorter : preferredInitialSorters);\n        defaultFilter =\n            parsedParams?.params?.filters ||\n            (parsedFilters.length ? parsedFilters : preferredInitialFilters);\n    } else {\n        defaultCurrent = prefferedCurrent || 1;\n        defaultPageSize = prefferedPageSize || 10;\n        defaultSorter = preferredInitialSorters;\n        defaultFilter = preferredInitialFilters;\n    }\n\n    const { replace } = useNavigation();\n    /** New way of `replace` calls to the router is using `useGo` */\n    const go = useGo();\n\n    const { resource, identifier } = useResource(resourceFromProp);\n\n    const combinedMeta = getMeta({\n        resource,\n        meta: preferredMeta,\n    });\n\n    React.useEffect(() => {\n        warnOnce(\n            typeof identifier === \"undefined\",\n            `useTable: \\`resource\\` is not defined.`,\n        );\n    }, [identifier]);\n\n    const [sorters, setSorters] = useState<CrudSorting>(\n        setInitialSorters(preferredPermanentSorters, defaultSorter ?? []),\n    );\n    const [filters, setFilters] = useState<CrudFilters>(\n        setInitialFilters(preferredPermanentFilters, defaultFilter ?? []),\n    );\n    const [current, setCurrent] = useState<number>(defaultCurrent);\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n\n    const createLinkForSyncWithLocation = ({\n        pagination: { current, pageSize },\n        sorter,\n        filters,\n    }: SyncWithLocationParams) => {\n        if (routerType === \"new\") {\n            return (\n                go({\n                    type: \"path\",\n                    options: {\n                        keepHash: true,\n                        keepQuery: true,\n                    },\n                    query: {\n                        ...(isPaginationEnabled ? { current, pageSize } : {}),\n                        sorters: sorter,\n                        filters,\n                        ...currentQueryParams(),\n                    },\n                }) ?? \"\"\n            );\n        } else {\n            const currentQueryParams = qs.parse(search?.substring(1)); // remove first ? character\n\n            const stringifyParams = stringifyTableParams({\n                pagination: {\n                    pageSize,\n                    current,\n                },\n                sorters: sorters ?? sorter,\n                filters,\n                ...currentQueryParams,\n            });\n            return `${pathname ?? \"\"}?${stringifyParams ?? \"\"}`;\n        }\n    };\n\n    useEffect(() => {\n        if (search === \"\") {\n            setCurrent(defaultCurrent);\n            setPageSize(defaultPageSize);\n            setSorters(\n                setInitialSorters(\n                    preferredPermanentSorters,\n                    defaultSorter ?? [],\n                ),\n            );\n            setFilters(\n                setInitialFilters(\n                    preferredPermanentFilters,\n                    defaultFilter ?? [],\n                ),\n            );\n        }\n    }, [search]);\n\n    const currentQueryParams = (): object => {\n        if (routerType === \"new\") {\n            // We get QueryString parameters that are uncontrolled by refine.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { sorters, filters, pageSize, current, ...rest } =\n                parsedParams?.params ?? {};\n\n            return rest;\n        } else {\n            // We get QueryString parameters that are uncontrolled by refine.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { sorter, filters, pageSize, current, ...rest } = qs.parse(\n                search,\n                {\n                    ignoreQueryPrefix: true,\n                },\n            );\n\n            return rest;\n        }\n    };\n\n    useEffect(() => {\n        if (syncWithLocation) {\n            // Careful! This triggers render\n            const queryParams = currentQueryParams();\n\n            if (routerType === \"new\") {\n                go({\n                    type: \"replace\",\n                    options: {\n                        keepQuery: true,\n                    },\n                    query: {\n                        ...(isPaginationEnabled ? { pageSize, current } : {}),\n                        sorters: differenceWith(\n                            sorters,\n                            preferredPermanentSorters,\n                            isEqual,\n                        ),\n                        filters: differenceWith(\n                            filters,\n                            preferredPermanentFilters,\n                            isEqual,\n                        ),\n                        // ...queryParams,\n                    },\n                });\n            } else {\n                const stringifyParams = stringifyTableParams({\n                    ...(isPaginationEnabled\n                        ? {\n                              pagination: {\n                                  pageSize,\n                                  current,\n                              },\n                          }\n                        : {}),\n                    sorters: differenceWith(\n                        sorters,\n                        preferredPermanentSorters,\n                        isEqual,\n                    ),\n                    filters: differenceWith(\n                        filters,\n                        preferredPermanentFilters,\n                        isEqual,\n                    ),\n                    ...queryParams,\n                });\n                return replace?.(`${pathname}?${stringifyParams}`, undefined, {\n                    shallow: true,\n                });\n            }\n        }\n    }, [syncWithLocation, current, pageSize, sorters, filters]);\n\n    const queryResult = useList<TQueryFnData, TError, TData>({\n        resource: identifier,\n        hasPagination,\n        pagination: { current, pageSize, mode: pagination?.mode },\n        filters: isServerSideFilteringEnabled\n            ? unionFilters(preferredPermanentFilters, filters)\n            : undefined,\n        sorters: isServerSideSortingEnabled\n            ? unionSorters(preferredPermanentSorters, sorters)\n            : undefined,\n        queryOptions,\n        successNotification,\n        errorNotification,\n        meta: combinedMeta,\n        metaData: combinedMeta,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\n        setFilters((prevFilters) =>\n            unionFilters(preferredPermanentFilters, newFilters, prevFilters),\n        );\n    };\n\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\n        setFilters(unionFilters(preferredPermanentFilters, newFilters));\n    };\n\n    const setFiltersWithSetter = (\n        setter: (prevFilters: CrudFilters) => CrudFilters,\n    ) => {\n        setFilters((prev) =>\n            unionFilters(preferredPermanentFilters, setter(prev)),\n        );\n    };\n\n    const setFiltersFn: useTableReturnType<TQueryFnData>[\"setFilters\"] = (\n        setterOrFilters,\n        behavior: SetFilterBehavior = prefferedFilterBehavior,\n    ) => {\n        if (typeof setterOrFilters === \"function\") {\n            setFiltersWithSetter(setterOrFilters);\n        } else {\n            if (behavior === \"replace\") {\n                setFiltersAsReplace(setterOrFilters);\n            } else {\n                setFiltersAsMerge(setterOrFilters);\n            }\n        }\n    };\n\n    const setSortWithUnion = (newSorter: CrudSorting) => {\n        setSorters(() => unionSorters(preferredPermanentSorters, newSorter));\n    };\n\n    const { elapsedTime } = useLoadingOvertime({\n        isLoading: queryResult.isFetching,\n        interval: overtimeOptions?.interval,\n        onInterval: overtimeOptions?.onInterval,\n    });\n\n    return {\n        tableQueryResult: queryResult,\n        sorters,\n        setSorters: setSortWithUnion,\n        sorter: sorters,\n        setSorter: setSortWithUnion,\n        filters,\n        setFilters: setFiltersFn,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount: pageSize\n            ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\n            : 1,\n        createLinkForSyncWithLocation,\n        overtime: {\n            elapsedTime,\n        },\n    };\n}\n","import { useContext } from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { useGetIdentity } from \"@hooks/auth\";\nimport { BaseKey, LogParams } from \"../../../interfaces\";\nimport { hasPermission, pickNotDeprecated } from \"@definitions/helpers\";\nimport { pickResource } from \"@definitions/helpers/pick-resource\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\ntype LogRenameData =\n    | {\n          resource?: string;\n      }\n    | undefined;\n\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\n    log: UseMutationResult<TLogData, Error, LogParams>;\n    rename: UseMutationResult<\n        TLogRenameData,\n        Error,\n        {\n            id: BaseKey;\n            name: string;\n        }\n    >;\n};\n\nexport type UseLogMutationProps<\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n> = {\n    logMutationOptions?: Omit<\n        UseMutationOptions<TLogData, Error, LogParams, unknown>,\n        \"mutationFn\"\n    >;\n    renameMutationOptions?: Omit<\n        UseMutationOptions<\n            TLogRenameData,\n            Error,\n            { id: BaseKey; name: string },\n            unknown\n        >,\n        \"mutationFn\" | \"onSuccess\"\n    >;\n};\n\n/**\n * useLog is used to `create` a new and `rename` the existing audit log.\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/audit-log/useLog} for more details.\n */\n\nexport const useLog = <\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n>({\n    logMutationOptions,\n    renameMutationOptions,\n}: UseLogMutationProps<TLogData, TLogRenameData> = {}): UseLogReturnType<\n    TLogData,\n    TLogRenameData\n> => {\n    const queryClient = useQueryClient();\n    const auditLogContext = useContext(AuditLogContext);\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const authProvider = useActiveAuthProvider();\n\n    const { resources } = useContext(ResourceContext);\n    const {\n        data: identityData,\n        refetch,\n        isLoading,\n    } = useGetIdentity({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n        queryOptions: {\n            enabled: !!auditLogContext?.create,\n        },\n    });\n\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\n        async (params) => {\n            const resource = pickResource(params.resource, resources);\n            const logPermissions = pickNotDeprecated(\n                resource?.meta?.audit,\n                resource?.options?.audit,\n                resource?.options?.auditLog?.permissions,\n            );\n\n            if (logPermissions) {\n                if (!hasPermission(logPermissions, params.action)) {\n                    return;\n                }\n            }\n\n            let authorData;\n            if (isLoading && !!auditLogContext?.create) {\n                authorData = await refetch();\n            }\n\n            return await auditLogContext.create?.({\n                ...params,\n                author: identityData ?? authorData?.data,\n            });\n        },\n        {\n            mutationKey: keys().audit().action(\"log\").get(),\n            ...logMutationOptions,\n            meta: {\n                ...logMutationOptions?.meta,\n                ...getXRay(\"useLog\", preferLegacyKeys),\n            },\n        },\n    );\n\n    const rename = useMutation<\n        TLogRenameData,\n        Error,\n        { id: BaseKey; name: string },\n        unknown\n    >(\n        async (params) => {\n            return await auditLogContext.update?.(params);\n        },\n        {\n            onSuccess: (data) => {\n                if (data?.resource) {\n                    queryClient.invalidateQueries(\n                        keys()\n                            .audit()\n                            .resource(data?.resource ?? \"\")\n                            .action(\"list\")\n                            .get(preferLegacyKeys),\n                    );\n                }\n            },\n            mutationKey: keys().audit().action(\"rename\").get(),\n            ...renameMutationOptions,\n            meta: {\n                ...renameMutationOptions?.meta,\n                ...getXRay(\"useLog\", preferLegacyKeys),\n            },\n        },\n    );\n\n    return { log, rename };\n};\n","import React from \"react\";\n\nimport { IAuditLogContext } from \"./IAuditLogContext\";\n\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\n\nexport const AuditLogContextProvider: React.FC<\n    IAuditLogContext & {\n        children: React.ReactNode;\n    }\n> = ({ create, get, update, children }) => {\n    return (\n        <AuditLogContext.Provider value={{ create, get, update }}>\n            {children}\n        </AuditLogContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { HttpError, MetaQuery } from \"../../../interfaces\";\nimport { useKeys } from \"@hooks/useKeys\";\nimport { getXRay } from \"@refinedev/devtools-internal\";\n\nexport type UseLogProps<TQueryFnData, TError, TData> = {\n    resource: string;\n    action?: string;\n    meta?: Record<number | string, any>;\n    author?: Record<number | string, any>;\n    queryOptions?: UseQueryOptions<TQueryFnData, TError, TData>;\n    metaData?: MetaQuery;\n};\n\n/**\n * useLogList is used to get and filter audit logs.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/audit-log/useLogList} for more details.\n *\n * @typeParam TQueryFnData - Result data returned by the query function.\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TData - Result data returned by the `select` function. Defaults to `TQueryFnData`\n *\n */\nexport const useLogList = <\n    TQueryFnData = any,\n    TError extends HttpError = HttpError,\n    TData = TQueryFnData,\n>({\n    resource,\n    action,\n    meta,\n    author,\n    metaData,\n    queryOptions,\n}: UseLogProps<TQueryFnData, TError, TData>): UseQueryResult<TData> => {\n    const { get } = useContext(AuditLogContext);\n    const { keys, preferLegacyKeys } = useKeys();\n\n    const queryResponse = useQuery<TQueryFnData, TError, TData>({\n        queryKey: keys()\n            .audit()\n            .resource(resource)\n            .action(\"list\")\n            .params(meta)\n            .get(preferLegacyKeys),\n        queryFn: () =>\n            get?.({\n                resource,\n                action,\n                author,\n                meta,\n                metaData,\n            }) ?? Promise.resolve([]),\n        enabled: typeof get !== \"undefined\",\n        ...queryOptions,\n        retry: false,\n        meta: {\n            ...queryOptions?.meta,\n            ...getXRay(\"useLogList\", preferLegacyKeys),\n        },\n    });\n\n    return queryResponse;\n};\n","import React, { useContext } from \"react\";\nimport warnOnce from \"warn-once\";\n\nimport { useRefineContext, useResource, useTranslate } from \"@hooks\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { pickNotDeprecated } from \"@definitions\";\n\nimport { IResourceItem } from \"../../interfaces\";\nimport { useRouterType } from \"@contexts/router-picker\";\nimport { getActionRoutesFromResource } from \"@definitions/helpers/router\";\nimport { pickResource } from \"../../definitions/helpers/pick-resource/index\";\nimport { composeRoute } from \"@definitions/helpers/router/compose-route\";\nimport { useParsed } from \"@hooks/router/use-parsed\";\n\nexport type BreadcrumbsType = {\n    label: string;\n    href?: string;\n    icon?: React.ReactNode;\n};\n\ntype UseBreadcrumbReturnType = {\n    breadcrumbs: BreadcrumbsType[];\n};\n\ntype UseBreadcrumbProps = {\n    /**\n     * Additional params to be used in the route generation process.\n     */\n    meta?: Record<string, string | number>;\n};\n\nexport const useBreadcrumb = ({\n    meta: metaFromProps = {},\n}: UseBreadcrumbProps = {}): UseBreadcrumbReturnType => {\n    const routerType = useRouterType();\n    const { i18nProvider } = useContext(TranslationContext);\n    const parsed = useParsed();\n    const translate = useTranslate();\n    const { resources, resource, action } = useResource();\n    const {\n        options: { textTransformers },\n    } = useRefineContext();\n\n    const breadcrumbs: BreadcrumbsType[] = [];\n\n    if (!resource?.name) {\n        return { breadcrumbs };\n    }\n\n    const addBreadcrumb = (parentName: string | IResourceItem) => {\n        const parentResource =\n            typeof parentName === \"string\"\n                ? pickResource(\n                      parentName,\n                      resources,\n                      routerType === \"legacy\",\n                  ) ?? { name: parentName }\n                : parentName;\n\n        if (parentResource) {\n            const grandParentName = pickNotDeprecated(\n                parentResource?.meta?.parent,\n                parentResource?.parentName,\n            );\n            if (grandParentName) {\n                addBreadcrumb(grandParentName);\n            }\n            const listActionOfResource = getActionRoutesFromResource(\n                parentResource,\n                resources,\n                routerType === \"legacy\",\n            ).find((r) => r.action === \"list\");\n\n            const hrefRaw = listActionOfResource?.resource?.list\n                ? listActionOfResource?.route\n                : undefined;\n\n            const href = hrefRaw\n                ? routerType === \"legacy\"\n                    ? hrefRaw\n                    : composeRoute(\n                          hrefRaw,\n                          parentResource?.meta,\n                          parsed,\n                          metaFromProps,\n                      )\n                : undefined;\n\n            breadcrumbs.push({\n                label:\n                    pickNotDeprecated(\n                        parentResource.meta?.label,\n                        parentResource.options?.label,\n                    ) ??\n                    translate(\n                        `${parentResource.name}.${parentResource.name}`,\n                        textTransformers.humanize(parentResource.name),\n                    ),\n                href: href,\n                icon: pickNotDeprecated(\n                    parentResource.meta?.icon,\n                    parentResource.options?.icon,\n                    parentResource.icon,\n                ),\n            });\n        }\n    };\n\n    addBreadcrumb(resource);\n\n    if (action && action !== \"list\") {\n        const key = `actions.${action}`;\n        const actionLabel = translate(key);\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\n            warnOnce(\n                true,\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`,\n            );\n            breadcrumbs.push({\n                label: translate(\n                    `buttons.${action}`,\n                    textTransformers.humanize(action),\n                ),\n            });\n        } else {\n            breadcrumbs.push({\n                label: translate(key, textTransformers.humanize(action)),\n            });\n        }\n    }\n\n    return {\n        breadcrumbs,\n    };\n};\n","import React from \"react\";\nimport { useTranslate, useResource, useParsed, useRouterContext } from \"..\";\nimport { useUserFriendlyName, pickNotDeprecated } from \"@definitions\";\nimport { useRouterType } from \"../../contexts/router-picker\";\nimport { createResourceKey } from \"../../definitions/helpers/menu/create-resource-key\";\nimport { useGetToPath } from \"../router/use-get-to-path/index\";\nimport { getParentResource } from \"@definitions/helpers/router\";\nimport {\n    FlatTreeItem,\n    createTree,\n} from \"../../definitions/helpers/menu/create-tree\";\n\ntype UseMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: TreeMenuItem[];\n};\n\nexport type UseMenuProps = {\n    meta?: Record<string, any>;\n    hideOnMissingParameter?: boolean;\n};\n\nexport type TreeMenuItem = FlatTreeItem & {\n    route?: string;\n    icon?: React.ReactNode;\n    label?: string;\n    children: TreeMenuItem[];\n};\n\nconst getCleanPath = (pathname: string) => {\n    return pathname\n        .split(\"?\")[0]\n        .split(\"#\")[0]\n        .replace(/(.+)(\\/$)/, \"$1\");\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/hooks/ui/useMenu} for more details.\n */\nexport const useMenu = (\n    { meta, hideOnMissingParameter }: UseMenuProps = {\n        hideOnMissingParameter: true,\n    },\n): UseMenuReturnType => {\n    const translate = useTranslate();\n\n    const getToPath = useGetToPath();\n    const routerType = useRouterType();\n    const { resource, resources } = useResource();\n    const { pathname } = useParsed();\n    const { useLocation } = useRouterContext();\n    const { pathname: legacyPath } = useLocation();\n    const getFriendlyName = useUserFriendlyName();\n\n    const cleanPathname =\n        routerType === \"legacy\"\n            ? getCleanPath(legacyPath)\n            : pathname\n            ? getCleanPath(pathname)\n            : undefined;\n\n    const cleanRoute = `/${(cleanPathname ?? \"\").replace(/^\\//, \"\")}`;\n\n    const selectedKey = resource\n        ? createResourceKey(resource, resources, routerType === \"legacy\")\n        : cleanRoute ?? \"\";\n\n    const defaultOpenKeys = React.useMemo(() => {\n        if (!resource) return [];\n        let parent = getParentResource(resource, resources);\n        const keys = [createResourceKey(resource, resources)];\n        while (parent) {\n            keys.push(createResourceKey(parent, resources));\n            parent = getParentResource(parent, resources);\n        }\n        return keys;\n    }, []);\n\n    const prepareItem = React.useCallback(\n        (item: FlatTreeItem): TreeMenuItem | undefined => {\n            if (item?.meta?.hide ?? item?.options?.hide) return undefined;\n            if (!item?.list && item.children.length === 0) return undefined;\n\n            const composed = item.list\n                ? getToPath({\n                      resource: item,\n                      action: \"list\",\n                      legacy: routerType === \"legacy\",\n                      meta,\n                  })\n                : undefined;\n\n            if (\n                hideOnMissingParameter &&\n                composed &&\n                composed.match(/(\\/|^):(.+?)(\\/|$){1}/)\n            )\n                return undefined;\n\n            return {\n                ...item,\n                route: composed,\n                icon: pickNotDeprecated(\n                    item.meta?.icon,\n                    item.options?.icon,\n                    item.icon,\n                ),\n                label:\n                    pickNotDeprecated(\n                        item?.meta?.label,\n                        item?.options?.label,\n                    ) ??\n                    translate(\n                        `${item.name}.${item.name}`,\n                        getFriendlyName(item.name, \"plural\"),\n                    ),\n            };\n        },\n        [routerType, meta, getToPath, translate, hideOnMissingParameter],\n    );\n\n    const treeItems = React.useMemo(() => {\n        const treeMenuItems = createTree(resources, routerType === \"legacy\");\n\n        // add paths to items and their nodes recursively\n        const prepare = (items: TreeMenuItem[]): TreeMenuItem[] => {\n            return items.flatMap((item) => {\n                const preparedNodes = prepare(item.children);\n                const newItem = prepareItem({\n                    ...item,\n                    children: preparedNodes,\n                });\n\n                if (!newItem) return [];\n\n                return [newItem];\n            });\n        };\n\n        return prepare(treeMenuItems);\n    }, [resources, routerType, prepareItem]);\n\n    return {\n        defaultOpenKeys,\n        selectedKey,\n        menuItems: treeItems,\n    };\n};\n","import { IResourceItem } from \"../../../interfaces\";\nimport {\n    getParentResource,\n    removeLeadingTrailingSlashes,\n} from \"../../helpers/router\";\n\nexport const createResourceKey = (\n    resource: IResourceItem,\n    resources: IResourceItem[],\n    legacy = false,\n) => {\n    const parents: IResourceItem[] = [];\n\n    let currentParentResource = getParentResource(resource, resources);\n    while (currentParentResource) {\n        parents.push(currentParentResource);\n        currentParentResource = getParentResource(\n            currentParentResource,\n            resources,\n        );\n    }\n    parents.reverse();\n\n    const key = [...parents, resource]\n        .map((r) =>\n            removeLeadingTrailingSlashes(\n                (legacy ? r.route : undefined) ?? r.identifier ?? r.name,\n            ),\n        )\n        .join(\"/\");\n\n    return `/${key.replace(/^\\//, \"\")}`;\n};\n","import { IResourceItem } from \"../../../contexts/resource\";\nimport { getParentResource } from \"../router\";\nimport { createResourceKey } from \"./create-resource-key\";\n\nexport type Tree = {\n    item: IResourceItem;\n    children: { [key: string]: Tree };\n};\n\nexport type FlatTreeItem = IResourceItem & {\n    key: string;\n    children: FlatTreeItem[];\n};\n\nexport const createTree = (\n    resources: IResourceItem[],\n    legacy = false,\n): FlatTreeItem[] => {\n    const root: Tree = {\n        item: {\n            name: \"__root__\",\n        },\n        children: {},\n    };\n\n    resources.forEach((resource) => {\n        const parents: IResourceItem[] = [];\n\n        let currentParent = getParentResource(resource, resources);\n        while (currentParent) {\n            parents.push(currentParent);\n            currentParent = getParentResource(currentParent, resources);\n        }\n        parents.reverse();\n\n        let currentTree = root;\n\n        parents.forEach((parent) => {\n            const key =\n                (legacy ? parent.route : undefined) ??\n                parent.identifier ??\n                parent.name;\n\n            if (!currentTree.children[key]) {\n                currentTree.children[key] = {\n                    item: parent,\n                    children: {},\n                };\n            }\n            currentTree = currentTree.children[key];\n        });\n\n        const key =\n            (legacy ? resource.route : undefined) ??\n            resource.identifier ??\n            resource.name;\n\n        if (!currentTree.children[key]) {\n            currentTree.children[key] = {\n                item: resource,\n                children: {},\n            };\n        }\n    });\n\n    const flatten = (tree: Tree): FlatTreeItem[] => {\n        const items: FlatTreeItem[] = [];\n\n        Object.keys(tree.children).forEach((key) => {\n            const itemKey = createResourceKey(\n                tree.children[key].item,\n                resources,\n                legacy,\n            );\n            const item: FlatTreeItem = {\n                ...tree.children[key].item,\n                key: itemKey,\n                children: flatten(tree.children[key]),\n            };\n            items.push(item);\n        });\n\n        return items;\n    };\n\n    return flatten(root);\n};\n","import { useParsed } from \"@hooks/router\";\nimport { sanitizeResource } from \"@definitions/helpers/sanitize-resource\";\nimport { IResourceItem, MetaQuery } from \"../../interfaces\";\n\n/**\n * Hook that returns a function to get meta.\n * The meta is a combination of the resource meta, hook meta and query params.\n * @internal\n */\nexport const useMeta = () => {\n    const { params } = useParsed();\n\n    const getMetaFn = ({\n        resource,\n        meta: metaFromProp,\n    }: {\n        resource?: IResourceItem;\n        meta?: MetaQuery;\n    } = {}) => {\n        const { meta } = sanitizeResource(resource) ?? { meta: {} };\n\n        // this fields came from the query params and should be removed from the meta because they are not part of the meta.\n        const {\n            filters: _filters,\n            sorters: _sorters,\n            current: _current,\n            pageSize: _pageSize,\n            ...additionalParams\n        } = params ?? {};\n\n        return { ...meta, ...additionalParams, ...metaFromProp };\n    };\n\n    return getMetaFn;\n};\n","import React, { useState } from \"react\";\n\nimport { useLogin, useTranslate } from \"@hooks\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/core/components/auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config/#loginpage} for more details.\n */\nexport const LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: login } = useLogin<ILoginForm>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    return (\n        <>\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ username, password });\n                }}\n            >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.username\",\n                                    undefined,\n                                    \"username\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    size={20}\n                                    autoCorrect=\"off\"\n                                    spellCheck={false}\n                                    autoCapitalize=\"off\"\n                                    autoFocus\n                                    required\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.password\",\n                                    undefined,\n                                    \"password\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"password\"\n                                    required\n                                    size={20}\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type=\"submit\" value=\"login\" />\n            </form>\n        </>\n    );\n};\n","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    FormHTMLAttributes,\n} from \"react\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nimport { AuthPageProps } from \"../../../interfaces\";\n\nexport type DivPropsType = DetailedHTMLProps<\n    HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n>;\nexport type FormPropsType = DetailedHTMLProps<\n    FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n>;\n\nexport type AuthProps = AuthPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\n/**\n * **refine** has a default auth page form which is served on `/login` route when the `authProvider` configuration is provided.\n * @param title is not implemented yet.\n * @see {@link https://refine.dev/docs/api-reference/core/components/auth-page/} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React, { useState } from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"../../../../../interfaces\";\n\nimport { useRouterContext, useLink, useRouterType, useLogin } from \"@hooks\";\nimport { useTranslate } from \"@hooks/translate\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\n\ntype LoginProps = LoginPageProps<DivPropsType, DivPropsType, FormPropsType>;\n\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n    title = undefined,\n    hideForm,\n}) => {\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [remember, setRemember] = useState(false);\n\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: login } = useLogin<LoginFormTypes>({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const renderLink = (link: string, text?: string) => {\n        return <ActiveLink to={link}>{text}</ActiveLink>;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            login({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.login.title\", \"Sign in to your account\")}\n            </h1>\n            {renderProviders()}\n            {!hideForm && (\n                <>\n                    <hr />\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            login({ email, password, remember });\n                        }}\n                        {...formProps}\n                    >\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                padding: 25,\n                            }}\n                        >\n                            <label htmlFor=\"email-input\">\n                                {translate(\"pages.login.fields.email\", \"Email\")}\n                            </label>\n                            <input\n                                id=\"email-input\"\n                                name=\"email\"\n                                type=\"text\"\n                                size={20}\n                                autoCorrect=\"off\"\n                                spellCheck={false}\n                                autoCapitalize=\"off\"\n                                required\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                            <label htmlFor=\"password-input\">\n                                {translate(\n                                    \"pages.login.fields.password\",\n                                    \"Password\",\n                                )}\n                            </label>\n                            <input\n                                id=\"password-input\"\n                                type=\"password\"\n                                name=\"password\"\n                                required\n                                size={20}\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                            {rememberMe ?? (\n                                <>\n                                    <label htmlFor=\"remember-me-input\">\n                                        {translate(\n                                            \"pages.login.buttons.rememberMe\",\n                                            \"Remember me\",\n                                        )}\n                                        <input\n                                            id=\"remember-me-input\"\n                                            name=\"remember\"\n                                            type=\"checkbox\"\n                                            size={20}\n                                            checked={remember}\n                                            value={remember.toString()}\n                                            onChange={() => {\n                                                setRemember(!remember);\n                                            }}\n                                        />\n                                    </label>\n                                </>\n                            )}\n                            <br />\n                            {forgotPasswordLink ??\n                                renderLink(\n                                    \"/forgot-password\",\n                                    translate(\n                                        \"pages.login.buttons.forgotPassword\",\n                                        \"Forgot password?\",\n                                    ),\n                                )}\n                            <input\n                                type=\"submit\"\n                                value={translate(\n                                    \"pages.login.signin\",\n                                    \"Sign in\",\n                                )}\n                            />\n                            {registerLink ?? (\n                                <span>\n                                    {translate(\n                                        \"pages.login.buttons.noAccount\",\n                                        \"Don’t have an account?\",\n                                    )}{\" \"}\n                                    {renderLink(\n                                        \"/register\",\n                                        translate(\n                                            \"pages.login.register\",\n                                            \"Sign up\",\n                                        ),\n                                    )}\n                                </span>\n                            )}\n                        </div>\n                    </form>\n                </>\n            )}\n            {registerLink !== false && hideForm && (\n                <div style={{ textAlign: \"center\" }}>\n                    {translate(\n                        \"pages.login.buttons.noAccount\",\n                        \"Don’t have an account?\",\n                    )}{\" \"}\n                    {renderLink(\n                        \"/register\",\n                        translate(\"pages.login.register\", \"Sign up\"),\n                    )}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { RegisterPageProps } from \"../../../../../interfaces\";\n\nimport {\n    useTranslate,\n    useRouterContext,\n    useLink,\n    useRouterType,\n    useRegister,\n} from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\n\ntype RegisterProps = RegisterPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title = undefined,\n    hideForm,\n}) => {\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: register, isLoading } = useRegister({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n    });\n\n    const renderLink = (link: string, text?: string) => {\n        return <ActiveLink to={link}>{text}</ActiveLink>;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            register({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.register.title\", \"Sign up for your account\")}\n            </h1>\n            {renderProviders()}\n            {!hideForm && (\n                <>\n                    <hr />\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            register({ email, password });\n                        }}\n                        {...formProps}\n                    >\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                padding: 25,\n                            }}\n                        >\n                            <label htmlFor=\"email-input\">\n                                {translate(\n                                    \"pages.register.fields.email\",\n                                    \"Email\",\n                                )}\n                            </label>\n                            <input\n                                id=\"email-input\"\n                                name=\"email\"\n                                type=\"email\"\n                                size={20}\n                                autoCorrect=\"off\"\n                                spellCheck={false}\n                                autoCapitalize=\"off\"\n                                required\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                            <label htmlFor=\"password-input\">\n                                {translate(\n                                    \"pages.register.fields.password\",\n                                    \"Password\",\n                                )}\n                            </label>\n                            <input\n                                id=\"password-input\"\n                                name=\"password\"\n                                type=\"password\"\n                                required\n                                size={20}\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                            <input\n                                type=\"submit\"\n                                value={translate(\n                                    \"pages.register.buttons.submit\",\n                                    \"Sign up\",\n                                )}\n                                disabled={isLoading}\n                            />\n                            {loginLink ?? (\n                                <>\n                                    <span>\n                                        {translate(\n                                            \"pages.login.buttons.haveAccount\",\n                                            \"Have an account?\",\n                                        )}{\" \"}\n                                        {renderLink(\n                                            \"/login\",\n                                            translate(\n                                                \"pages.login.signin\",\n                                                \"Sign in\",\n                                            ),\n                                        )}\n                                    </span>\n                                </>\n                            )}\n                        </div>\n                    </form>\n                </>\n            )}\n            {loginLink !== false && hideForm && (\n                <div style={{ textAlign: \"center\" }}>\n                    {translate(\n                        \"pages.login.buttons.haveAccount\",\n                        \"Have an account?\",\n                    )}{\" \"}\n                    {renderLink(\n                        \"/login\",\n                        translate(\"pages.login.signin\", \"Sign in\"),\n                    )}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport {\n    useTranslate,\n    useRouterContext,\n    useLink,\n    useRouterType,\n    useForgotPassword,\n} from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport {\n    ForgotPasswordFormTypes,\n    ForgotPasswordPageProps,\n} from \"../../../../../interfaces\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title = undefined,\n}) => {\n    const translate = useTranslate();\n    const routerType = useRouterType();\n    const Link = useLink();\n    const { Link: LegacyLink } = useRouterContext();\n\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link;\n\n    const [email, setEmail] = useState(\"\");\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const renderLink = (link: string, text?: string) => {\n        return <ActiveLink to={link}>{text}</ActiveLink>;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\n                    \"pages.forgotPassword.title\",\n                    \"Forgot your password?\",\n                )}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    forgotPassword({ email });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label htmlFor=\"email-input\">\n                        {translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    </label>\n                    <input\n                        id=\"email-input\"\n                        name=\"email\"\n                        type=\"mail\"\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    />\n                    <br />\n                    {loginLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/login\",\n                                translate(\"pages.login.signin\", \"Sign in\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"../../../../../interfaces\";\n\nimport { useTranslate, useUpdatePassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport { useActiveAuthProvider } from \"@definitions/helpers\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n    title = undefined,\n}) => {\n    const translate = useTranslate();\n\n    const authProvider = useActiveAuthProvider();\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>({\n            v3LegacyAuthProviderCompatible: Boolean(authProvider?.isLegacy),\n        });\n\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.updatePassword.title\", \"Update Password\")}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    updatePassword({\n                        password: newPassword,\n                        confirmPassword,\n                    });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label htmlFor=\"password-input\">\n                        {translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                    </label>\n                    <input\n                        id=\"password-input\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                    />\n                    <label htmlFor=\"confirm-password-input\">\n                        {translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                    </label>\n                    <input\n                        id=\"confirm-password-input\"\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content, title) : content}\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @deprecated `ReadyPage` is deprecated and will be removed in the next major release.\n */\nexport const ReadyPage: React.FC = () => {\n    return (\n        <>\n            <h1>Welcome on board</h1>\n            <p>Your configuration is completed.</p>\n            <p>\n                Now you can get started by adding your resources to the{\" \"}\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\n            </p>\n            <div style={{ display: \"flex\", gap: 8 }}>\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\n                    <button>Documentation</button>\n                </a>\n                <a\n                    href=\"https://refine.dev/examples\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Examples</button>\n                </a>\n                <a\n                    href=\"https://discord.gg/refine\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Community</button>\n                </a>\n            </div>\n        </>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport { useMediaQuery } from \"@definitions/helpers\";\n\ntype CardInfo = {\n    title: string;\n    description: string;\n    link: string;\n    iconUrl: string;\n};\n\nconst cards: CardInfo[] = [\n    {\n        title: \"Documentation\",\n        description:\n            \"Learn about the technical details of using refine in your projects.\",\n        link: \"https://refine.dev/\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg\",\n    },\n    {\n        title: \"Tutorial\",\n        description:\n            \"Learn how to use refine by building a fully-functioning CRUD app, from scratch to full launch.\",\n        link: \"https://refine.dev/docs/tutorial/introduction/index/\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg\",\n    },\n    {\n        title: \"Examples\",\n        description:\n            \"A collection of reference applications you can use as a starting point.\",\n        link: \"https://refine.dev/examples\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg\",\n    },\n    {\n        title: \"Community\",\n        description:\n            \"Join our Discord community and keep up with the latest news.\",\n        link: \"https://discord.gg/refine\",\n        iconUrl:\n            \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg\",\n    },\n];\n\n/**\n * It is a page that welcomes you after the configuration is completed.\n */\nexport const WelcomePage: React.FC = () => {\n    const isTablet = useMediaQuery(\"(max-width: 1010px)\");\n    const isMobile = useMediaQuery(\"(max-width: 650px)\");\n\n    const getGridTemplateColumns = () => {\n        if (isMobile) {\n            return \"1, 280px\";\n        } else if (isTablet) {\n            return \"2, 280px\";\n        } else {\n            return \"4, 1fr\";\n        }\n    };\n\n    const getHeaderFontSize = () => {\n        if (isMobile) {\n            return \"32px\";\n        } else if (isTablet) {\n            return \"40px\";\n        } else {\n            return \"48px\";\n        }\n    };\n\n    const getSubHeaderFontSize = () => {\n        if (isMobile) {\n            return \"16px\";\n        } else if (isTablet) {\n            return \"20px\";\n        } else {\n            return \"24px\";\n        }\n    };\n\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                zIndex: 10,\n                inset: 0,\n                overflow: \"auto\",\n                width: \"100dvw\",\n                height: \"100dvh\",\n            }}\n        >\n            <div\n                style={{\n                    overflow: \"hidden\",\n                    position: \"relative\",\n                    backgroundSize: \"cover\",\n                    backgroundRepeat: \"no-repeat\",\n                    background: isMobile\n                        ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\"\n                        : isTablet\n                        ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\"\n                        : \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30\",\n                    minHeight: \"100%\",\n                    minWidth: \"100%\",\n                    fontFamily: \"Arial\",\n                    color: \"#FFFFFF\",\n                }}\n            >\n                <div\n                    style={{\n                        zIndex: 2,\n                        position: \"absolute\",\n                        width: isMobile ? \"400px\" : \"800px\",\n                        height: \"552px\",\n                        opacity: \"0.5\",\n                        background:\n                            \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)\",\n                        backgroundRepeat: \"no-repeat\",\n                        backgroundSize: \"contain\",\n                        top: \"0\",\n                        left: \"50%\",\n                        transform: \"translateX(-50%)\",\n                    }}\n                />\n                <div style={{ height: isMobile ? \"40px\" : \"80px\" }}></div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                    <div\n                        style={{\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundSize: isMobile\n                                ? \"112px 58px\"\n                                : \"224px 116px\",\n                            backgroundImage:\n                                \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)\",\n                            width: isMobile ? 112 : 224,\n                            height: isMobile ? 58 : 116,\n                        }}\n                    />\n                </div>\n                <div\n                    style={{\n                        height: isMobile\n                            ? \"120px\"\n                            : isTablet\n                            ? \"270px\"\n                            : \"40vh\",\n                        minHeight: isMobile\n                            ? \"120px\"\n                            : isTablet\n                            ? \"270px\"\n                            : \"270px\",\n                    }}\n                ></div>\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        gap: \"16px\",\n                        textAlign: \"center\",\n                    }}\n                >\n                    <h1\n                        style={{\n                            fontSize: getHeaderFontSize(),\n                            fontWeight: 700,\n                            margin: \"0px\",\n                        }}\n                    >\n                        Welcome Aboard!\n                    </h1>\n                    <h4\n                        style={{\n                            fontSize: getSubHeaderFontSize(),\n                            fontWeight: 400,\n                            margin: \"0px\",\n                        }}\n                    >\n                        Your configuration is completed.\n                    </h4>\n                </div>\n                <div style={{ height: \"64px\" }}></div>\n                <div\n                    style={{\n                        display: \"grid\",\n                        gridTemplateColumns: `repeat(${getGridTemplateColumns()})`,\n                        justifyContent: \"center\",\n                        gap: \"48px\",\n                        paddingRight: \"16px\",\n                        paddingLeft: \"16px\",\n                        paddingBottom: \"32px\",\n                        maxWidth: \"976px\",\n                        margin: \"auto\",\n                    }}\n                >\n                    {cards.map((card) => (\n                        <Card key={`welcome-page-${card.title}`} card={card} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\ntype CardProps = {\n    card: CardInfo;\n};\n\nconst Card: React.FC<CardProps> = ({ card }) => {\n    const { title, description, iconUrl, link } = card;\n\n    const [isHover, setIsHover] = useState(false);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"16px\",\n            }}\n        >\n            <div\n                style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                <a\n                    onPointerEnter={() => setIsHover(true)}\n                    onPointerLeave={() => setIsHover(false)}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        color: \"#fff\",\n                        textDecoration: \"none\",\n                    }}\n                    href={link}\n                >\n                    <div\n                        style={{\n                            width: \"16px\",\n                            height: \"16px\",\n                            backgroundPosition: \"center\",\n                            backgroundSize: \"contain\",\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundImage: `url(${iconUrl})`,\n                        }}\n                    />\n                    <span\n                        style={{\n                            fontSize: \"16px\",\n                            fontWeight: 700,\n                            marginLeft: \"13px\",\n                            marginRight: \"14px\",\n                        }}\n                    >\n                        {title}\n                    </span>\n                    <svg\n                        style={{\n                            transition:\n                                \"transform 0.5s ease-in-out, opacity 0.2s ease-in-out\",\n                            ...(isHover && {\n                                transform: \"translateX(4px)\",\n                                opacity: 1,\n                            }),\n                        }}\n                        width=\"12\"\n                        height=\"8\"\n                        fill=\"none\"\n                        opacity=\"0.5\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                        <path\n                            d=\"M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z\"\n                            fill=\"#fff\"\n                        />\n                    </svg>\n                </a>\n            </div>\n            <span\n                style={{\n                    fontSize: \"12px\",\n                    opacity: 0.5,\n                    lineHeight: \"16px\",\n                }}\n            >\n                {description}\n            </span>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { useQuerySubscription } from \"@refinedev/devtools-internal\";\n\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\nimport { Telemetry } from \"@components/telemetry\";\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\nimport {\n    AuthBindingsContextProvider,\n    LegacyAuthContextProvider,\n} from \"@contexts/auth\";\nimport { DataContextProvider } from \"@contexts/data\";\nimport { LegacyRouterContextProvider } from \"@contexts/legacy-router\";\nimport { LiveContextProvider } from \"@contexts/live\";\nimport { NotificationContextProvider } from \"@contexts/notification\";\nimport { RefineContextProvider } from \"@contexts/refine\";\nimport { ResourceContextProvider } from \"@contexts/resource\";\nimport { TranslationContextProvider } from \"@contexts/translation\";\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\nimport { handleRefineOptions } from \"@definitions\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\nimport { RouterBindings } from \"src/interfaces/bindings\";\n\nimport { RouterPickerProvider } from \"@contexts/router-picker\";\nimport { RouterBindingsProvider } from \"../../../contexts/router\";\nimport { useRouterMisuseWarning } from \"../../../hooks/router/use-router-misuse-warning/index\";\nimport {\n    AccessControlProvider,\n    AuditLogProvider,\n    AuthBindings,\n    DashboardPageProps,\n    I18nProvider,\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n    ILiveContext,\n    INotificationContext,\n    IRefineOptions,\n    IRouterProvider,\n    LayoutProps,\n    LegacyAuthProvider,\n    LiveModeProps,\n    NotificationProvider,\n    TitleProps,\n} from \"../../../interfaces\";\nimport { ResourceProps } from \"../../../interfaces/bindings/resource\";\n\nexport interface RefineProps {\n    children?: React.ReactNode;\n    /**\n     * `resources` is the predefined interaction points for a refine app. A resource represents an entity in an endpoint in the API.\n     * While this is not a required property, it is used in resource detection and creation of routes for the app.\n     * @type [`ResourceProps[]`](https://refine.dev/docs/api-reference/core/components/refine-config/#resources)\n     */\n    resources?: ResourceProps[];\n    /**\n     * **refine** needs some router functions to create resource pages, handle navigation, etc. This provider allows you to use the router library you want\n     * @type [`IRouterProvider`](https://refine.dev/docs/api-reference/core/providers/router-provider/)\n     * @deprecated This property is deprecated and was the legacy way of routing. Please use `routerProvider` with new router bindings instead.\n     */\n    legacyRouterProvider?: IRouterProvider;\n    /**\n     * Router bindings for **refine**. A simple interface for **refine** to interact with your router in a flexible way.\n     * @type [`RouterBindings`](https://refine.dev/docs/api-reference/core/bindings/router/)\n     */\n    routerProvider?: RouterBindings;\n    /**\n     * A `dataProvider` is the place where a refine app communicates with an API. Data providers also act as adapters for refine, making it possible for it to consume different API's and data services.\n     * @type [`IDataContextProvider` | `IDataMultipleContextProvider`](https://refine.dev/docs/api-reference/core/providers/data-provider/)\n     */\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\n    /**\n     * `authProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthBindings`](https://refine.dev/docs/api-reference/core/providers/auth-provider/)\n     */\n    authProvider?: AuthBindings;\n    /**\n     * `legacyAuthProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthProvider`](https://refine.dev/docs/api-reference/core/providers/auth-provider/)\n     * @deprecated `legacyAuthProvider` is deprecated with refine@4, use `authProvider` instead.\n     */\n    legacyAuthProvider?: LegacyAuthProvider;\n    /**\n     * **refine** lets you add Realtime support to your app via `liveProvider`. It can be used to update and show data in Realtime throughout your app.\n     * @type [`ILiveContext`](https://refine.dev/docs/api-reference/core/providers/live-provider/)\n     */\n    liveProvider?: ILiveContext;\n    /**\n     * `notificationProvider` handles notification logics. It is an object with methods that refine uses when necessary.\n     * @type [`NotificationProvider` | `(() => NotificationProvider)`](https://refine.dev/docs/api-reference/core/providers/notification-provider/)\n     */\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\n    /**\n     * `accessControlProvider` is the entry point for implementing access control for refine apps.\n     * @type [`AccessControlProvider`](https://refine.dev/docs/api-reference/core/providers/accessControl-provider/)\n     */\n    accessControlProvider?: AccessControlProvider;\n    /**\n     * **refine** allows you to track changes in your data and keep track of who made the changes.\n     * @type [`AuditLogProvider`](https://refine.dev/docs/api-reference/core/providers/audit-log-provider#overview)\n     */\n    auditLogProvider?: AuditLogProvider;\n    /**\n     * `i18nProvider` property lets you add i18n support to your app. Making you able to use any i18n framework.\n     * @type [`i18nProvider`](https://refine.dev/docs/api-reference/core/providers/i18n-provider/)\n     */\n    i18nProvider?: I18nProvider;\n    /**\n     * A custom error component.\n     * @type [`ReactNode`](https://refine.dev/docs/api-reference/core/components/refine-config/#catchall)\n     * @deprecated Please use the `catchAll` element in your routes instead.\n     */\n    catchAll?: React.ReactNode;\n    /**\n     * Custom login component can be passed to the `LoginPage` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#loginpage)\n     * @deprecated Please use the `LoginPage` component in your routes instead.\n     */\n    LoginPage?: React.FC;\n    /**\n     * A custom dashboard page can be passed to the `DashboardPage` prop which is accessible on root route.\n     * @type [`React.FC<DashboardPageProps>`](https://refine.dev/docs/api-reference/core/components/refine-config/#dashboardpage)\n     * @deprecated Please use the `DashboardPage` component in your routes instead.\n     */\n    DashboardPage?: React.FC<DashboardPageProps>;\n    /**\n     * Custom ready page component can be set by passing to `ReadyPage` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#readypage)\n     * @deprecated This component is only used with the legacy router and will be removed in the future.\n     */\n    ReadyPage?: React.FC;\n    /**\n     * Default layout can be customized by passing the `Layout` property.\n     * @type [`React.FC<LayoutProps>`](https://refine.dev/docs/api-reference/core/components/refine-config/#layout)\n     * @deprecated Please use the `Layout` component as a children instead of a prop.\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * The default sidebar can be customized by using refine hooks and passing custom components to `Sider` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#sider)\n     * @deprecated Please pass the `Sider` component to your `Layout` component.\n     */\n    Sider?: React.FC;\n    /**\n     * The default app header can be customized by passing the `Header` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#header)\n     * @deprecated Please pass the `Header` component to your `Layout` component.\n     */\n    Header?: React.FC;\n    /**\n     *The default app footer can be customized by passing the `Footer` property.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#footer)\n     * @deprecated Please pass the `Footer` component to your `Layout` component.\n     */\n    Footer?: React.FC;\n    /**\n     * The component wanted to be placed out of app layout structure can be set by passing to `OffLayoutArea` prop.\n     * @type [`React.FC`](https://refine.dev/docs/api-reference/core/components/refine-config/#offlayoutarea)\n     * @deprecated Please use your `OffLayoutArea` component as a children instead of a prop.\n     */\n    OffLayoutArea?: React.FC;\n    /**\n     * TThe app title can be set by passing the `Title` property.\n     * @type [`React.FC<TitleProps>`](https://refine.dev/docs/api-reference/core/components/refine-config/#title)\n     * @deprecated Please pass the `Title` component to your `Layout` component.\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * Callback to handle all live events.\n     * @type [`(event: LiveEvent) => void`](https://refine.dev/docs/api-reference/core/providers/live-provider/#onliveevent)\n     */\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\n    /**\n     * `options` is used to configure the app.\n     * @type [`IRefineOptions`](https://refine.dev/docs/api-reference/core/components/refine-config/#options)\n     * */\n    options?: IRefineOptions;\n}\n\n/**\n * {@link https://refine.dev/docs/api-reference/core/components/refine-config `<Refine> component`} is the entry point of a refine app.\n * It is where the highest level of configuration of the app occurs.\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\n *\n * @see {@link https://refine.dev/docs/api-reference/core/components/refine-config} for more details.\n */\nexport const Refine: React.FC<RefineProps> = ({\n    legacyAuthProvider,\n    authProvider,\n    dataProvider,\n    legacyRouterProvider,\n    routerProvider,\n    notificationProvider,\n    accessControlProvider,\n    auditLogProvider,\n    resources,\n    DashboardPage,\n    ReadyPage,\n    LoginPage,\n    catchAll,\n    children,\n    liveProvider,\n    i18nProvider,\n    Title,\n    Layout,\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    onLiveEvent,\n    options,\n}) => {\n    const {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    } = handleRefineOptions({\n        options,\n    });\n\n    const queryClient = useDeepMemo(() => {\n        if (reactQueryWithDefaults.clientConfig instanceof QueryClient) {\n            return reactQueryWithDefaults.clientConfig;\n        }\n\n        return new QueryClient({\n            ...reactQueryWithDefaults.clientConfig,\n            defaultOptions: {\n                ...reactQueryWithDefaults.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: false,\n                    keepPreviousData: true,\n                    ...reactQueryWithDefaults.clientConfig.defaultOptions\n                        ?.queries,\n                },\n            },\n        });\n    }, [reactQueryWithDefaults.clientConfig]);\n\n    useQuerySubscription(queryClient);\n\n    const useNotificationProviderValues = React.useMemo(() => {\n        return typeof notificationProvider === \"function\"\n            ? notificationProvider\n            : () => notificationProvider ?? ({} as INotificationContext);\n    }, [notificationProvider]);\n\n    const notificationProviderContextValues = useNotificationProviderValues();\n\n    /**\n     * Warn our users if they are using the old way of routing in the wrong prop.\n     */\n    useRouterMisuseWarning(routerProvider);\n    /** */\n\n    /**\n     * `<ReadyPage />` is only used in the legacy routing and is not used in the new routing.\n     * If `legacyRouterProvider` is provided and `routerProvider` is not, we'll check for the `resources` prop to be empty.\n     * If `resources` is empty, then we'll render `<ReadyPage />` component.\n     */\n    if (\n        legacyRouterProvider &&\n        !routerProvider &&\n        (resources ?? []).length === 0\n    ) {\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\n    }\n\n    /** Router\n     *\n     * Handle routing from `RouterBindingsProvider` and `router` prop for the brand new way\n     * If `router` is not provided, then we'r checking for `routerProvider` prop\n     * If `routerProvider` is provided, then `RouterContextProvider` is used\n     * If none of them is provided, then `RouterBindingsProvider` is used because it supports undefined router\n     *\n     * `RouterContextProvider` is skipped whenever possible and by this way,\n     * we can achieve backward compability only when its provided by user\n     *\n     */\n    const { RouterComponent = React.Fragment } = !routerProvider\n        ? legacyRouterProvider ?? {}\n        : {};\n    /** */\n\n    return (\n        <QueryClientProvider client={queryClient}>\n            <NotificationContextProvider {...notificationProviderContextValues}>\n                <LegacyAuthContextProvider\n                    {...(legacyAuthProvider ?? {})}\n                    isProvided={Boolean(legacyAuthProvider)}\n                >\n                    <AuthBindingsContextProvider\n                        {...(authProvider ?? {})}\n                        isProvided={Boolean(authProvider)}\n                    >\n                        <DataContextProvider {...dataProvider}>\n                            <LiveContextProvider liveProvider={liveProvider}>\n                                <RouterPickerProvider\n                                    value={\n                                        legacyRouterProvider && !routerProvider\n                                            ? \"legacy\"\n                                            : \"new\"\n                                    }\n                                >\n                                    <RouterBindingsProvider\n                                        router={routerProvider}\n                                    >\n                                        <LegacyRouterContextProvider\n                                            {...legacyRouterProvider}\n                                        >\n                                            <ResourceContextProvider\n                                                resources={resources ?? []}\n                                            >\n                                                <TranslationContextProvider\n                                                    i18nProvider={i18nProvider}\n                                                >\n                                                    <AccessControlContextProvider\n                                                        {...(accessControlProvider ??\n                                                            {})}\n                                                    >\n                                                        <AuditLogContextProvider\n                                                            {...(auditLogProvider ??\n                                                                {})}\n                                                        >\n                                                            <UndoableQueueContextProvider>\n                                                                <RefineContextProvider\n                                                                    mutationMode={\n                                                                        optionsWithDefaults.mutationMode\n                                                                    }\n                                                                    warnWhenUnsavedChanges={\n                                                                        optionsWithDefaults.warnWhenUnsavedChanges\n                                                                    }\n                                                                    syncWithLocation={\n                                                                        optionsWithDefaults.syncWithLocation\n                                                                    }\n                                                                    Title={\n                                                                        Title\n                                                                    }\n                                                                    undoableTimeout={\n                                                                        optionsWithDefaults.undoableTimeout\n                                                                    }\n                                                                    catchAll={\n                                                                        catchAll\n                                                                    }\n                                                                    DashboardPage={\n                                                                        DashboardPage\n                                                                    }\n                                                                    LoginPage={\n                                                                        LoginPage\n                                                                    }\n                                                                    Layout={\n                                                                        Layout\n                                                                    }\n                                                                    Sider={\n                                                                        Sider\n                                                                    }\n                                                                    Footer={\n                                                                        Footer\n                                                                    }\n                                                                    Header={\n                                                                        Header\n                                                                    }\n                                                                    OffLayoutArea={\n                                                                        OffLayoutArea\n                                                                    }\n                                                                    hasDashboard={\n                                                                        !!DashboardPage\n                                                                    }\n                                                                    liveMode={\n                                                                        optionsWithDefaults.liveMode\n                                                                    }\n                                                                    onLiveEvent={\n                                                                        onLiveEvent\n                                                                    }\n                                                                    options={\n                                                                        optionsWithDefaults\n                                                                    }\n                                                                >\n                                                                    <UnsavedWarnContextProvider>\n                                                                        <RouterComponent>\n                                                                            {\n                                                                                children\n                                                                            }\n                                                                            {!disableTelemetryWithDefault && (\n                                                                                <Telemetry />\n                                                                            )}\n                                                                            <RouteChangeHandler />\n                                                                        </RouterComponent>\n                                                                    </UnsavedWarnContextProvider>\n                                                                </RefineContextProvider>\n                                                            </UndoableQueueContextProvider>\n                                                        </AuditLogContextProvider>\n                                                    </AccessControlContextProvider>\n                                                </TranslationContextProvider>\n                                            </ResourceContextProvider>\n                                        </LegacyRouterContextProvider>\n                                    </RouterBindingsProvider>\n                                </RouterPickerProvider>\n                            </LiveContextProvider>\n                        </DataContextProvider>\n                    </AuthBindingsContextProvider>\n                </LegacyAuthContextProvider>\n            </NotificationContextProvider>\n        </QueryClientProvider>\n    );\n};\n","import React from \"react\";\n\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\n\nimport { ITelemetryData } from \"../../interfaces/telemetry\";\n\nconst encode = (payload: ITelemetryData): string | undefined => {\n    try {\n        const stringifiedPayload = JSON.stringify(payload || {});\n\n        if (typeof btoa !== \"undefined\") {\n            return btoa(stringifiedPayload);\n        }\n\n        return Buffer.from(stringifiedPayload).toString(\"base64\");\n    } catch (err) {\n        return undefined;\n    }\n};\n\nconst throughImage = (src: string) => {\n    const img = new Image();\n\n    img.src = src;\n};\n\nconst throughFetch = (src: string) => {\n    fetch(src);\n};\n\nconst transport = (src: string) => {\n    if (typeof Image !== \"undefined\") {\n        throughImage(src);\n    } else if (typeof fetch !== \"undefined\") {\n        throughFetch(src);\n    }\n};\n\nexport const Telemetry: React.FC<{}> = () => {\n    const payload = useTelemetryData();\n    const sent = React.useRef(false);\n\n    React.useEffect(() => {\n        if (sent.current) {\n            return;\n        }\n        const encoded = encode(payload);\n\n        if (!encoded) {\n            return;\n        }\n\n        transport(`https://telemetry.refine.dev/telemetry?payload=${encoded}`);\n        sent.current = true;\n    }, []);\n\n    return null;\n};\n","import { useContext } from \"react\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RouterContext } from \"@contexts/legacy-router\";\nimport { DataContext } from \"@contexts/data\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { NotificationContext } from \"@contexts/notification\";\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { useResource } from \"@hooks/resource\";\n\nimport { ITelemetryData } from \"../../interfaces/telemetry\";\nimport { useIsExistAuthentication, useRefineContext } from \"..\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_VERSION = \"4.46.2\";\n\nexport const useTelemetryData = (): ITelemetryData => {\n    const auth = useIsExistAuthentication();\n    const auditLogContext = useContext(AuditLogContext);\n    const liveContext = useContext(LiveContext);\n    const routerContext = useContext(RouterContext);\n    const dataContext = useContext(DataContext);\n    const { i18nProvider } = useContext(TranslationContext);\n    const notificationContext = useContext(NotificationContext);\n    const accessControlContext = useContext(AccessControlContext);\n    const { resources } = useResource();\n    const refineOptions = useRefineContext();\n\n    const auditLog =\n        !!auditLogContext.create ||\n        !!auditLogContext.get ||\n        !!auditLogContext.update;\n\n    const live =\n        !!liveContext?.publish ||\n        !!liveContext?.subscribe ||\n        !!liveContext?.unsubscribe;\n\n    const router =\n        !!routerContext.useHistory ||\n        !!routerContext.Link ||\n        !!routerContext.Prompt ||\n        !!routerContext.useLocation ||\n        !!routerContext.useParams;\n\n    const data = !!dataContext;\n\n    const i18n =\n        !!i18nProvider?.changeLocale ||\n        !!i18nProvider?.getLocale ||\n        !!i18nProvider?.translate;\n\n    const notification =\n        !!notificationContext.close || !!notificationContext.open;\n\n    const accessControl = !!accessControlContext.can;\n\n    const projectId = refineOptions?.options?.projectId;\n\n    return {\n        providers: {\n            auth,\n            auditLog,\n            live,\n            router,\n            data,\n            i18n,\n            notification,\n            accessControl,\n        },\n        version: REFINE_VERSION,\n        resourceCount: resources.length,\n        projectId,\n    };\n};\n","import { IRouterProvider, RouterBindings } from \"src/interfaces\";\n\nexport const checkRouterPropMisuse = (\n    value: IRouterProvider | RouterBindings,\n) => {\n    // check if `routerProvider` prop is passed with legacy properties.\n    // If yes, console.warn the user to use `legacyRuterProvider` prop instead.\n    const bindings = [\"go\", \"parse\", \"back\", \"Link\"];\n\n    // check if `value` contains properties other than `bindings`\n    const otherProps = Object.keys(value).filter(\n        (key) => !bindings.includes(key),\n    );\n\n    const hasOtherProps = otherProps.length > 0;\n\n    if (hasOtherProps) {\n        console.warn(\n            `Unsupported properties are found in \\`routerProvider\\` prop. You provided \\`${otherProps.join(\n                \", \",\n            )}\\`. Supported properties are \\`${bindings.join(\n                \", \",\n            )}\\`. You may wanted to use \\`legacyRouterProvider\\` prop instead.`,\n        );\n\n        return true;\n    }\n\n    return false;\n};\n","import { checkRouterPropMisuse } from \"@definitions/helpers/check-router-prop-misuse\";\nimport React from \"react\";\nimport { RouterBindings } from \"src/interfaces\";\n\nexport const useRouterMisuseWarning = (value?: RouterBindings) => {\n    const warned = React.useRef(false);\n\n    React.useEffect(() => {\n        if (warned.current === false) {\n            if (value) {\n                const warn = checkRouterPropMisuse(value);\n                if (warn) {\n                    warned.current = true;\n                }\n            }\n        }\n    }, [value]);\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\nimport { IUndoableQueue } from \"../../interfaces\";\n\nimport { userFriendlySecond } from \"@definitions/helpers\";\n\nexport const UndoableQueue: React.FC<{\n    notification: IUndoableQueue;\n}> = ({ notification }) => {\n    const translate = useTranslate();\n\n    const { notificationDispatch } = useCancelNotification();\n    const { open } = useNotification();\n\n    const [timeoutId, setTimeoutId] = useState<number | undefined>();\n\n    const cancelNotification = () => {\n        if (notification.isRunning === true) {\n            if (notification.seconds === 0) {\n                notification.doMutation();\n            }\n            if (!notification.isSilent) {\n                open?.({\n                    key: `${notification.id}-${notification.resource}-notification`,\n                    type: \"progress\",\n                    message: translate(\n                        \"notifications.undoable\",\n                        {\n                            seconds: userFriendlySecond(notification.seconds),\n                        },\n                        `You have ${userFriendlySecond(\n                            notification.seconds,\n                        )} seconds to undo`,\n                    ),\n                    cancelMutation: notification.cancelMutation,\n                    undoableTimeout: userFriendlySecond(notification.seconds),\n                });\n            }\n\n            if (notification.seconds > 0) {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n\n                const newTimeoutId = setTimeout(() => {\n                    notificationDispatch({\n                        type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\n                        payload: {\n                            id: notification.id,\n                            seconds: notification.seconds,\n                            resource: notification.resource,\n                        },\n                    });\n                }, 1000) as unknown as number;\n\n                setTimeoutId(newTimeoutId);\n            }\n        }\n    };\n\n    useEffect(() => {\n        cancelNotification();\n    }, [notification]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport {\n    useRefineContext,\n    useRouterContext,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@hooks\";\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\n\nexport interface LayoutWrapperProps {\n    /**\n     * Outer component that renders other components\n     * @default *\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * [Custom sider to use](/api-reference/core/components/refine-config.md#sider)\n     * @default *\n     */\n    Sider?: React.FC;\n    /**\n     * [Custom header to use](/api-reference/core/components/refine-config.md#header)\n     * @default *\n     */\n    Header?: React.FC;\n    /**\n     * [Custom title to use](/api-reference/core/components/refine-config.md#title)\n     * @default *\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * [Custom footer to use](/api-reference/core/components/refine-config.md#footer)\n     * @default *\n     */\n    Footer?: React.FC;\n    /**\n     * [Custom off layout area to use](/api-reference/core/components/refine-config.md#offlayoutarea)\n     * @default *\n     */\n    OffLayoutArea?: React.FC;\n    children: React.ReactNode;\n}\n\n/**\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\n * It is the default layout used in resource pages.\n * It can be used in custom pages to use global layout.\n *\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\n *\n * @deprecated This component is obsolete and only works with the legacy router providers.\n */\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\n    children,\n    Layout: LayoutFromProps,\n    Sider: SiderFromProps,\n    Header: HeaderFromProps,\n    Title: TitleFromProps,\n    Footer: FooterFromProps,\n    OffLayoutArea: OffLayoutAreaFromProps,\n}) => {\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\n        useRefineContext();\n\n    const LayoutToRender = LayoutFromProps ?? Layout;\n\n    return (\n        <LayoutToRender\n            Sider={SiderFromProps ?? Sider}\n            Header={HeaderFromProps ?? Header}\n            Footer={FooterFromProps ?? Footer}\n            Title={TitleFromProps ?? Title}\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\n        >\n            {children}\n            <UnsavedPrompt />\n        </LayoutToRender>\n    );\n};\n\nconst UnsavedPrompt: React.FC = () => {\n    const { Prompt } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const warnWhenListener = (e: {\n        preventDefault: () => void;\n        returnValue: string;\n    }) => {\n        e.preventDefault();\n\n        e.returnValue = translate(\n            \"warnWhenUnsavedChanges\",\n            \"Are you sure you want to leave? You have unsaved changes.\",\n        );\n\n        return e.returnValue;\n    };\n\n    useEffect(() => {\n        if (warnWhen) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\n    }, [warnWhen]);\n\n    return (\n        <Prompt\n            when={warnWhen}\n            message={translate(\n                \"warnWhenUnsavedChanges\",\n                \"Are you sure you want to leave? You have unsaved changes.\",\n            )}\n            setWarnWhen={setWarnWhen}\n        />\n    );\n};\n","import React from \"react\";\n\nimport {\n    useGo,\n    useNavigation,\n    useParsed,\n    useRouterContext,\n    useRouterType,\n    useIsAuthenticated,\n} from \"@hooks\";\nimport { useActiveAuthProvider } from \"@definitions/index\";\nimport { GoConfig } from \"src/interfaces\";\n\nexport type AuthenticatedCommonProps = {\n    /**\n     * Unique key to identify the component.\n     * This is required if you have multiple `Authenticated` components at the same level.\n     * @required\n     */\n    key: React.Key;\n    /**\n     * Whether to redirect user if not logged in or not.\n     * If not set, user will be redirected to `redirectTo` property of the `check` function's response.\n     * This behavior is only available for new auth providers.\n     * Legacy auth providers will redirect to `/login` by default if this property is not set.\n     * If set to a string, user will be redirected to that string.\n     *\n     * This property only works if `fallback` is **not set**.\n     */\n    redirectOnFail?: string | true;\n    /**\n     * Whether to append current path to search params of the redirect url at `to` property.\n     *\n     * By default, `to` parameter is used by successful invocations of the `useLogin` hook.\n     * If `to` present, it will be used as the redirect url after successful login.\n     */\n    appendCurrentPathToQuery?: boolean;\n    /**\n     * Content to show if user is not logged in.\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Content to show while checking whether user is logged in or not.\n     */\n    loading?: React.ReactNode;\n    /**\n     * Content to show if user is logged in\n     */\n    children?: React.ReactNode;\n};\n\nexport type LegacyAuthenticatedProps = {\n    v3LegacyAuthProviderCompatible: true;\n} & AuthenticatedCommonProps;\n\nexport type AuthenticatedProps = {\n    v3LegacyAuthProviderCompatible?: false;\n} & AuthenticatedCommonProps;\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/api-reference/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @requires {@link https://react.dev/learn/rendering-lists#why-does-react-need-keys `key`} prop if you have multiple components at the same level.\n * In React, components don't automatically unmount and remount with prop changes, which is generally good for performance. However, for specific cases this can cause issues like unwanted content rendering (`fallback` or `children`). To solve this, assigning unique `key` values to each instance of component is necessary, forcing React to unmount and remount the component, rather than just updating its props.\n * @example\n *```tsx\n * <Authenticated key=\"dashboard\">\n *   <h1>Dashboard Page</h1>\n * </Authenticated>\n *```\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport function Authenticated(\n    props: LegacyAuthenticatedProps,\n): JSX.Element | null;\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/api-reference/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @requires {@link https://react.dev/learn/rendering-lists#why-does-react-need-keys `key`} prop if you have multiple components at the same level.\n * In React, components don't automatically unmount and remount with prop changes, which is generally good for performance. However, for specific cases this can cause issues like unwanted content rendering (`fallback` or `children`). To solve this, assigning unique `key` values to each instance of component is necessary, forcing React to unmount and remount the component, rather than just updating its props.\n * @example\n *```tsx\n * <Authenticated key=\"dashboard\">\n *   <h1>Dashboard Page</h1>\n * </Authenticated>\n *```\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport function Authenticated(props: AuthenticatedProps): JSX.Element | null;\n\nexport function Authenticated({\n    redirectOnFail = true,\n    appendCurrentPathToQuery = true,\n    children,\n    fallback: fallbackContent,\n    loading: loadingContent,\n}: AuthenticatedProps | LegacyAuthenticatedProps): JSX.Element | null {\n    const activeAuthProvider = useActiveAuthProvider();\n    const routerType = useRouterType();\n\n    const hasAuthProvider = Boolean(activeAuthProvider?.isProvided);\n    const isLegacyAuth = Boolean(activeAuthProvider?.isLegacy);\n    const isLegacyRouter = routerType === \"legacy\";\n\n    const parsed = useParsed();\n    const go = useGo();\n    const { useLocation } = useRouterContext();\n    const legacyLocation = useLocation();\n\n    const {\n        isFetching,\n        isSuccess,\n        data: {\n            authenticated: isAuthenticatedStatus,\n            redirectTo: authenticatedRedirect,\n        } = {},\n    } = useIsAuthenticated({\n        v3LegacyAuthProviderCompatible: isLegacyAuth,\n    });\n\n    // Authentication status\n    const isAuthenticated = hasAuthProvider\n        ? isLegacyAuth\n            ? isSuccess\n            : isAuthenticatedStatus\n        : true;\n\n    // when there is no auth provider\n    if (!hasAuthProvider) {\n        return <>{children ?? null}</>;\n    }\n\n    // when checking authentication status\n    if (isFetching) {\n        return <>{loadingContent ?? null}</>;\n    }\n\n    // when user is authenticated return children\n    if (isAuthenticated) {\n        return <>{children ?? null}</>;\n    }\n    // when user is not authenticated redirect or render fallbackContent\n    else {\n        // render fallbackContent if it is exist\n        if (typeof fallbackContent !== \"undefined\") {\n            return <>{fallbackContent ?? null}</>;\n        }\n        // if there is no fallbackContent, redirect page\n\n        // Redirect url to use. use redirectOnFail if it is set.\n        // Otherwise use redirectTo property of the check function's response.\n        // If both are not set, use `/login` as the default redirect url. (only for legacy auth providers)\n        const appliedRedirect = isLegacyAuth\n            ? typeof redirectOnFail === \"string\"\n                ? redirectOnFail\n                : \"/login\"\n            : typeof redirectOnFail === \"string\"\n            ? redirectOnFail\n            : (authenticatedRedirect as string | undefined);\n\n        // Current pathname to append to the redirect url.\n        // User will be redirected to this url after successful mutation. (like login)\n        const pathname = `${\n            isLegacyRouter ? legacyLocation?.pathname : parsed.pathname\n        }`.replace(/(\\?.*|#.*)$/, \"\");\n        // Redirect if appliedRedirect is set, otherwise return null.\n        //  Uses `replace` for legacy router and `go` for new router.\n        if (appliedRedirect) {\n            if (isLegacyRouter) {\n                const toQuery = appendCurrentPathToQuery\n                    ? `?to=${encodeURIComponent(pathname)}`\n                    : \"\";\n                return <RedirectLegacy to={`${appliedRedirect}${toQuery}`} />;\n            } else {\n                return (\n                    <Redirect\n                        config={{\n                            to: appliedRedirect,\n                            query: appendCurrentPathToQuery\n                                ? {\n                                      to: parsed.params?.to\n                                          ? parsed.params.to\n                                          : go({\n                                                to: pathname,\n                                                options: { keepQuery: true },\n                                                type: \"path\",\n                                            }),\n                                  }\n                                : undefined,\n                            type: \"replace\",\n                        }}\n                    />\n                );\n            }\n        }\n\n        return null;\n    }\n}\n\nconst Redirect = ({ config }: { config: GoConfig }) => {\n    const go = useGo();\n\n    React.useEffect(() => {\n        go(config);\n    }, [go, config]);\n\n    return null;\n};\n\nconst RedirectLegacy = ({ to }: { to: string }) => {\n    const { replace } = useNavigation();\n\n    React.useEffect(() => {\n        replace(to);\n    }, [replace, to]);\n\n    return null;\n};\n","import { useEffect } from \"react\";\nimport { useRouterContext } from \"@hooks\";\nimport { useLegacyAuthContext } from \"@contexts/auth\";\n\nexport const RouteChangeHandler: React.FC = () => {\n    const { useLocation } = useRouterContext();\n\n    const { checkAuth } = useLegacyAuthContext();\n    const location = useLocation();\n\n    useEffect(() => {\n        checkAuth?.().catch(() => false);\n    }, [location?.pathname]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport { useCan, useResource } from \"@hooks\";\nimport { BaseKey, IResourceItem, ITreeMenu } from \"../../interfaces\";\n\ntype CanParams = {\n    resource?: IResourceItem & { children?: ITreeMenu[] };\n    id?: BaseKey;\n    [key: string]: any;\n};\n\ntype OnUnauthorizedProps = {\n    resource?: string;\n    reason?: string;\n    action: string;\n    params: CanParams;\n};\n\ntype CanAccessBaseProps = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource?: string;\n    /**\n     * Intended action on resource\n     */\n    action: string;\n    /**\n     * Parameters associated with the resource\n     * @type { resource?: [IResourceItem](https://refine.dev/docs/api-reference/core/interfaceReferences/#canparams), id?: [BaseKey](https://refine.dev/docs/api-reference/core/interfaceReferences/#basekey), [key: string]: any }\n     */\n    params?: CanParams;\n    /**\n     * Content to show if access control returns `false`\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Callback function to be called if access control returns `can: false`\n     */\n    onUnauthorized?: (props: OnUnauthorizedProps) => void;\n    children: React.ReactNode;\n};\n\ntype CanAccessWithoutParamsProps = {\n    [key in Exclude<\n        keyof CanAccessBaseProps,\n        \"fallback\" | \"children\"\n    >]?: undefined;\n} & {\n    [key in \"fallback\" | \"children\"]?: CanAccessBaseProps[key];\n};\n\nexport type CanAccessProps = CanAccessBaseProps | CanAccessWithoutParamsProps;\n\nexport const CanAccess: React.FC<CanAccessProps> = ({\n    resource: resourceFromProp,\n    action: actionFromProp,\n    params: paramsFromProp,\n    fallback,\n    onUnauthorized,\n    children,\n    ...rest\n}) => {\n    const {\n        resource,\n        id: idFromRoute,\n        action: actionFromRoute,\n    } = useResource(resourceFromProp);\n    const { identifier } = useResource();\n\n    const getDefaultId = () => {\n        const idFromPropsOrRoute = paramsFromProp?.id ?? idFromRoute;\n\n        if (resourceFromProp && resourceFromProp !== identifier) {\n            return paramsFromProp?.id;\n        }\n\n        return idFromPropsOrRoute;\n    };\n    const defaultId = getDefaultId();\n\n    const resourceName = resourceFromProp ?? resource?.name;\n    const action = actionFromProp ?? actionFromRoute ?? \"\";\n    const params = paramsFromProp ?? {\n        id: defaultId,\n        resource: resource,\n    };\n\n    const { data } = useCan({\n        resource: resourceName,\n        action,\n        params,\n    });\n\n    useEffect(() => {\n        if (onUnauthorized && data?.can === false) {\n            onUnauthorized({\n                resource: resourceName,\n                action,\n                reason: data?.reason,\n                params,\n            });\n        }\n    }, [data?.can]);\n\n    if (data?.can) {\n        if (React.isValidElement(children)) {\n            const Children = React.cloneElement(children, rest);\n            return Children;\n        }\n\n        return <>{children}</>;\n    }\n\n    if (data?.can === false) {\n        return <>{fallback ?? null}</>;\n    }\n\n    return null;\n};\n","import React, { SVGProps, useEffect } from \"react\";\nimport { CSSRules } from \"./styles\";\n\nconst text =\n    \"If you find Refine useful, you can contribute to its growth by giving it a star on GitHub\";\n\nexport const GitHubBanner = () => {\n    useEffect(() => {\n        const styleTag = document.createElement(\"style\");\n        document.head.appendChild(styleTag);\n        CSSRules.forEach((rule) =>\n            styleTag.sheet?.insertRule(rule, styleTag.sheet.cssRules.length),\n        );\n    }, []);\n\n    return (\n        <div\n            className=\"banner bg-top-announcement\"\n            style={{\n                width: \"100%\",\n                height: \"48px\",\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    paddingLeft: \"200px\",\n                    width: \"100%\",\n                    maxWidth: \"100vw\",\n                    height: \"100%\",\n                    borderBottom: \"1px solid #47ebeb26\",\n                }}\n            >\n                <div\n                    className=\"top-announcement-mask\"\n                    style={{\n                        position: \"absolute\",\n                        left: 0,\n                        top: 0,\n                        width: \"100%\",\n                        height: \"100%\",\n                        borderBottom: \"1px solid #47ebeb26\",\n                    }}\n                >\n                    <div\n                        style={{\n                            position: \"relative\",\n                            width: \"960px\",\n                            height: \"100%\",\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            margin: \"0 auto\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                width: \"calc(50% - 300px)\",\n                                height: \"100%\",\n                                position: \"relative\",\n                            }}\n                        >\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"1.5s\",\n                                    position: \"absolute\",\n                                    top: \"2px\",\n                                    right: \"220px\",\n                                }}\n                                id={\"1\"}\n                            />\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"1s\",\n                                    position: \"absolute\",\n                                    top: \"8px\",\n                                    right: \"100px\",\n                                    transform: \"rotate(180deg)\",\n                                }}\n                                id={\"2\"}\n                            />\n                            <GlowBig\n                                style={{\n                                    position: \"absolute\",\n                                    right: \"10px\",\n                                }}\n                                id={\"3\"}\n                            />\n                        </div>\n\n                        <div\n                            style={{\n                                width: \"calc(50% - 300px)\",\n                                height: \"100%\",\n                                position: \"relative\",\n                            }}\n                        >\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"2s\",\n                                    position: \"absolute\",\n                                    top: \"6px\",\n                                    right: \"180px\",\n                                    transform: \"rotate(180deg)\",\n                                }}\n                                id={\"4\"}\n                            />\n                            <GlowSmall\n                                style={{\n                                    animationDelay: \"0.5s\",\n                                    transitionDelay: \"1.3s\",\n                                    position: \"absolute\",\n                                    top: \"2px\",\n                                    right: \"40px\",\n                                }}\n                                id={\"5\"}\n                            />\n                            <GlowBig\n                                style={{\n                                    position: \"absolute\",\n                                    right: \"-70px\",\n                                }}\n                                id={\"6\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <Text text={text} />\n            </div>\n        </div>\n    );\n};\n\nconst Text = ({ text }: { text: string }) => {\n    return (\n        <a\n            className=\"gh-link\"\n            href=\"https://s.refine.dev/github-support\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            style={{\n                position: \"absolute\",\n                height: \"100%\",\n                padding: \"0 60px\",\n                display: \"flex\",\n                flexWrap: \"nowrap\",\n                whiteSpace: \"nowrap\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundImage:\n                    \"linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)\",\n            }}\n        >\n            <div\n                style={{\n                    color: \"#fff\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    gap: \"8px\",\n                }}\n            >\n                <span\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    ⭐️\n                </span>\n                <span\n                    className=\"text\"\n                    style={{\n                        fontSize: \"16px\",\n                        lineHeight: \"24px\",\n                    }}\n                >\n                    {text}\n                </span>\n                <span\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    ⭐️\n                </span>\n            </div>\n        </a>\n    );\n};\n\nconst GlowSmall = ({ style, ...props }: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={80}\n            height={40}\n            fill=\"none\"\n            style={{\n                opacity: 1,\n                animation:\n                    \"top-announcement-glow 1s ease-in-out infinite alternate\",\n                ...style,\n            }}\n        >\n            <circle\n                cx={40}\n                r={40}\n                fill={`url(#${props.id}-a)`}\n                fillOpacity={0.5}\n            />\n            <defs>\n                <radialGradient\n                    id={`${props.id}-a`}\n                    cx={0}\n                    cy={0}\n                    r={1}\n                    gradientTransform=\"matrix(0 40 -40 0 40 0)\"\n                    gradientUnits=\"userSpaceOnUse\"\n                >\n                    <stop stopColor=\"#47EBEB\" />\n                    <stop offset={1} stopColor=\"#47EBEB\" stopOpacity={0} />\n                </radialGradient>\n            </defs>\n        </svg>\n    );\n};\n\nconst GlowBig = ({ style, ...props }: SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={120}\n        height={48}\n        fill=\"none\"\n        {...props}\n        style={{\n            opacity: 1,\n            animation:\n                \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...style,\n        }}\n    >\n        <circle\n            cx={60}\n            cy={24}\n            r={60}\n            fill={`url(#${props.id}-a)`}\n            fillOpacity={0.5}\n        />\n        <defs>\n            <radialGradient\n                id={`${props.id}-a`}\n                cx={0}\n                cy={0}\n                r={1}\n                gradientTransform=\"matrix(0 60 -60 0 60 24)\"\n                gradientUnits=\"userSpaceOnUse\"\n            >\n                <stop stopColor=\"#47EBEB\" />\n                <stop offset={1} stopColor=\"#47EBEB\" stopOpacity={0} />\n            </radialGradient>\n        </defs>\n    </svg>\n);\n","export const CSSRules = [\n    `\n    .bg-top-announcement {\n        border-bottom: 1px solid rgba(71, 235, 235, 0.15);\n        background: radial-gradient(\n                218.19% 111.8% at 0% 0%,\n                rgba(71, 235, 235, 0.1) 0%,\n                rgba(71, 235, 235, 0.2) 100%\n            ),\n            #14141f;\n    }\n    `,\n    `\n    .top-announcement-mask {\n        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        mask-repeat: repeat;\n        -webkit-mask-repeat: repeat;\n        background: rgba(71, 235, 235, 0.25);\n    }\n    `,\n    `\n    .banner {\n        display: flex;\n        @media (max-width: 1000px) {\n            display: none;\n        }\n    }`,\n    `\n    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {\n        text-decoration: none;\n        z-index: 9;\n    }\n    `,\n    `\n    @keyframes top-announcement-glow {\n        0% {\n            opacity: 1;\n        }\n\n        100% {\n            opacity: 0;\n        }\n    }\n    `,\n];\n","import React from \"react\";\nimport { AutoSaveIndicatorProps } from \"../../interfaces\";\nimport { useTranslate } from \"@hooks/translate\";\n\nexport const AutoSaveIndicator: React.FC<AutoSaveIndicatorProps> = ({\n    status,\n    elements: {\n        success = <Message key=\"autoSave.success\" defaultMessage=\"saved\" />,\n        error = (\n            <Message key=\"autoSave.error\" defaultMessage=\"auto save failure\" />\n        ),\n        loading = <Message key=\"autoSave.loading\" defaultMessage=\"saving...\" />,\n        idle = (\n            <Message key=\"autoSave.idle\" defaultMessage=\"waiting for changes\" />\n        ),\n    } = {},\n}) => {\n    switch (status) {\n        case \"success\":\n            return <>{success}</>;\n        case \"error\":\n            return <>{error}</>;\n        case \"loading\":\n            return <>{loading}</>;\n        default:\n            return <>{idle}</>;\n    }\n};\n\nconst Message = ({\n    key,\n    defaultMessage,\n}: {\n    key: string;\n    defaultMessage: string;\n}) => {\n    const translate = useTranslate();\n\n    return <span>{translate(key, defaultMessage)}</span>;\n};\n"],"mappings":"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","names":["src_exports","__export","DevToolsContext","DevToolsContextProvider","DevtoolsEvent","hooksByScope","receive","scopes","send","module","__toCommonJS","acc","hook","scope","import_react","A","ws","event","payload","resolve","listener","__name","callback","e","receivedEvent","r","React","__devtools","port","children","values","setValues","setWs","wsInstance","unsubscribe","data","v","contextValues","src_exports","__export","getTrace","getXRay","useQuerySubscription","module","__toCommonJS","import_error_stack_parser","E","unrelatedFunctionName","cleanStack","stack","firstUnrelatedIndex","frame","REFINE_PACKAGE_FILEPATH_REGEXP","isRefineStack","filename","getPackageNameFromFilename","_a","match","name","error","g","ErrorStackParser","trace","import_devtools_shared","getResourcePath","__name","hookName","legacyKey","m","import_react","import_react","import_react_query","import_devtools_internal","import_qs","import_unionWith","import_differenceWith","import_warn_once","userFriendlySecond","__name","miliseconds","import_zip","import_fromPairs","importCSVMapper","__name","data","mapData","item","headers","body","entry","fromPairs","zip","index","array","import_pluralize","userFriendlyResourceName","__name","resource","type","humanizeResource","humanizeString","pluralize","handleUseParams","__name","params","pickNotDeprecated","__name","args","arg","arrayFindIndex","array","slice","item","index","sliceItem","sliceIndex","__name","convertToLegacy","segments","newSegments","newParams","arrayFindIndex","__name","BaseKeyBuilder","legacy","ParamsKeyBuilder","paramsValue","DataIdRequiringKeyBuilder","idValue","DataIdsRequiringKeyBuilder","idsValue","el","DataResourceKeyBuilder","actionType","DataKeyBuilder","resourceName","mutationName","AuthKeyBuilder","AccessResourceKeyBuilder","AccessKeyBuilder","AuditActionKeyBuilder","AuditKeyBuilder","KeyBuilder","name","keys","queryKeys","__name","resource","dataProviderName","meta","metaData","providerName","keys","config","pickNotDeprecated","ids","item","id","queryKeysReplacement","preferLegacyKeys","hasPermission","__name","permissions","action","i","isParameter","__name","segment","splitToSegments","__name","path","segment","isSegmentCountsSame","__name","route","resourceRoute","routeSegments","splitToSegments","resourceRouteSegments","removeLeadingTrailingSlashes","__name","route","checkBySegments","__name","route","resourceRoute","stdRoute","removeLeadingTrailingSlashes","stdResourceRoute","isSegmentCountsSame","routeSegments","splitToSegments","segment","index","isParameter","getDefaultActionPath","__name","resourceName","action","parentPrefix","cleanParentPrefix","removeLeadingTrailingSlashes","path","getParentResource","__name","resource","resources","_a","_b","parentName","pickNotDeprecated","getParentPrefixForResource","__name","resource","resources","legacy","parents","parent","getParentResource","_a","v","removeLeadingTrailingSlashes","getActionRoutesFromResource","__name","resource","resources","legacy","actions","actionList","parentPrefix","getParentPrefixForResource","action","_a","_b","item","route","getDefaultActionPath","pickMatchedRoute","__name","routes","_a","sanitizedRoutes","route","splitToSegments","removeLeadingTrailingSlashes","segmentsCount","eligibleRoutes","nonParametrizedRoutes","isParameter","matchResourceFromRoute","__name","route","resources","allFound","resource","getActionRoutesFromResource","actionRoute","checkBySegments","mostEligible","pickMatchedRoute","routeGenerator","__name","item","resourcesFromProps","_a","route","parentPrefix","getParentPrefixForResource","meta","pickNotDeprecated","createTreeView","__name","resources","_a","tree","resourcesRouteObject","resourcesNameObject","parent","child","i","route","pickNotDeprecated","name","humanizeString","__name","text","import_react","import_pluralize","import_react","DefaultLayout","__name","children","React","defaultRefineOptions","humanizeString","pluralize","RefineContext","React","DefaultLayout","RefineContextProvider","__name","hasDashboard","mutationMode","warnWhenUnsavedChanges","syncWithLocation","undoableTimeout","children","DashboardPage","Title","Layout","Header","Sider","Footer","OffLayoutArea","LoginPage","catchAll","liveMode","onLiveEvent","options","handleRefineOptions","__name","options","disableTelemetry","liveMode","mutationMode","reactQueryClientConfig","reactQueryDevtoolConfig","syncWithLocation","undoableTimeout","warnWhenUnsavedChanges","_a","_b","_c","_d","_e","_f","_g","_h","optionsWithDefaults","defaultRefineOptions","disableTelemetryWithDefault","reactQueryWithDefaults","redirectPage","__name","redirectFromProps","action","redirectOptions","sequentialPromises","__name","promises","onEachResolve","onEachReject","results","index","promise","result","error","pickResource","__name","identifier","resources","legacy","resourceByRoute","r","removeLeadingTrailingSlashes","resource","pickDataProvider","__name","resourceName","dataProviderName","resources","resource","pickResource","meta","pickNotDeprecated","handleMultiple","__name","promises","res","getNextPageParam","__name","lastPage","pagination","cursor","current","pageSize","totalPages","getPreviousPageParam","legacyResourceTransform","__name","resources","_resources","resource","_a","_b","routeGenerator","pickRouteParams","__name","route","splitToSegments","removeLeadingTrailingSlashes","s","isParameter","prepareRouteParams","__name","routeParams","meta","acc","key","value","composeRoute","__name","designatedRoute","resourceMeta","parsed","meta","routeParams","pickRouteParams","preparedRouteParams","prepareRouteParams","match","key","fromParams","import_react","LegacyAuthContext","React","LegacyAuthContextProvider","__name","children","isProvided","authOperations","replace","useNavigation","loginFunc","params","_a","error","registerFunc","logoutFunc","checkAuthFunc","AuthBindingsContext","AuthBindingsContextProvider","authBindings","handleLogin","handleRegister","handleLogout","handleCheck","result","handleForgotPassword","handleUpdatePassword","useLegacyAuthContext","useAuthBindingsContext","useActiveAuthProvider","__name","legacyAuthProvider","useLegacyAuthContext","authProvider","useAuthBindingsContext","handlePaginationParams","__name","hasPagination","pagination","configPagination","hasPaginationString","mode","current","pickNotDeprecated","pageSize","import_react","useMediaQuery","__name","query","matches","setMatches","media","listener","safeTranslate","__name","translate","key","defaultMessage","options","translated","fallback","generateDefaultDocumentTitle","translate","resource","action","id","resourceName","_a","actionPrefixMatcher","identifier","resourceNameFallback","userFriendlyResourceName","resourceNameWithFallback","defaultTitle","safeTranslate","suffix","autoGeneratedTitle","__name","import_react","useMutationMode","__name","mutationMode","undoableTimeout","RefineContext","import_react","import_react","UnsavedWarnContext","React","UnsavedWarnContextProvider","__name","children","warnWhen","setWarnWhen","useWarnAboutChange","__name","warnWhenUnsavedChanges","RefineContext","warnWhen","setWarnWhen","UnsavedWarnContext","import_react","useSyncWithLocation","__name","syncWithLocation","RefineContext","import_react","useTitle","__name","Title","RefineContext","import_react","useRefineContext","__name","Footer","Header","Layout","OffLayoutArea","Sider","Title","hasDashboard","mutationMode","syncWithLocation","undoableTimeout","warnWhenUnsavedChanges","DashboardPage","LoginPage","catchAll","options","RefineContext","useUserFriendlyName","__name","textTransformers","useRefineContext","name","type","humanizeName","isNested","__name","obj","isArray","flattenObjectKeys","prefix","acc","key","currentPrefix","item","index","propertyPathToArray","__name","propertyPath","item","parseTableParams","__name","url","current","pageSize","sorter","sorters","filters","qs","pickNotDeprecated","parseTableParamsFromQuery","params","stringifyTableParams","options","pagination","rest","compareFilters","left","right","compareSorters","unionFilters","permanentFilter","newFilters","prevFilters","f","warnOnce","unionWith","crudFilter","unionSorters","permanentSorter","newSorters","crudSorter","setInitialFilters","defaultFilter","differenceWith","setInitialSorters","defaultSorter","getDefaultSortOrder","columnName","sortItem","item","getDefaultFilter","operatorType","filter","operator","field","file2Base64","__name","file","resolve","reject","reader","resultHandler","error","useKeys","__name","useNewQueryKeys","useRefineContext","keys","usePermissions","v3LegacyAuthProviderCompatible","options","legacyGetPermission","useLegacyAuthContext","getPermissions","useAuthBindingsContext","keys","preferLegacyKeys","useKeys","queryResponse","legacyQueryResponse","__name","import_react_query","import_devtools_internal","useGetIdentity","v3LegacyAuthProviderCompatible","queryOptions","legacyGetUserIdentity","useLegacyAuthContext","getIdentity","useAuthBindingsContext","keys","preferLegacyKeys","useKeys","queryResponse","legacyQueryResponse","__name","import_react_query","import_devtools_internal","import_react_query","useInvalidateAuthStore","__name","queryClient","keys","preferLegacyKeys","useKeys","action","useLogout","v3LegacyAuthProviderCompatible","mutationOptions","invalidateAuthStore","useInvalidateAuthStore","routerType","useRouterType","go","useGo","push","useNavigation","open","close","useNotification","legacyLogoutFromContext","useLegacyAuthContext","logoutFromContext","useAuthBindingsContext","keys","preferLegacyKeys","useKeys","mutation","data","variables","success","error","redirectTo","redirectPath","redirect","buildNotification","v3LegacyAuthProviderCompatibleMutation","__name","import_react","import_react_query","import_devtools_internal","import_qs","useLogin","v3LegacyAuthProviderCompatible","mutationOptions","invalidateAuthStore","useInvalidateAuthStore","routerType","useRouterType","go","useGo","replace","useNavigation","parsed","useParsed","useLocation","useRouterContext","search","close","open","useNotification","legacyLoginFromContext","useLegacyAuthContext","loginFromContext","useAuthBindingsContext","keys","preferLegacyKeys","useKeys","to","React","_a","qs","mutation","success","redirectTo","error","buildNotification","v3LegacyAuthProviderCompatibleMutation","redirectPathFromAuth","__name","import_react_query","import_devtools_internal","useRegister","v3LegacyAuthProviderCompatible","mutationOptions","invalidateAuthStore","useInvalidateAuthStore","routerType","useRouterType","go","useGo","replace","useNavigation","legacyRegisterFromContext","useLegacyAuthContext","registerFromContext","useAuthBindingsContext","close","open","useNotification","keys","preferLegacyKeys","useKeys","mutation","success","redirectTo","error","buildNotification","v3LegacyAuthProviderCompatibleMutation","redirectPathFromAuth","__name","import_react_query","import_devtools_internal","useForgotPassword","v3LegacyAuthProviderCompatible","mutationOptions","routerType","useRouterType","go","useGo","replace","useNavigation","v3LegacyAuthProviderCompatibleForgotPasswordFromContext","useLegacyAuthContext","forgotPasswordFromContext","useAuthBindingsContext","close","open","useNotification","keys","preferLegacyKeys","useKeys","mutation","success","redirectTo","error","buildNotification","v3LegacyAuthProviderCompatibleMutation","redirectPathFromAuth","__name","import_react","import_react_query","import_devtools_internal","import_qs","useUpdatePassword","v3LegacyAuthProviderCompatible","mutationOptions","routerType","useRouterType","go","useGo","replace","useNavigation","legacyUpdatePasswordFromContext","useLegacyAuthContext","updatePasswordFromContext","useAuthBindingsContext","close","open","useNotification","keys","preferLegacyKeys","useKeys","parsed","useParsed","useLocation","useRouterContext","search","params","React","qs","mutation","variables","success","redirectTo","error","buildNotification","v3LegacyAuthProviderCompatibleMutation","redirectPathFromAuth","__name","import_react_query","import_devtools_internal","useIsAuthenticated","v3LegacyAuthProviderCompatible","params","checkAuth","useLegacyAuthContext","check","useAuthBindingsContext","keys","preferLegacyKeys","useKeys","queryResponse","legacyQueryResponse","__name","useAuthenticated","import_react_query","import_devtools_internal","useOnError","v3LegacyAuthProviderCompatible","routerType","useRouterType","go","useGo","replace","useNavigation","legacyCheckErrorFromContext","useLegacyAuthContext","onErrorFromContext","useAuthBindingsContext","keys","preferLegacyKeys","useKeys","legacyLogout","useLogout","logout","mutation","shouldLogout","redirectTo","v3LegacyAuthProviderCompatibleMutation","redirectPath","__name","useCheckError","useIsExistAuthentication","__name","legacyIsProvided","useLegacyAuthContext","isProvided","useAuthBindingsContext","import_devtools_internal","import_react_query","import_react","useLoadingOvertime","__name","isLoading","intervalProp","onIntervalProp","elapsedTime","setElapsedTime","options","useRefineContext","overtime","interval","onInterval","intervalFn","prevElapsedTime","useList","__name","resourceFromProp","config","filters","hasPagination","pagination","sorters","queryOptions","successNotification","errorNotification","meta","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","overtimeOptions","resources","resource","identifier","useResource","dataProvider","useDataProvider","translate","useTranslate","authProvider","useActiveAuthProvider","checkError","useOnError","handleNotification","useHandleNotification","getMeta","useMeta","keys","preferLegacyKeys","useKeys","pickedDataProvider","pickDataProvider","preferredMeta","pickNotDeprecated","prefferedFilters","prefferedSorters","prefferedHasPagination","prefferedPagination","handlePaginationParams","isServerPagination","combinedMeta","notificationValues","isEnabled","getList","useResourceSubscription","queryResponse","queryKey","pageParam","signal","rawData","_a","data","current","mode","pageSize","notificationConfig","err","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useOne","__name","resourceFromProp","id","queryOptions","successNotification","errorNotification","meta","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","overtimeOptions","resources","resource","identifier","useResource","dataProvider","useDataProvider","translate","useTranslate","authProvider","useActiveAuthProvider","checkError","useOnError","handleNotification","useHandleNotification","getMeta","useMeta","keys","preferLegacyKeys","useKeys","preferredMeta","pickNotDeprecated","pickedDataProvider","pickDataProvider","getOne","combinedMeta","useResourceSubscription","queryResponse","queryKey","pageParam","signal","data","_a","notificationConfig","err","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useMany","__name","resourceFromProp","ids","queryOptions","successNotification","errorNotification","meta","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","overtimeOptions","resources","resource","identifier","useResource","dataProvider","useDataProvider","translate","useTranslate","authProvider","useActiveAuthProvider","checkError","useOnError","handleNotification","useHandleNotification","getMeta","useMeta","keys","preferLegacyKeys","useKeys","preferredMeta","pickNotDeprecated","pickedDataProvider","pickDataProvider","isEnabled","getMany","getOne","combinedMeta","useResourceSubscription","queryResponse","queryKey","pageParam","signal","handleMultiple","id","data","_a","notificationConfig","err","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","import_react","import_isEqual","UndoableQueueContext","React","initialState","undoableQueueReducer","__name","state","action","notificationItem","isEqual","UndoableQueueContextProvider","children","notifications","notificationDispatch","notificationData","notification","UndoableQueue","useUpdate","__name","mutationOptions","overtimeOptions","resources","select","useResource","queryClient","dataProvider","useDataProvider","mutationModeContext","undoableTimeoutContext","useMutationMode","translate","useTranslate","authProvider","useActiveAuthProvider","checkError","useOnError","publish","usePublish","log","useLog","notificationDispatch","useCancelNotification","handleNotification","useHandleNotification","invalidateStore","useInvalidate","getMeta","useMeta","textTransformers","useRefineContext","keys","preferLegacyKeys","useKeys","mutation","id","values","resourceName","mutationMode","undoableTimeout","onCancel","meta","metaData","dataProviderName","resource","identifier","combinedMeta","pickNotDeprecated","mutationModePropOrContext","undoableTimeoutPropOrContext","pickDataProvider","resolve","reject","doMutation","result","err","cancelMutation","optimisticUpdateMap","_","__","preferredMeta","queryKey","queryKeysReplacement","resourceKeys","previousQueries","previous","data","record","_a","_data","_error","invalidates","successNotification","dataProviderNameFromProp","context","resourceSingular","notificationConfig","previousData","queryData","acc","item","_fields","_operation","_variables","rest","errorNotification","query","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useCreate","__name","mutationOptions","overtimeOptions","authProvider","useActiveAuthProvider","checkError","useOnError","dataProvider","useDataProvider","invalidateStore","useInvalidate","resources","select","useResource","translate","useTranslate","publish","usePublish","log","useLog","handleNotification","useHandleNotification","getMeta","useMeta","textTransformers","useRefineContext","keys","preferLegacyKeys","useKeys","mutation","resourceName","values","meta","metaData","dataProviderName","resource","identifier","combinedMeta","pickNotDeprecated","pickDataProvider","data","successNotificationFromProp","dataProviderNameFromProp","invalidates","_a","_b","resourceSingular","notificationConfig","_fields","_operation","_variables","rest","err","errorNotificationFromProp","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useDelete","__name","mutationOptions","overtimeOptions","authProvider","useActiveAuthProvider","checkError","useOnError","dataProvider","useDataProvider","resources","select","useResource","queryClient","mutationModeContext","undoableTimeoutContext","useMutationMode","notificationDispatch","useCancelNotification","translate","useTranslate","publish","usePublish","log","useLog","handleNotification","useHandleNotification","invalidateStore","useInvalidate","getMeta","useMeta","textTransformers","useRefineContext","keys","preferLegacyKeys","useKeys","mutation","id","mutationMode","undoableTimeout","resourceName","onCancel","meta","metaData","dataProviderName","values","resource","identifier","combinedMeta","pickNotDeprecated","mutationModePropOrContext","undoableTimeoutPropOrContext","pickDataProvider","resolve","reject","doMutation","result","err","cancelMutation","_","__","preferredMeta","queryKey","queryKeysReplacement","resourceKeys","previousQueries","previous","record","_a","data","_data","_error","invalidates","successNotification","dataProviderNameFromProp","context","resourceSingular","notificationConfig","_fields","_operation","_variables","rest","errorNotification","query","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useCreateMany","__name","mutationOptions","overtimeOptions","dataProvider","useDataProvider","resources","select","useResource","translate","useTranslate","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","log","useLog","getMeta","useMeta","textTransformers","useRefineContext","keys","preferLegacyKeys","useKeys","mutation","resourceName","values","meta","metaData","dataProviderName","resource","identifier","combinedMeta","pickNotDeprecated","selectedDataProvider","pickDataProvider","handleMultiple","val","response","successNotification","dataProviderNameFromProp","invalidates","resourcePlural","notificationConfig","ids","item","_fields","_operation","_variables","rest","err","errorNotification","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useUpdateMany","__name","mutationOptions","overtimeOptions","resources","select","useResource","queryClient","dataProvider","useDataProvider","translate","useTranslate","mutationModeContext","undoableTimeoutContext","useMutationMode","authProvider","useActiveAuthProvider","checkError","useOnError","notificationDispatch","useCancelNotification","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","log","useLog","getMeta","useMeta","textTransformers","useRefineContext","keys","preferLegacyKeys","useKeys","mutation","ids","values","resourceName","onCancel","mutationMode","undoableTimeout","meta","metaData","dataProviderName","resource","identifier","combinedMeta","pickNotDeprecated","mutationModePropOrContext","undoableTimeoutPropOrContext","selectedDataProvider","pickDataProvider","mutationFn","handleMultiple","id","resolve","reject","doMutation","result","err","cancelMutation","optimisticUpdateMap","_","__","preferredMeta","queryKey","queryKeysReplacement","resourceKeys","previousQueries","previous","data","record","_data","_error","dataProviderNameFromProp","successNotification","context","resourceSingular","notificationConfig","previousData","queryData","acc","item","_a","_fields","_operation","_variables","rest","errorNotification","query","elapsedTime","useLoadingOvertime","import_devtools_internal","import_react_query","useDeleteMany","__name","mutationOptions","overtimeOptions","authProvider","useActiveAuthProvider","checkError","useOnError","mutationModeContext","undoableTimeoutContext","useMutationMode","dataProvider","useDataProvider","notificationDispatch","useCancelNotification","translate","useTranslate","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","log","useLog","resources","select","useResource","queryClient","getMeta","useMeta","textTransformers","useRefineContext","keys","preferLegacyKeys","useKeys","mutation","resourceName","ids","mutationMode","undoableTimeout","onCancel","meta","metaData","dataProviderName","values","resource","identifier","combinedMeta","pickNotDeprecated","mutationModePropOrContext","undoableTimeoutPropOrContext","selectedDataProvider","pickDataProvider","mutationFn","handleMultiple","id","resolve","reject","doMutation","result","err","cancelMutation","_","__","preferredMeta","queryKey","queryKeysReplacement","resourceKeys","previousQueries","previous","item","data","record","_data","_error","invalidates","dataProviderNameFromProp","successNotification","context","notificationConfig","_fields","_operation","_variables","rest","errorNotification","query","resourceSingular","elapsedTime","useLoadingOvertime","useApiUrl","__name","dataProviderName","_a","dataProvider","useDataProvider","resource","useResource","getApiUrl","pickNotDeprecated","import_react_query","import_devtools_internal","useCustom","__name","url","method","config","queryOptions","successNotification","errorNotification","meta","metaData","dataProviderName","overtimeOptions","dataProvider","useDataProvider","authProvider","useActiveAuthProvider","checkError","useOnError","translate","useTranslate","handleNotification","useHandleNotification","getMeta","useMeta","keys","preferLegacyKeys","useKeys","preferredMeta","pickNotDeprecated","custom","combinedMeta","queryResponse","queryKey","pageParam","signal","data","_a","notificationConfig","err","elapsedTime","useLoadingOvertime","import_react_query","import_devtools_internal","useCustomMutation","__name","mutationOptions","overtimeOptions","authProvider","useActiveAuthProvider","checkError","useOnError","handleNotification","useHandleNotification","dataProvider","useDataProvider","translate","useTranslate","getMeta","useMeta","keys","preferLegacyKeys","useKeys","mutation","url","method","values","meta","metaData","dataProviderName","config","combinedMeta","pickNotDeprecated","custom","data","successNotificationFromProp","notificationConfig","err","errorNotificationFromProp","elapsedTime","useLoadingOvertime","import_react","import_react","defaultDataProvider","__name","DataContext","React","DataContextProvider","children","rest","dataProviders","useDataProvider","__name","context","DataContext","dataProviderName","import_devtools_internal","import_react_query","useInfiniteList","__name","resourceFromProp","config","filters","hasPagination","pagination","sorters","queryOptions","successNotification","errorNotification","meta","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","overtimeOptions","resources","resource","identifier","useResource","dataProvider","useDataProvider","translate","useTranslate","authProvider","useActiveAuthProvider","checkError","useOnError","handleNotification","useHandleNotification","getMeta","useMeta","keys","preferLegacyKeys","useKeys","pickedDataProvider","pickDataProvider","preferredMeta","pickNotDeprecated","prefferedFilters","prefferedSorters","prefferedHasPagination","prefferedPagination","handlePaginationParams","isServerPagination","notificationValues","isEnabled","combinedMeta","getList","useResourceSubscription","queryResponse","queryKey","pageParam","signal","paginationProperties","data","total","rest","lastPage","getNextPageParam","getPreviousPageParam","_a","notificationConfig","err","elapsedTime","useLoadingOvertime","import_react","LiveContext","React","LiveContextProvider","__name","liveProvider","children","import_react","import_react_query","import_react","import_react","import_react","import_react","import_isEqual","useMemoized","__name","value","ref","isEqual","useDeepMemo","__name","fn","dependencies","memoizedDependencies","useMemoized","ResourceContext","React","ResourceContextProvider","__name","providedResources","children","resources","useDeepMemo","legacyResourceTransform","import_react","RouterPickerContext","React","RouterPickerProvider","useRouterType","__name","import_react","import_react","defaultBindings","RouterBindingsContext","RouterBindingsProvider","__name","children","router","React","import_react","useParse","__name","bindings","RouterBindingsContext","React","useParsed","__name","parse","useParse","React","useResource","args","resources","ResourceContext","routerType","useRouterType","params","useParsed","oldProps","select","__name","resourceName","force","pickedResource","pickResource","resource","identifier","resourceWithRoute","useResourceWithRoute","useParams","useRouterContext","legacyParams","resourceKeyToCheck","legacyResource","legacyId","legacyAction","legacyResourceName","legacyIdentifier","pickedFromProps","import_react","useResourceWithRoute","__name","resources","ResourceContext","route","picked","pickResource","useInvalidate","__name","resources","useResource","queryClient","keys","preferLegacyKeys","useKeys","resource","dataProviderName","invalidates","id","invalidationFilters","invalidationOptions","dp","pickDataProvider","queryKey","key","import_react","useResourceSubscription","__name","resourceFromProp","params","channel","types","enabled","liveModeFromProp","onLiveEvent","dataProviderNameFromProps","meta","_a","resource","identifier","useResource","liveDataContext","LiveContext","liveModeFromContext","onLiveEventContextCallback","RefineContext","liveMode","invalidate","useInvalidate","dataProviderName","subscription","callback","event","import_react","useLiveMode","__name","liveMode","liveModeFromContext","RefineContext","import_react","useSubscription","__name","params","channel","types","enabled","onLiveEvent","dataProviderName","meta","liveDataContext","LiveContext","subscription","import_react","usePublish","__name","liveContext","LiveContext","import_react","useCancelNotification","__name","notifications","notificationDispatch","UndoableQueueContext","import_react","import_react","NotificationContext","NotificationContextProvider","__name","open","close","children","React","useNotification","__name","open","close","NotificationContext","import_react","useHandleNotification","__name","open","useNotification","notification","fallbackNotification","import_react","import_react","TranslationContext","React","TranslationContextProvider","__name","children","i18nProvider","useSetLocale","__name","i18nProvider","TranslationContext","lang","import_react","useTranslate","__name","i18nProvider","TranslationContext","translate","key","options","defaultMessage","import_react","useGetLocale","__name","i18nProvider","TranslationContext","import_react","import_export_to_csv_fix_source_map","useExport","__name","resourceName","resourceFromProps","sorter","sorters","filters","maxItemCount","pageSize","mapData","item","exportOptions","meta","metaData","dataProviderName","onError","isLoading","setIsLoading","dataProvider","useDataProvider","getMeta","useMeta","resource","resources","identifier","useResource","pickNotDeprecated","filename","useUserFriendlyName","getList","pickDataProvider","combinedMeta","rawData","current","preparingData","data","total","error","import_react","import_warn_once","import_debounce","useForm","__name","resourceFromProps","actionFromProps","idFromProps","onMutationSuccess","onMutationError","redirectFromProps","successNotification","errorNotification","meta","metaData","queryMeta","mutationMeta","mutationModeProp","liveMode","onLiveEvent","liveParams","undoableTimeout","dataProviderName","invalidates","queryOptions","createMutationOptions","updateMutationOptions","overtimeOptions","autoSave","optimisticUpdateMap","invalidate","useInvalidate","options","useRefineContext","getMeta","useMeta","resource","idFromRoute","actionFromRoute","identifier","useResource","inferredIdentifier","defaultId","idFromPropsOrRoute","id","setId","React","action","combinedMeta","pickNotDeprecated","mutationModeContext","useMutationMode","mutationMode","isCreate","isEdit","isClone","warnOnce","designatedRedirectAction","redirectPage","queryResult","useOne","isFetchingQuery","mutationResultCreate","useCreate","mutateCreate","isLoadingCreate","mutationResultUpdate","useUpdate","mutateUpdate","isLoadingUpdate","autoSaveMutation","setWarnWhen","useWarnAboutChange","handleSubmitWithRedirect","useRedirectionAfterSubmission","onFinishCreate","values","onSuccess","resolve","reject","data","_","context","_a","responseId","error","onFinishAutoSaveMutation","variables","onFinishAutoSave","debounce","allValues","result","elapsedTime","useLoadingOvertime","redirect","idFromFunction","import_react","useRedirectionAfterSubmission","__name","show","edit","list","create","useNavigation","redirect","resource","id","meta","import_react","import_react","useGetToPath","__name","routerType","useRouterType","resourceFromRoute","resources","useResource","parsed","useParsed","React","resource","action","meta","_a","selectedResource","actionRoute","getActionRoutesFromResource","item","composeRoute","useGo","__name","bindings","RouterBindingsContext","resourceSelect","useResource","getToPath","useGetToPath","goFromRouter","React","config","resource","handleResourceErrors","newTo","to","import_react","useBack","__name","bindings","RouterBindingsContext","React","useNavigation","__name","resources","useResource","routerType","useRouterType","useHistory","useRouterContext","history","parsed","useParsed","go","useGo","back","useBack","handleUrl","url","type","createUrl","resource","meta","_a","resourceItem","pickResource","createActionRoute","getActionRoutesFromResource","r","composeRoute","editUrl","id","encodedId","editActionRoute","cloneUrl","cloneActionRoute","showUrl","showActionRoute","listUrl","listActionRoute","path","rest","import_react","import_warn_once","useShow","__name","resourceFromProp","id","successNotification","errorNotification","meta","metaData","liveMode","onLiveEvent","dataProviderName","queryOptions","overtimeOptions","resource","idFromRoute","identifier","useResource","inferredIdentifier","getMeta","useMeta","defaultId","idFromPropsOrRoute","showId","setShowId","React","combinedMeta","pickNotDeprecated","warnOnce","queryResult","useOne","elapsedTime","useLoadingOvertime","import_react","import_papaparse","import_chunk","useImport","__name","resourceName","resourceFromProps","mapData","item","paparseOptions","batchSize","onFinish","meta","metaData","onProgress","dataProviderName","processedAmount","setProcessedAmount","totalAmount","setTotalAmount","isLoading","setIsLoading","resource","identifier","useResource","getMeta","useMeta","createMany","useCreateMany","create","useCreate","combinedMeta","pickNotDeprecated","mutationResult","handleCleanup","handleFinish","createdValues","result","handleChange","file","resolve","data","values","importCSVMapper","valueFns","value","sequentialPromises","response","currentAmount","error","index","chunks","chunk","chunkedFns","chunkedValues","currentBatchLength","event","import_react","useModal","__name","defaultVisible","visible","setVisible","show","close","useToPath","__name","resource","action","meta","legacy","useGetToPath","import_react","useLink","__name","bindings","RouterBindingsContext","to","rest","React","import_react","import_react","defaultProvider","LegacyRouterContext","React","RouterContext","LegacyRouterContextProvider","__name","children","useHistory","useLocation","useParams","Prompt","Link","routes","useRouterContext","__name","routerContextValues","RouterContext","useHistory","useLocation","useParams","Prompt","Link","routes","defaultProvider","import_react_query","import_react","import_react","AccessControlContext","React","AccessControlContextProvider","__name","can","children","options","React","AccessControlContext","sanitizeResource","__name","resource","icon","list","edit","create","show","clone","children","meta","options","restResource","_metaIcon","restMeta","_optionsIcon","restOptions","import_devtools_internal","useCan","__name","action","resource","params","queryOptions","can","AccessControlContext","keys","preferLegacyKeys","useKeys","_resource","paramsRest","sanitizedResource","sanitizeResource","queryResponse","import_react","useCanWithoutCache","__name","canFromContext","React","AccessControlContext","params","rest","sanitizedResource","sanitizeResource","import_react","import_uniqBy","import_debounce","import_get","useSelect","__name","props","search","setSearch","options","setOptions","selectedOptions","setSelectedOptions","resourceFromProps","sort","sorters","filters","optionLabel","optionValue","debounceValue","successNotification","errorNotification","defaultValueQueryOptionsFromProps","queryOptions","fetchSize","pagination","hasPagination","liveMode","defaultValue","onLiveEvent","onSearchFromProp","liveParams","meta","metaData","dataProviderName","overtimeOptions","resource","identifier","useResource","combinedMeta","useMeta","pickNotDeprecated","defaultValues","defaultValueQueryOnSuccess","data","item","get","defaultValueQueryOptions","defaultValueQueryResult","useMany","_a","defaultQueryOnSuccess","queryResult","useList","onSearch","value","elapsedTime","useLoadingOvertime","combinedOptions","uniqBy","debounce","import_react","import_qs","import_differenceWith","import_isEqual","import_warn_once","defaultPermanentFilter","defaultPermanentSorter","useTable","initialCurrent","initialPageSize","hasPagination","pagination","initialSorter","permanentSorter","defaultSetFilterBehavior","initialFilter","permanentFilter","filtersFromProp","sortersFromProp","syncWithLocationProp","resourceFromProp","successNotification","errorNotification","queryOptions","liveModeFromProp","onLiveEvent","liveParams","meta","metaData","dataProviderName","overtimeOptions","_a","_b","_c","_d","_e","syncWithLocationContext","useSyncWithLocation","syncWithLocation","liveMode","useLiveMode","routerType","useRouterType","useLocation","useRouterContext","search","pathname","getMeta","useMeta","parsedParams","useParsed","isServerSideFilteringEnabled","isServerSideSortingEnabled","hasPaginationString","isPaginationEnabled","prefferedCurrent","pickNotDeprecated","prefferedPageSize","preferredMeta","parsedCurrent","parsedPageSize","parsedSorter","parsedFilters","parseTableParams","preferredInitialFilters","preferredPermanentFilters","preferredInitialSorters","preferredPermanentSorters","prefferedFilterBehavior","defaultCurrent","defaultPageSize","defaultSorter","defaultFilter","replace","useNavigation","go","useGo","resource","identifier","useResource","combinedMeta","React","warnOnce","sorters","setSorters","setInitialSorters","filters","setFilters","setInitialFilters","current","setCurrent","pageSize","setPageSize","createLinkForSyncWithLocation","__name","sorter","currentQueryParams","qs","stringifyParams","stringifyTableParams","rest","queryParams","differenceWith","isEqual","queryResult","useList","unionFilters","unionSorters","setFiltersAsMerge","newFilters","prevFilters","setFiltersAsReplace","setFiltersWithSetter","setter","prev","setFiltersFn","setterOrFilters","behavior","setSortWithUnion","newSorter","elapsedTime","useLoadingOvertime","import_react","import_react_query","import_react","AuditLogContext","React","AuditLogContextProvider","__name","create","get","update","children","import_devtools_internal","useLog","__name","logMutationOptions","renameMutationOptions","queryClient","auditLogContext","AuditLogContext","keys","preferLegacyKeys","useKeys","authProvider","useActiveAuthProvider","resources","ResourceContext","identityData","refetch","isLoading","useGetIdentity","log","params","_a","_b","_c","_d","_e","resource","pickResource","logPermissions","pickNotDeprecated","hasPermission","authorData","rename","data","import_react","import_react_query","import_devtools_internal","useLogList","__name","resource","action","meta","author","metaData","queryOptions","get","AuditLogContext","keys","preferLegacyKeys","useKeys","import_react","import_warn_once","useBreadcrumb","__name","metaFromProps","routerType","useRouterType","i18nProvider","TranslationContext","parsed","useParsed","translate","useTranslate","resources","resource","action","useResource","textTransformers","useRefineContext","breadcrumbs","addBreadcrumb","parentName","_a","_b","_c","_d","_e","_f","parentResource","pickResource","grandParentName","pickNotDeprecated","listActionOfResource","getActionRoutesFromResource","r","hrefRaw","href","composeRoute","key","actionLabel","warnOnce","import_react","createResourceKey","__name","resource","resources","legacy","parents","currentParentResource","getParentResource","r","removeLeadingTrailingSlashes","createTree","__name","resources","legacy","root","resource","parents","currentParent","getParentResource","currentTree","parent","key","flatten","tree","items","itemKey","createResourceKey","item","getCleanPath","__name","pathname","useMenu","meta","hideOnMissingParameter","translate","useTranslate","getToPath","useGetToPath","routerType","useRouterType","resource","resources","useResource","useParsed","useLocation","useRouterContext","legacyPath","getFriendlyName","useUserFriendlyName","cleanRoute","selectedKey","createResourceKey","defaultOpenKeys","React","parent","getParentResource","keys","prepareItem","item","_a","_b","_c","_d","_e","_f","composed","pickNotDeprecated","treeItems","treeMenuItems","createTree","prepare","items","preparedNodes","newItem","useMeta","__name","params","useParsed","resource","metaFromProp","meta","sanitizeResource","_filters","_sorters","_current","_pageSize","additionalParams","ErrorComponent","__name","errorMessage","setErrorMessage","translate","useTranslate","push","useNavigation","go","useGo","routerType","useRouterType","resource","action","useResource","React","import_react","LoginPage","__name","username","setUsername","password","setPassword","translate","useTranslate","authProvider","useActiveAuthProvider","login","useLogin","React","e","import_react","import_react","LoginPage","__name","providers","registerLink","forgotPasswordLink","rememberMe","contentProps","wrapperProps","renderContent","formProps","title","hideForm","routerType","useRouterType","Link","useLink","LegacyLink","useRouterContext","ActiveLink","email","setEmail","password","setPassword","remember","setRemember","translate","useTranslate","authProvider","useActiveAuthProvider","login","useLogin","renderLink","link","text","React","renderProviders","provider","content","e","import_react","RegisterPage","__name","providers","loginLink","wrapperProps","contentProps","renderContent","formProps","title","hideForm","routerType","useRouterType","Link","useLink","LegacyLink","useRouterContext","ActiveLink","email","setEmail","password","setPassword","translate","useTranslate","authProvider","useActiveAuthProvider","register","isLoading","useRegister","renderLink","link","text","React","renderProviders","provider","content","e","import_react","ForgotPasswordPage","__name","loginLink","wrapperProps","contentProps","renderContent","formProps","title","translate","useTranslate","routerType","useRouterType","Link","useLink","LegacyLink","useRouterContext","ActiveLink","email","setEmail","forgotPassword","isLoading","useForgotPassword","renderLink","link","text","React","content","e","import_react","UpdatePasswordPage","__name","wrapperProps","contentProps","renderContent","formProps","title","translate","useTranslate","authProvider","useActiveAuthProvider","updatePassword","isLoading","useUpdatePassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","content","React","e","AuthPage","__name","props","type","React","RegisterPage","ForgotPasswordPage","UpdatePasswordPage","LoginPage","import_react","ReadyPage","__name","React","import_react","cards","WelcomePage","__name","isTablet","useMediaQuery","isMobile","getGridTemplateColumns","getHeaderFontSize","getSubHeaderFontSize","React","card","Card","title","description","iconUrl","link","isHover","setIsHover","import_react","import_react_query","import_devtools_internal","import_react","import_react","REFINE_VERSION","useTelemetryData","__name","_a","auth","useIsExistAuthentication","auditLogContext","AuditLogContext","liveContext","LiveContext","routerContext","RouterContext","dataContext","DataContext","i18nProvider","TranslationContext","notificationContext","NotificationContext","accessControlContext","AccessControlContext","resources","useResource","refineOptions","useRefineContext","auditLog","live","router","data","i18n","notification","accessControl","projectId","encode","__name","payload","stringifiedPayload","throughImage","src","img","throughFetch","transport","Telemetry","useTelemetryData","sent","React","encoded","checkRouterPropMisuse","__name","value","bindings","otherProps","key","import_react","useRouterMisuseWarning","__name","value","warned","React","checkRouterPropMisuse","Refine","__name","legacyAuthProvider","authProvider","dataProvider","legacyRouterProvider","routerProvider","notificationProvider","accessControlProvider","auditLogProvider","resources","DashboardPage","ReadyPage","LoginPage","catchAll","children","liveProvider","i18nProvider","Title","Layout","Sider","Header","Footer","OffLayoutArea","onLiveEvent","options","optionsWithDefaults","disableTelemetryWithDefault","reactQueryWithDefaults","handleRefineOptions","queryClient","useDeepMemo","_a","notificationProviderContextValues","React","useRouterMisuseWarning","RouterComponent","NotificationContextProvider","LegacyAuthContextProvider","AuthBindingsContextProvider","DataContextProvider","LiveContextProvider","RouterPickerProvider","RouterBindingsProvider","LegacyRouterContextProvider","ResourceContextProvider","TranslationContextProvider","AccessControlContextProvider","AuditLogContextProvider","UndoableQueueContextProvider","RefineContextProvider","UnsavedWarnContextProvider","Telemetry","RouteChangeHandler","import_react","UndoableQueue","__name","notification","translate","useTranslate","notificationDispatch","useCancelNotification","open","useNotification","timeoutId","setTimeoutId","cancelNotification","userFriendlySecond","newTimeoutId","import_react","LayoutWrapper","__name","children","LayoutFromProps","SiderFromProps","HeaderFromProps","TitleFromProps","FooterFromProps","OffLayoutAreaFromProps","Layout","Footer","Header","Sider","Title","OffLayoutArea","useRefineContext","React","UnsavedPrompt","Prompt","useRouterContext","translate","useTranslate","warnWhen","setWarnWhen","useWarnAboutChange","warnWhenListener","e","import_react","Authenticated","redirectOnFail","appendCurrentPathToQuery","children","fallbackContent","loadingContent","_a","activeAuthProvider","useActiveAuthProvider","routerType","useRouterType","hasAuthProvider","isLegacyAuth","isLegacyRouter","parsed","useParsed","go","useGo","useLocation","useRouterContext","legacyLocation","isFetching","isSuccess","isAuthenticatedStatus","authenticatedRedirect","useIsAuthenticated","isAuthenticated","React","appliedRedirect","pathname","toQuery","RedirectLegacy","Redirect","__name","config","to","replace","useNavigation","import_react","RouteChangeHandler","__name","useLocation","useRouterContext","checkAuth","useLegacyAuthContext","location","import_react","CanAccess","__name","resourceFromProp","actionFromProp","paramsFromProp","fallback","onUnauthorized","children","rest","resource","idFromRoute","actionFromRoute","useResource","identifier","defaultId","idFromPropsOrRoute","resourceName","action","params","data","useCan","React","import_react","CSSRules","text","GitHubBanner","__name","styleTag","CSSRules","rule","_a","React","GlowSmall","GlowBig","Text","style","props","import_react","AutoSaveIndicator","__name","status","success","React","Message","error","loading","idle","key","defaultMessage","translate","useTranslate"]}